name: Release Campfire v0.1

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v0.1.0)'
        required: true
        default: 'v0.1.0'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux x86_64
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            binary_name: campfire-on-rust
            asset_name: campfire-on-rust-linux-x86_64
          
          # Linux ARM64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            binary_name: campfire-on-rust
            asset_name: campfire-on-rust-linux-aarch64
          
          # macOS x86_64
          - target: x86_64-apple-darwin
            os: macos-latest
            binary_name: campfire-on-rust
            asset_name: campfire-on-rust-darwin-x86_64
          
          # macOS ARM64 (Apple Silicon)
          - target: aarch64-apple-darwin
            os: macos-latest
            binary_name: campfire-on-rust
            asset_name: campfire-on-rust-darwin-aarch64
          
          # Windows x86_64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            binary_name: campfire-on-rust.exe
            asset_name: campfire-on-rust-windows-x86_64.exe

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross-compilation tools (Linux ARM64)
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: Configure cross-compilation (Linux ARM64)
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        echo "[target.aarch64-unknown-linux-gnu]" >> ~/.cargo/config.toml
        echo "linker = \"aarch64-linux-gnu-gcc\"" >> ~/.cargo/config.toml

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.target }}-cargo-

    - name: Build binary
      run: cargo build --release --target ${{ matrix.target }} --bin campfire-on-rust

    - name: Strip binary (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        if command -v strip >/dev/null 2>&1; then
          strip target/${{ matrix.target }}/release/${{ matrix.binary_name }}
        fi

    - name: Create release asset
      run: |
        mkdir -p release
        cp target/${{ matrix.target }}/release/${{ matrix.binary_name }} release/${{ matrix.asset_name }}

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.asset_name }}
        path: release/${{ matrix.asset_name }}

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: Dockerfile.railway
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          campfire-rust:${{ steps.version.outputs.version }}
          campfire-rust:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  release:
    name: Create Release
    needs: [build, docker]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: Extract version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Create release directory
      run: |
        mkdir -p release
        find artifacts -name "campfire-on-rust*" -exec cp {} release/ \;
        ls -la release/

    - name: Generate checksums
      run: |
        cd release
        sha256sum * > checksums.txt
        cat checksums.txt

    - name: Create release notes
      run: |
        cat > release_notes.md << 'EOF'
        # Campfire v0.1.0 - Zero-Friction Chat Application

        🔥 **First stable release of Campfire in Rust!**

        ## What's New

        - **Complete Rust rewrite** of Basecamp's Campfire chat application
        - **Zero-friction deployment** with single binary and Docker support
        - **Real-time messaging** with WebSocket support
        - **Rich text features** including @mentions and /play sound commands
        - **Full-text search** powered by SQLite FTS5
        - **Push notifications** with Web Push API support
        - **Bot integration** with API key authentication
        - **First-run setup** with admin account creation
        - **Demo mode** for easy evaluation

        ## Quick Start

        ### 🚀 One-Line Local Install
        ```bash
        curl -sSL https://raw.githubusercontent.com/your-org/campfire-rust/main/scripts/install.sh | bash
        ```

        ### 🚂 One-Click Railway Deployment
        [![Deploy on Railway](https://railway.app/button.svg)](https://railway.app/template/campfire-rust-v01)

        ### 🐳 Docker
        ```bash
        docker run -p 3000:3000 -v campfire-data:/app/data campfire-rust:v0.1.0
        ```

        ## Features

        - ✅ **Real-time chat** with typing indicators and presence
        - ✅ **Room management** (Open, Closed, Direct messages)
        - ✅ **Rich text messaging** with HTML formatting
        - ✅ **Sound system** with 59 embedded MP3 files
        - ✅ **@mentions** and user notifications
        - ✅ **Full-text search** across all messages
        - ✅ **Push notifications** for desktop and mobile
        - ✅ **Bot API** for integrations and automation
        - ✅ **Session management** with secure authentication
        - ✅ **SQLite database** with automatic migrations
        - ✅ **Single binary deployment** with embedded assets

        ## System Requirements

        - **Memory**: 64MB RAM minimum
        - **Storage**: 100MB disk space
        - **Network**: HTTP/HTTPS and WebSocket support
        - **Browser**: Modern browser with WebSocket and Push API support

        ## Performance

        - **Startup time**: < 1 second
        - **Memory usage**: ~20MB base + ~1MB per active connection
        - **Message throughput**: 1000+ messages/second
        - **Concurrent users**: 100+ users per instance
        - **Database**: SQLite with FTS5 for sub-millisecond search

        ## Security

        - **bcrypt password hashing** with secure session tokens
        - **Rate limiting** on all API endpoints
        - **Input sanitization** and XSS protection
        - **CSRF protection** with secure headers
        - **Bot API authentication** with revokable tokens

        ## Download

        Choose your platform:

        | Platform | Architecture | Download |
        |----------|--------------|----------|
        | Linux | x86_64 | [campfire-on-rust-linux-x86_64](https://github.com/your-org/campfire-rust/releases/download/${{ steps.version.outputs.version }}/campfire-on-rust-linux-x86_64) |
        | Linux | ARM64 | [campfire-on-rust-linux-aarch64](https://github.com/your-org/campfire-rust/releases/download/${{ steps.version.outputs.version }}/campfire-on-rust-linux-aarch64) |
        | macOS | x86_64 | [campfire-on-rust-darwin-x86_64](https://github.com/your-org/campfire-rust/releases/download/${{ steps.version.outputs.version }}/campfire-on-rust-darwin-x86_64) |
        | macOS | ARM64 | [campfire-on-rust-darwin-aarch64](https://github.com/your-org/campfire-rust/releases/download/${{ steps.version.outputs.version }}/campfire-on-rust-darwin-aarch64) |
        | Windows | x86_64 | [campfire-on-rust-windows-x86_64.exe](https://github.com/your-org/campfire-rust/releases/download/${{ steps.version.outputs.version }}/campfire-on-rust-windows-x86_64.exe) |

        ## Verification

        Verify your download with SHA256 checksums:
        ```bash
        sha256sum -c checksums.txt
        ```

        ## What's Next (v0.2)

        - 📎 **File attachments** with drag-and-drop upload
        - 👤 **Avatar uploads** and user profiles
        - 🔗 **OpenGraph previews** for shared links
        - 📊 **Analytics dashboard** for room activity
        - 🔌 **Plugin system** for custom integrations
        - 🌐 **Multi-language support** and internationalization

        ## Support

        - 📖 **Documentation**: [README](https://github.com/your-org/campfire-rust#readme)
        - 🐛 **Bug Reports**: [Issues](https://github.com/your-org/campfire-rust/issues)
        - 💬 **Discussions**: [GitHub Discussions](https://github.com/your-org/campfire-rust/discussions)
        - 📧 **Email**: support@campfire-rust.com

        ---

        **Full Changelog**: https://github.com/your-org/campfire-rust/compare/v0.0.1...${{ steps.version.outputs.version }}
        EOF

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: Campfire ${{ steps.version.outputs.version }}
        body_path: release_notes.md
        files: |
          release/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Update install script
      run: |
        # Update the install script with the correct version and repo
        sed -i 's/VERSION="v0.1.0"/VERSION="${{ steps.version.outputs.version }}"/' scripts/install.sh
        sed -i 's/REPO="your-org\/campfire-rust"/REPO="${{ github.repository }}"/' scripts/install.sh

    - name: Commit updated install script
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add scripts/install.sh
        git commit -m "Update install script for ${{ steps.version.outputs.version }}" || exit 0
        git push || exit 0