Directory structure:
└── basecamp-once-campfire/
    ├── README.md
    ├── config.ru
    ├── CONTRIBUTING.md
    ├── Dockerfile
    ├── Gemfile
    ├── MIT-LICENSE
    ├── Procfile
    ├── Rakefile
    ├── .dockerignore
    ├── .env.erb
    ├── .pumaenv
    ├── .rubocop.yml
    ├── app/
    │   ├── assets/
    │   │   ├── images/
    │   │   │   ├── .keep
    │   │   │   └── sounds/
    │   │   │       ├── 56k.webp
    │   │   │       ├── clowntown.webp
    │   │   │       ├── dangerzone.webp
    │   │   │       ├── drama.webp
    │   │   │       ├── greatjob.webp
    │   │   │       ├── loggins.webp
    │   │   │       ├── nyan.webp
    │   │   │       ├── pushit.webp
    │   │   │       ├── rumble.webp
    │   │   │       ├── top.webp
    │   │   │       ├── yay.webp
    │   │   │       └── yeah.webp
    │   │   └── stylesheets/
    │   │       ├── _reset.css
    │   │       ├── actiontext.css
    │   │       ├── animation.css
    │   │       ├── autocomplete.css
    │   │       ├── avatars.css
    │   │       ├── base.css
    │   │       ├── boosts.css
    │   │       ├── buttons.css
    │   │       ├── code.css
    │   │       ├── colorize.css
    │   │       ├── colors.css
    │   │       ├── composer.css
    │   │       ├── embeds.css
    │   │       ├── filters.css
    │   │       ├── flash.css
    │   │       ├── inputs.css
    │   │       ├── layout.css
    │   │       ├── lightbox.css
    │   │       ├── messages.css
    │   │       ├── nav.css
    │   │       ├── panels.css
    │   │       ├── separators.css
    │   │       ├── sidebar.css
    │   │       ├── signup.css
    │   │       ├── spinner.css
    │   │       └── utilities.css
    │   ├── channels/
    │   │   ├── heartbeat_channel.rb
    │   │   ├── presence_channel.rb
    │   │   ├── read_rooms_channel.rb
    │   │   ├── room_channel.rb
    │   │   ├── typing_notifications_channel.rb
    │   │   ├── unread_rooms_channel.rb
    │   │   └── application_cable/
    │   │       ├── channel.rb
    │   │       └── connection.rb
    │   ├── controllers/
    │   │   ├── accounts_controller.rb
    │   │   ├── application_controller.rb
    │   │   ├── first_runs_controller.rb
    │   │   ├── messages_controller.rb
    │   │   ├── pwa_controller.rb
    │   │   ├── qr_code_controller.rb
    │   │   ├── rooms_controller.rb
    │   │   ├── searches_controller.rb
    │   │   ├── sessions_controller.rb
    │   │   ├── unfurl_links_controller.rb
    │   │   ├── users_controller.rb
    │   │   ├── welcome_controller.rb
    │   │   ├── accounts/
    │   │   │   ├── bots_controller.rb
    │   │   │   ├── custom_styles_controller.rb
    │   │   │   ├── join_codes_controller.rb
    │   │   │   ├── logos_controller.rb
    │   │   │   ├── users_controller.rb
    │   │   │   └── bots/
    │   │   │       └── keys_controller.rb
    │   │   ├── autocompletable/
    │   │   │   └── users_controller.rb
    │   │   ├── concerns/
    │   │   │   ├── allow_browser.rb
    │   │   │   ├── authentication.rb
    │   │   │   ├── authorization.rb
    │   │   │   ├── room_scoped.rb
    │   │   │   ├── set_current_request.rb
    │   │   │   ├── set_platform.rb
    │   │   │   ├── tracked_room_visit.rb
    │   │   │   ├── version_headers.rb
    │   │   │   └── authentication/
    │   │   │       └── session_lookup.rb
    │   │   ├── messages/
    │   │   │   ├── boosts_controller.rb
    │   │   │   └── by_bots_controller.rb
    │   │   ├── rooms/
    │   │   │   ├── closeds_controller.rb
    │   │   │   ├── directs_controller.rb
    │   │   │   ├── involvements_controller.rb
    │   │   │   ├── opens_controller.rb
    │   │   │   └── refreshes_controller.rb
    │   │   ├── sessions/
    │   │   │   └── transfers_controller.rb
    │   │   └── users/
    │   │       ├── avatars_controller.rb
    │   │       ├── profiles_controller.rb
    │   │       ├── push_subscriptions_controller.rb
    │   │       ├── sidebars_controller.rb
    │   │       └── push_subscriptions/
    │   │           └── test_notifications_controller.rb
    │   ├── helpers/
    │   │   ├── accounts_helper.rb
    │   │   ├── application_helper.rb
    │   │   ├── broadcasts_helper.rb
    │   │   ├── clipboard_helper.rb
    │   │   ├── content_filters.rb
    │   │   ├── drop_target_helper.rb
    │   │   ├── emoji_helper.rb
    │   │   ├── forms_helper.rb
    │   │   ├── messages_helper.rb
    │   │   ├── qr_code_helper.rb
    │   │   ├── rich_text_helper.rb
    │   │   ├── rooms_helper.rb
    │   │   ├── searches_helper.rb
    │   │   ├── time_helper.rb
    │   │   ├── translations_helper.rb
    │   │   ├── users_helper.rb
    │   │   ├── version_helper.rb
    │   │   ├── content_filters/
    │   │   │   ├── remove_solo_unfurled_link_text.rb
    │   │   │   ├── sanitize_tags.rb
    │   │   │   └── style_unfurled_twitter_avatars.rb
    │   │   ├── messages/
    │   │   │   └── attachment_presentation.rb
    │   │   ├── rooms/
    │   │   │   └── involvements_helper.rb
    │   │   └── users/
    │   │       ├── avatars_helper.rb
    │   │       ├── filter_helper.rb
    │   │       ├── profiles_helper.rb
    │   │       └── sidebar_helper.rb
    │   ├── javascript/
    │   │   ├── application.js
    │   │   ├── controllers/
    │   │   │   ├── application.js
    │   │   │   ├── auto_submit_controller.js
    │   │   │   ├── autocomplete_controller.js
    │   │   │   ├── badge_dot_controller.js
    │   │   │   ├── boost_delete_controller.js
    │   │   │   ├── composer_controller.js
    │   │   │   ├── copy_to_clipboard_controller.js
    │   │   │   ├── drop_target_controller.js
    │   │   │   ├── element_removal_controller.js
    │   │   │   ├── filter_controller.js
    │   │   │   ├── form_controller.js
    │   │   │   ├── index.js
    │   │   │   ├── lightbox_controller.js
    │   │   │   ├── local_time_controller.js
    │   │   │   ├── maintain_scroll_controller.js
    │   │   │   ├── messages_controller.js
    │   │   │   ├── notifications_controller.js
    │   │   │   ├── popup_controller.js
    │   │   │   ├── presence_controller.js
    │   │   │   ├── pwa_install_controller.js
    │   │   │   ├── read_rooms_controller.js
    │   │   │   ├── refresh_room_controller.js
    │   │   │   ├── reply_controller.js
    │   │   │   ├── rich_autocomplete_controller.js
    │   │   │   ├── rooms_list_controller.js
    │   │   │   ├── scroll_into_view_controller.js
    │   │   │   ├── search_results_controller.js
    │   │   │   ├── sessions_controller.js
    │   │   │   ├── soft_keyboard_controller.js
    │   │   │   ├── sorted_list_controller.js
    │   │   │   ├── sound_controller.js
    │   │   │   ├── toggle_class_controller.js
    │   │   │   ├── turbo_frame_controller.js
    │   │   │   ├── turbo_streaming_controller.js
    │   │   │   ├── typing_notifications_controller.js
    │   │   │   ├── upload_preview_controller.js
    │   │   │   └── web_share_controller.js
    │   │   ├── helpers/
    │   │   │   ├── dom_helpers.js
    │   │   │   ├── navigator_helpers.js
    │   │   │   ├── string_helpers.js
    │   │   │   ├── timing_helpers.js
    │   │   │   └── turbo_helpers.js
    │   │   ├── initializers/
    │   │   │   ├── autocomplete.js
    │   │   │   ├── current.js
    │   │   │   ├── highlight.js
    │   │   │   ├── index.js
    │   │   │   └── rich_text.js
    │   │   ├── lib/
    │   │   │   ├── cookie.js
    │   │   │   ├── autocomplete/
    │   │   │   │   ├── autocomplete_handler.js
    │   │   │   │   ├── base_autocomplete_handler.js
    │   │   │   │   ├── collection.js
    │   │   │   │   ├── constants.js
    │   │   │   │   ├── helpers.js
    │   │   │   │   ├── mentions_autocomplete_handler.js
    │   │   │   │   ├── renderer.js
    │   │   │   │   ├── selection.js
    │   │   │   │   ├── suggestion_context.js
    │   │   │   │   ├── suggestion_controller.js
    │   │   │   │   ├── suggestion_results_controller.js
    │   │   │   │   ├── utils.js
    │   │   │   │   └── custom_elements/
    │   │   │   │       ├── suggestion_option.js
    │   │   │   │       └── suggestion_select.js
    │   │   │   └── rich_text/
    │   │   │       └── unfurl/
    │   │   │           ├── unfurler.js
    │   │   │           └── lib/
    │   │   │               ├── opengraph_embed_operation.js
    │   │   │               └── paste.js
    │   │   └── models/
    │   │       ├── client_message.js
    │   │       ├── file_uploader.js
    │   │       ├── message_formatter.js
    │   │       ├── message_paginator.js
    │   │       ├── scroll_manager.js
    │   │       └── typing_tracker.js
    │   ├── jobs/
    │   │   ├── application_job.rb
    │   │   ├── bot/
    │   │   │   └── webhook_job.rb
    │   │   └── room/
    │   │       └── push_message_job.rb
    │   ├── models/
    │   │   ├── account.rb
    │   │   ├── application_platform.rb
    │   │   ├── application_record.rb
    │   │   ├── boost.rb
    │   │   ├── current.rb
    │   │   ├── first_run.rb
    │   │   ├── membership.rb
    │   │   ├── message.rb
    │   │   ├── purchaser.rb
    │   │   ├── push.rb
    │   │   ├── room.rb
    │   │   ├── search.rb
    │   │   ├── session.rb
    │   │   ├── sound.rb
    │   │   ├── user.rb
    │   │   ├── webhook.rb
    │   │   ├── account/
    │   │   │   └── joinable.rb
    │   │   ├── concerns/
    │   │   │   └── .keep
    │   │   ├── membership/
    │   │   │   └── connectable.rb
    │   │   ├── message/
    │   │   │   ├── attachment.rb
    │   │   │   ├── broadcasts.rb
    │   │   │   ├── mentionee.rb
    │   │   │   ├── pagination.rb
    │   │   │   └── searchable.rb
    │   │   ├── opengraph/
    │   │   │   ├── document.rb
    │   │   │   ├── fetch.rb
    │   │   │   ├── location.rb
    │   │   │   ├── metadata.rb
    │   │   │   └── metadata/
    │   │   │       └── fetching.rb
    │   │   ├── push/
    │   │   │   └── subscription.rb
    │   │   ├── room/
    │   │   │   └── message_pusher.rb
    │   │   ├── rooms/
    │   │   │   ├── closed.rb
    │   │   │   ├── direct.rb
    │   │   │   └── open.rb
    │   │   └── user/
    │   │       ├── avatar.rb
    │   │       ├── bot.rb
    │   │       ├── mentionable.rb
    │   │       ├── role.rb
    │   │       └── transferable.rb
    │   └── views/
    │       ├── accounts/
    │       │   ├── _help_contact.html.erb
    │       │   ├── _invite.html.erb
    │       │   ├── edit.html.erb
    │       │   ├── bots/
    │       │   │   ├── _bot.html.erb
    │       │   │   ├── _form.html.erb
    │       │   │   ├── edit.html.erb
    │       │   │   ├── index.html.erb
    │       │   │   └── new.html.erb
    │       │   ├── custom_styles/
    │       │   │   └── edit.html.erb
    │       │   └── users/
    │       │       ├── _next_page_container.html.erb
    │       │       ├── _user.html.erb
    │       │       └── index.turbo_stream.erb
    │       ├── action_text/
    │       │   └── attachables/
    │       │       └── _opengraph_embed.html.erb
    │       ├── autocompletable/
    │       │   └── users/
    │       │       ├── _user.json.jbuilder
    │       │       └── index.json.jbuilder
    │       ├── first_runs/
    │       │   └── show.html.erb
    │       ├── layouts/
    │       │   ├── _lightbox.html.erb
    │       │   ├── application.html.erb
    │       │   ├── mailer.html.erb
    │       │   ├── mailer.text.erb
    │       │   └── action_text/
    │       │       └── contents/
    │       │           └── _content.html.erb
    │       ├── messages/
    │       │   ├── _actions.html.erb
    │       │   ├── _message.html.erb
    │       │   ├── _presentation.html.erb
    │       │   ├── _template.html.erb
    │       │   ├── _unrenderable.html.erb
    │       │   ├── create.turbo_stream.erb
    │       │   ├── destroy.turbo_stream.erb
    │       │   ├── edit.html.erb
    │       │   ├── index.html.erb
    │       │   ├── room_not_found.html.erb
    │       │   ├── show.html.erb
    │       │   └── boosts/
    │       │       ├── _boost.html.erb
    │       │       ├── _boosts.html.erb
    │       │       ├── index.html.erb
    │       │       └── new.html.erb
    │       ├── pwa/
    │       │   ├── _browser_settings.html.erb
    │       │   ├── _install_instructions.html.erb
    │       │   ├── _system_settings.html.erb
    │       │   ├── manifest.json.erb
    │       │   └── service_worker.js
    │       ├── rooms/
    │       │   ├── show.html.erb
    │       │   ├── closeds/
    │       │   │   ├── _form.html.erb
    │       │   │   ├── _user.html.erb
    │       │   │   ├── edit.html.erb
    │       │   │   └── new.html.erb
    │       │   ├── directs/
    │       │   │   ├── edit.html.erb
    │       │   │   └── new.html.erb
    │       │   ├── involvements/
    │       │   │   ├── _bell.html.erb
    │       │   │   └── show.html.erb
    │       │   ├── layouts/
    │       │   │   ├── _edit.html.erb
    │       │   │   ├── _form.html.erb
    │       │   │   └── _new.html.erb
    │       │   ├── opens/
    │       │   │   ├── _form.html.erb
    │       │   │   ├── _user.html.erb
    │       │   │   ├── edit.html.erb
    │       │   │   └── new.html.erb
    │       │   ├── refreshes/
    │       │   │   └── show.turbo_stream.erb
    │       │   └── show/
    │       │       ├── _composer.html.erb
    │       │       ├── _invitation.html.erb
    │       │       └── _nav.html.erb
    │       ├── searches/
    │       │   └── index.html.erb
    │       ├── sessions/
    │       │   ├── incompatible_browser.html.erb
    │       │   ├── new.html.erb
    │       │   └── transfers/
    │       │       └── show.html.erb
    │       ├── users/
    │       │   ├── _mention.html.erb
    │       │   ├── new.html.erb
    │       │   ├── show.html.erb
    │       │   ├── autocompletables/
    │       │   │   └── _template.html.erb
    │       │   ├── avatars/
    │       │   │   └── show.svg.erb
    │       │   ├── profiles/
    │       │   │   ├── _membership.html.erb
    │       │   │   ├── _transfer.html.erb
    │       │   │   └── show.html.erb
    │       │   ├── push_subscriptions/
    │       │   │   ├── _push_subscription.html.erb
    │       │   │   └── index.html.erb
    │       │   └── sidebars/
    │       │       ├── show.html.erb
    │       │       └── rooms/
    │       │           ├── _direct.html.erb
    │       │           ├── _direct_placeholder.html.erb
    │       │           └── _shared.html.erb
    │       └── welcome/
    │           └── show.html.erb
    ├── config/
    │   ├── application.rb
    │   ├── boot.rb
    │   ├── brakeman.ignore
    │   ├── bundler-audit.yml
    │   ├── cable.yml
    │   ├── ci.rb
    │   ├── database.yml
    │   ├── environment.rb
    │   ├── importmap.rb
    │   ├── puma.rb
    │   ├── puma_dev.rb
    │   ├── redis.conf
    │   ├── resque-pool.yml
    │   ├── routes.rb
    │   ├── storage.yml
    │   ├── environments/
    │   │   ├── development.rb
    │   │   ├── performance.rb
    │   │   ├── production.rb
    │   │   └── test.rb
    │   ├── initializers/
    │   │   ├── active_storage.rb
    │   │   ├── assets.rb
    │   │   ├── content_security_policy.rb
    │   │   ├── extensions.rb
    │   │   ├── filter_parameter_logging.rb
    │   │   ├── inflections.rb
    │   │   ├── permissions_policy.rb
    │   │   ├── sentry.rb
    │   │   ├── session_store.rb
    │   │   ├── storage_paths.rb
    │   │   ├── time_formats.rb
    │   │   ├── vapid.rb
    │   │   ├── version.rb
    │   │   └── web_push.rb
    │   └── locales/
    │       └── en.yml
    ├── db/
    │   ├── structure.sql
    │   └── migrate/
    │       ├── 20231215043540_create_initial_schema.rb
    │       ├── 20231220143106_add_bio_to_users.rb
    │       ├── 20240110071740_create_sessions.rb
    │       ├── 20240115124901_remove_owner_role.rb
    │       ├── 20240130003150_create_webhooks.rb
    │       ├── 20240130213001_add_custom_styles_to_accounts.rb
    │       ├── 20240131105830_alter_users_set_password_digest_not_null.rb
    │       ├── 20240209110503_alter_users_add_bot_token.rb
    │       ├── 20250825100957_add_service_name_to_active_storage_blobs.active_storage.rb
    │       ├── 20250825100958_create_active_storage_variant_records.active_storage.rb
    │       └── 20250825100959_remove_not_null_on_active_storage_blobs_checksum.active_storage.rb
    ├── lib/
    │   ├── assets/
    │   │   └── .keep
    │   ├── rails_ext/
    │   │   ├── action_text_attachables.rb
    │   │   ├── actiontext_opengraph_embeds.rb
    │   │   ├── filter.rb
    │   │   ├── filters.rb
    │   │   └── string.rb
    │   ├── restricted_http/
    │   │   └── private_network_guard.rb
    │   ├── tasks/
    │   │   ├── generate.rake
    │   │   ├── resque.rake
    │   │   └── .keep
    │   └── web_push/
    │       ├── notification.rb
    │       └── pool.rb
    ├── log/
    │   └── .keep
    ├── public/
    │   ├── 404.html
    │   ├── 422.html
    │   ├── 500.html
    │   ├── 502.html
    │   └── robots.txt
    ├── script/
    │   ├── admin/
    │   │   ├── create-vapid-key
    │   │   ├── prepare-backup
    │   │   └── reset-password
    │   └── dev/
    │       ├── flood-room
    │       └── populate
    ├── test/
    │   ├── application_system_test_case.rb
    │   ├── test_helper.rb
    │   ├── channels/
    │   │   ├── presence_channel_test.rb
    │   │   └── application_cable/
    │   │       └── connection_test.rb
    │   ├── controllers/
    │   │   ├── accounts_controller_test.rb
    │   │   ├── first_runs_controller_test.rb
    │   │   ├── messages_controller_test.rb
    │   │   ├── qr_code_controller_test.rb
    │   │   ├── rooms_controller_test.rb
    │   │   ├── searches_controller_test.rb
    │   │   ├── sessions_controller_test.rb
    │   │   ├── unfurl_links_controller_test.rb
    │   │   ├── users_controller_test.rb
    │   │   ├── welcome_controller_test.rb
    │   │   ├── .keep
    │   │   ├── accounts/
    │   │   │   ├── bots_controller_test.rb
    │   │   │   ├── custom_styles_controller_test.rb
    │   │   │   ├── join_codes_controller_test.rb
    │   │   │   ├── logos_controller_test.rb
    │   │   │   ├── users_controller_test.rb
    │   │   │   └── bots/
    │   │   │       └── keys_controller_test.rb
    │   │   ├── autocompletable/
    │   │   │   └── users_controller_test.rb
    │   │   ├── messages/
    │   │   │   ├── boosts_controller_test.rb
    │   │   │   └── by_bots_controller_test.rb
    │   │   ├── rooms/
    │   │   │   ├── closeds_controller_test.rb
    │   │   │   ├── directs_controller_test.rb
    │   │   │   ├── involvements_controller_test.rb
    │   │   │   ├── opens_controller_test.rb
    │   │   │   └── refreshes_controller_test.rb
    │   │   ├── sessions/
    │   │   │   └── transfers_controller_test.rb
    │   │   └── users/
    │   │       ├── avatars_controller_test.rb
    │   │       ├── profiles_controller_test.rb
    │   │       ├── push_subscriptions_controller_test.rb
    │   │       └── sidebars_controller_test.rb
    │   ├── fixtures/
    │   │   ├── accounts.yml
    │   │   ├── boosts.yml
    │   │   ├── memberships.yml
    │   │   ├── messages.yml
    │   │   ├── rooms.yml
    │   │   ├── searches.yml
    │   │   ├── sessions.yml
    │   │   ├── users.yml
    │   │   ├── webhooks.yml
    │   │   ├── action_text/
    │   │   │   └── rich_texts.yml
    │   │   ├── files/
    │   │   │   └── .keep
    │   │   └── push/
    │   │       └── subscriptions.yml
    │   ├── helpers/
    │   │   ├── content_filters_test.rb
    │   │   └── .keep
    │   ├── models/
    │   │   ├── account_test.rb
    │   │   ├── action_text_attachment_test.rb
    │   │   ├── first_run_test.rb
    │   │   ├── membership_test.rb
    │   │   ├── message_test.rb
    │   │   ├── room_test.rb
    │   │   ├── user_test.rb
    │   │   ├── webhook_test.rb
    │   │   ├── .keep
    │   │   ├── account/
    │   │   │   └── joinable_test.rb
    │   │   ├── message/
    │   │   │   ├── attachment_test.rb
    │   │   │   └── searchable_test.rb
    │   │   ├── opengraph/
    │   │   │   ├── document_test.rb
    │   │   │   ├── fetch_test.rb
    │   │   │   ├── location_test.rb
    │   │   │   └── metadata_test.rb
    │   │   ├── room/
    │   │   │   └── push_test.rb
    │   │   ├── rooms/
    │   │   │   ├── direct_test.rb
    │   │   │   └── open_test.rb
    │   │   └── user/
    │   │       ├── bot_test.rb
    │   │       └── role_test.rb
    │   ├── performance/
    │   │   ├── chatter.js
    │   │   └── create_dummy_cookies.rb
    │   ├── system/
    │   │   ├── boosting_messages_test.rb
    │   │   ├── sending_messages_test.rb
    │   │   ├── unread_rooms_test.rb
    │   │   └── .keep
    │   └── test_helpers/
    │       ├── mention_test_helper.rb
    │       ├── session_test_helper.rb
    │       ├── system_test_helper.rb
    │       └── turbo_test_helper.rb
    ├── tmp/
    │   ├── .keep
    │   ├── pids/
    │   │   └── .keep
    │   └── storage/
    │       └── .keep
    └── .github/
        ├── ISSUE_TEMPLATE/
        │   ├── config.yml
        │   └── preapproved.md
        └── workflows/
            ├── ci.yml
            └── publish-image.yml

================================================
FILE: README.md
================================================
# Campfire

Campfire is a web-based chat application. It supports many of the features you'd
expect, including:

- Multiple rooms, with access controls
- Direct messages
- File attachments with previews
- Search
- Notifications (via Web Push)
- @mentions
- API, with support for bot integrations

## Deploying with Docker

Campfire's Docker image contains everything needed for a fully-functional,
single-machine deployment. This includes the web app, background jobs, caching,
file serving, and SSL.

To persist storage of the database and file attachments, map a volume to `/rails/storage`.

To configure additional features, you can set the following environment variables:

- `SSL_DOMAIN` - enable automatic SSL via Let's Encrypt for the given domain name
- `DISABLE_SSL` - alternatively, set `DISABLE_SSL` to serve over plain HTTP
- `VAPID_PUBLIC_KEY`/`VAPID_PRIVATE_KEY` - set these to a valid keypair to
  allow sending Web Push notifications. You can generate a new keypair by running
  `/script/admin/create-vapid-key`
- `SENTRY_DSN` - to enable error reporting to sentry in production, supply your
  DSN here

For example:

    docker build -t campfire .

    docker run \
      --publish 80:80 --publish 443:443 \
      --restart unless-stopped \
      --volume campfire:/rails/storage \
      --env SECRET_KEY_BASE=$YOUR_SECRET_KEY_BASE \
      --env VAPID_PUBLIC_KEY=$YOUR_PUBLIC_KEY \
      --env VAPID_PRIVATE_KEY=$YOUR_PRIVATE_KEY \
      --env TLS_DOMAIN=chat.example.com \
      campfire

## Running in development

    bin/setup
    bin/rails server

## Worth Noting

When you start Campfire for the first time, you’ll be guided through
creating an admin account.
The email address of this admin account will be shown on the login page
so that people who forget their password know who to contact for help.
(You can change this email later in the settings)

Campfire is single-tenant: any rooms designated "public" will be accessible by
all users in the system. To support entirely distinct groups of customers, you
would deploy multiple instances of the application.



================================================
FILE: config.ru
================================================
# This file is used by Rack-based servers to start the application.

require_relative "config/environment"

use Rack::Deflater
run Rails.application

Rails.application.load_server



================================================
FILE: CONTRIBUTING.md
================================================
# How to contribute to Campfire

Campfire uses GitHub
[discussions](https://github.com/basecamp/once-campfire/discussions) to track
feature requests and questions, rather than [the issue
tracker](https://github.com/basecamp/once-campfire/issues). If you're considering
opening an issue or pull request, please open a discussion instead.

Whenever a discussion leads to an actionable and well-understood task, we'll
move it to the issue tracker where it can be worked on.

This is a little different than how some other projects work, but it makes it
easier for us to triage and prioritise the work. It also means that the open
issues all represent agreed-upon tasks that are either being worked on, or are
ready to be worked on.

This should also make it easier to see what's in progress, and to find
something to work on if you'd like to do so.

## What this means in practice

### If you'd like to contribute to the code...

1. If you're interested in working on one of the open issues, please do! We are
   grateful for the help!
2. You'll want to make sure someone else isn't already working on the same
   issue. If they are, it will be tagged "in progress" and/or it should be clear
   from the comments. When in doubt, you can always comment on the issue to ask.
3. Similarly, if you need any help or guidance on the issue, please comment on
   the issue as you go, and we'll do our best to help.
4. When you have something ready for review or collaboration, open a PR.

### If you've found a bug...

1. If you don't have steps to reproduce the problem, or you're not certain it's a
   bug, open a discussion.
2. If you have steps to reproduce, open an issue.

### If you have an idea for a feature...

1. Open a discussion.

### If you have a question, or are having trouble with configuration...

1. Open a discussion.

Hopefully this process makes it easier for everyone to be involved. Thanks for
helping! ❤️




================================================
FILE: Dockerfile
================================================
# syntax = docker/dockerfile:1

# Make sure it matches the Ruby version in .ruby-version and Gemfile
ARG RUBY_VERSION=3.4.5
FROM docker.io/library/ruby:$RUBY_VERSION-slim AS base

# Rails app lives here
WORKDIR /rails

# Install base packages
RUN apt-get update -qq && \
    apt-get install --no-install-recommends -y curl libsqlite3-0 libvips libjemalloc2 ffmpeg redis && \
    ln -s /usr/lib/$(uname -m)-linux-gnu/libjemalloc.so.2 /usr/local/lib/libjemalloc.so && \
    rm -rf /var/lib/apt/lists /var/cache/apt/archive

# Set production environment
ENV RAILS_ENV="production" \
    BUNDLE_DEPLOYMENT="1" \
    BUNDLE_PATH="/usr/local/bundle" \
    BUNDLE_WITHOUT="development" \
    LD_PRELOAD="/usr/local/lib/libjemalloc.so"


# Throw-away build stage to reduce size of final image
FROM base AS build

# Install packages need to build gems
RUN apt-get update -qq && \
    apt-get install -y build-essential git pkg-config libyaml-dev  && \
    rm -rf /var/lib/apt/lists /var/cache/apt/archives

# Install application gems
COPY Gemfile Gemfile.lock vendor ./

RUN bundle install && \
    rm -rf ~/.bundle/ "${BUNDLE_PATH}"/ruby/*/cache "${BUNDLE_PATH}"/ruby/*/bundler/gems/*/.git

# Copy application code
COPY . .

# Precompiling assets for production without requiring secret RAILS_MASTER_KEY
RUN SECRET_KEY_BASE_DUMMY=1 ./bin/rails assets:precompile


# Final stage for app image
FROM base

# Image metadata
ARG OCI_DESCRIPTION
LABEL org.opencontainers.image.description="${OCI_DESCRIPTION}"
ARG OCI_SOURCE
LABEL org.opencontainers.image.source="${OCI_SOURCE}"
LABEL org.opencontainers.image.licenses="MIT"

# Run and own only the runtime files as a non-root user for security
RUN groupadd --system --gid 1000 rails && \
    useradd rails --uid 1000 --gid 1000 --create-home --shell /bin/bash
USER 1000:1000

# Configure environment defaults
ENV HTTP_IDLE_TIMEOUT=60
ENV HTTP_READ_TIMEOUT=300
ENV HTTP_WRITE_TIMEOUT=300

# Copy built artifacts: gems, application
COPY --from=build --chown=rails:rails /usr/local/bundle /usr/local/bundle
COPY --from=build --chown=rails:rails /rails /rails

# Set version and revision
ARG APP_VERSION
ENV APP_VERSION=$APP_VERSION
ARG GIT_REVISION
ENV GIT_REVISION=$GIT_REVISION

# Expose ports for HTTP and HTTPS
EXPOSE 80 443

# Start the server by default, this can be overwritten at runtime
CMD ["bin/boot"]



================================================
FILE: Gemfile
================================================
source "https://rubygems.org"

git_source(:github) { |repo| "https://github.com/#{repo}.git" }
git_source(:bc)     { |repo| "https://github.com/basecamp/#{repo}" }

# Rails
gem "rails", github: "rails/rails", branch: "main"

# Drivers
gem "sqlite3", "~> 2.7"
gem "redis", "~> 5.4"

# Deployment
gem "puma", "~> 6.6"

# Jobs
gem "resque", "~> 2.7.0"
gem "resque-pool", "~> 0.7.1"

# Assets
gem "propshaft", github: "rails/propshaft"
gem "importmap-rails", github: "rails/importmap-rails"

# Hotwire
gem "turbo-rails", github: "hotwired/turbo-rails"
gem "stimulus-rails"

# Media handling
gem "image_processing", ">= 1.2"

# Telemetry
gem "sentry-ruby"
gem "sentry-rails"

# Other
gem "bcrypt"
gem "web-push"
gem "rqrcode"
gem "rails_autolink"
gem "geared_pagination"
gem "jbuilder"
gem "net-http-persistent"
gem "kredis"
gem "platform_agent"
gem "thruster"

group :development, :test do
  gem "debug"
  gem "rubocop-rails-omakase", require: false
  gem "faker", require: false
  gem "brakeman", require: false
end

group :test do
  gem "capybara"
  gem "mocha"
  gem "selenium-webdriver"
  gem "webmock", require: false
end



================================================
FILE: MIT-LICENSE
================================================
Copyright (c) 37signals, LLC

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.



================================================
FILE: Procfile
================================================
web: bundle exec thrust bin/start-app
redis: redis-server config/redis.conf
workers: FORK_PER_JOB=false INTERVAL=0.1 bundle exec resque-pool



================================================
FILE: Rakefile
================================================
# Add your own tasks in files placed in lib/tasks ending in .rake,
# for example lib/tasks/capistrano.rake, and they will automatically be available to Rake.

require_relative "config/application"

Rails.application.load_tasks



================================================
FILE: .dockerignore
================================================
# See https://docs.docker.com/engine/reference/builder/#dockerignore-file for more about ignoring files.

# Ignore git directory.
/.git/
/.git*

# Ignore bundler config.
/.bundle

# Ignore all environment files.
/.env*
!/.env.example

# Ignore all logfiles and tempfiles.
/log/*
/tmp/*
!/log/.keep
!/tmp/.keep

# Ignore pidfiles, but keep the directory.
/tmp/pids/*
!/tmp/pids/
!/tmp/pids/.keep

# Ignore storage (uploaded files in development and any SQLite databases).
/storage/*
!/storage/
!/storage/.keep

# Ignore development credentials
/config/credentials.yml.enc

# Ignore deployment files
/config/deploy*.yml
/bin/deploy
/bin/deploy-*
/bin/release

# Ignore master.key (should be set in environment)
/config/master.key

# Ignore editor noise
/.vscode

# Ignore ignore
.dockerignore

# Ignore test files
/test/



================================================
FILE: .env.erb
================================================
<% if (session_token = `op signin --account basecamp --raw`.strip) != "" %># Generated by mrsk envify
MRSK_REGISTRY_PASSWORD=<%= `op read "op://Deploy/Docker Hub MRSK/password" -n --session  #{session_token}` %>
RAILS_MASTER_KEY=<%= `op read "op://Development/Chat-in-a-box/RAILS_MASTER_KEY" -n --session  #{session_token}` %>
<% else raise ArgumentError, "Session token missing" end %>



================================================
FILE: .pumaenv
================================================
CONFIG=./config/puma_dev.rb

# Mitigate Ruby crash on macOS (see https://github.com/rails/rails/issues/38560)
export OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES




================================================
FILE: .rubocop.yml
================================================
# Omakase Ruby styling for Rails
inherit_gem: { rubocop-rails-omakase: rubocop.yml }



================================================
FILE: app/assets/images/.keep
================================================
[Empty file]


================================================
FILE: app/assets/images/sounds/56k.webp
================================================
[Binary file]


================================================
FILE: app/assets/images/sounds/clowntown.webp
================================================
[Binary file]


================================================
FILE: app/assets/images/sounds/dangerzone.webp
================================================
[Binary file]


================================================
FILE: app/assets/images/sounds/drama.webp
================================================
[Binary file]


================================================
FILE: app/assets/images/sounds/greatjob.webp
================================================
[Binary file]


================================================
FILE: app/assets/images/sounds/loggins.webp
================================================
[Binary file]


================================================
FILE: app/assets/images/sounds/nyan.webp
================================================
[Binary file]


================================================
FILE: app/assets/images/sounds/pushit.webp
================================================
[Binary file]


================================================
FILE: app/assets/images/sounds/rumble.webp
================================================
[Binary file]


================================================
FILE: app/assets/images/sounds/top.webp
================================================
[Binary file]


================================================
FILE: app/assets/images/sounds/yay.webp
================================================
[Binary file]


================================================
FILE: app/assets/images/sounds/yeah.webp
================================================
[Binary file]


================================================
FILE: app/assets/stylesheets/_reset.css
================================================
/*
 * Modern CSS Reset
 * @link https://github.com/hankchizljaw/modern-css-reset
*/

/* Box sizing rules */
*,
*::before,
*::after {
  box-sizing: border-box;
}

/* Remove default margin */
body,
h1,
h2,
h3,
h4,
h5,
h6 {
  margin: 0;
}

p,
li,
h1,
h2,
h3,
h4 {
  /* Help prevent overflow of long words/names/URLs */
  word-break: break-word;

  /* Optional, not supported for all languages */
  /* hyphens: auto; */
}

html,
body {
  overflow-x: hidden;
}

html {
  scroll-behavior: smooth;
}

/* Set core body defaults */
body {
  min-height: 100dvh;
  font-family: sans-serif;
  font-size: 100%;
  line-height: 1.5;
  text-rendering: optimizeSpeed;
}

/* Make images easier to work with */
img {
  display: block;
  max-inline-size: 100%;
}

/* Inherit fonts for inputs and buttons */
input,
button,
textarea,
select {
  font: inherit;
}

/* Remove all animations and transitions for people that prefer not to see them */
@media (prefers-reduced-motion: reduce) {

  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }

  html {
    scroll-behavior: initial;
  }
}



================================================
FILE: app/assets/stylesheets/actiontext.css
================================================
trix-toolbar {
  display: none;
  inset: auto 0 0 0;
  min-width: 0;
  position: sticky;
  z-index: 3;

  .trix-dialog {
    bottom: 3rem !important;
    top: auto !important;
  }

  .trix-button--icon {
    height: auto !important;
  }

  .trix-dialog {
    background-color: var(--color-bg) !important;
    border-radius: 1rem !important;
    border: 2px solid var(--color-text) !important;
    box-shadow: none !important;
    color: var(--color-text) !important;
    gap: var(--inline-space);
    padding: 0 !important;
    overflow: clip;

    .trix-input {
      background: transparent !important;
      border: 0 !important;
      color: var(--color-text) !important;
      font-size: max(16px, 1em) !important;
      padding: var(--input-padding, 0.5em 0.8em) !important;
    }

    .trix-button {
      color: var(--color-text) !important;
    }
  }

  .trix-dialog--link {
    .trix-dialog__link-fields {
      align-items: center;
      padding-right: 0.3em;
    }

    [value="Link"],
    [value="Unlink"] {
      width: 2.6em;
      aspect-ratio: 1 / 1;
      background-position: center center;
      background-repeat: no-repeat;
      text-indent: -9999%;
      padding: 0;
    }

    [value="Link"] { background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' fill='none'%3E%3Cpath fill='%23000' fill-rule='evenodd' d='M18.948 5.258a4.337 4.337 0 0 0-6.108 0L11.217 6.87a.993.993 0 0 0 0 1.41c.392.39 1.027.39 1.418 0l1.623-1.613a2.323 2.323 0 0 1 3.271 0 2.29 2.29 0 0 1 0 3.251l-2.393 2.38a3.021 3.021 0 0 1-4.255 0l-.05-.049a1.007 1.007 0 0 0-1.418 0 .993.993 0 0 0 0 1.41l.05.049a5.036 5.036 0 0 0 7.091 0l2.394-2.38a4.275 4.275 0 0 0 0-6.072Zm-13.683 13.6a4.337 4.337 0 0 0 6.108 0l1.262-1.255a.993.993 0 0 0 0-1.41 1.007 1.007 0 0 0-1.418 0L9.954 17.45a2.323 2.323 0 0 1-3.27 0 2.29 2.29 0 0 1 0-3.251l2.344-2.331a2.579 2.579 0 0 1 3.631 0c.392.39 1.027.39 1.419 0a.993.993 0 0 0 0-1.41 4.593 4.593 0 0 0-6.468 0l-2.345 2.33a4.275 4.275 0 0 0 0 6.072Z' clip-rule='evenodd'/%3E%3C/svg%3E"); }

    [value="Unlink"] {
      background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' fill='none'%3E%3Cpath fill='%23000' fill-rule='evenodd' d='M18.954 5.264a3.58 3.58 0 0 0-5.04 0l-2.157 2.144a.993.993 0 0 0 0 1.41c.392.39 1.027.39 1.418 0l2.157-2.144a1.565 1.565 0 0 1 2.204 0c.607.603.609 1.58.005 2.186l-2.348 2.355a.993.993 0 0 0 .006 1.41 1.007 1.007 0 0 0 1.419-.007l2.347-2.354a3.528 3.528 0 0 0-.01-5ZM5.257 18.852a3.59 3.59 0 0 0 5.041.015l2.6-2.554a.993.993 0 0 0 .01-1.41 1.007 1.007 0 0 0-1.419-.009l-2.6 2.554c-.615.603-1.603.6-2.214-.006a1.554 1.554 0 0 1-.012-2.195l2.539-2.58a.993.993 0 0 0-.016-1.41 1.007 1.007 0 0 0-1.418.015l-2.539 2.58a3.54 3.54 0 0 0 .028 5Z' clip-rule='evenodd'/%3E%3Cpath stroke='%23000' stroke-linecap='round' stroke-width='2' d='M10.233 5.78V3.769M5.968 9.802H4.21M7.343 7.107 5.968 5.781M14.348 17.523v2.013M18.613 13.502h1.758M17.238 16.196l1.375 1.327'/%3E%3C/svg%3E%0A");
      border-top-right-radius: 1em !important;
      border-bottom-right-radius: 1em !important;
    }
  }
}

trix-editor {
  &.input {
    min-height: 24px;
  }

  .attachment--content {
    margin: 0;
    display: inline-flex;

    .attachment__toolbar {
      top: 0;
      z-index: 2;
    }
  }
}

.trix-button-group--file-tools,
.trix-button-group--history-tools {
  display: none !important;
}

.trix-button-group,
.trix-button {
  border: 0 !important;
  margin: 0 !important;
  border-radius: 0.3em !important;
  box-shadow: none;

  &::before {
    opacity: 1 !important;
  }

  @media (prefers-color-scheme: dark) {
    &::before {
      filter: invert(100);
    }
  }

  &.trix-active {
    background-color: var(--color-text) !important;

    &::before {
      filter: invert(100);
    }

    @media (prefers-color-scheme: dark) {
      &::before {
        filter: invert(0);
      }
    }
  }

  &.trix-button--remove {
    background-color: var(--color-negative);
    border-radius: 1.8em !important;

    &::before {
      filter: invert(100);
      background-size: 70%;
      background-image: url("minus.svg");
    }
  }
}

[data-trix-content-type~='application/vnd.campfire.mention'] {
  .trix-button-group {
    display: inline;
  }
}

[data-trix-content-type~="application/vnd.actiontext.opengraph-embed"] {
  * {
    text-decoration: none;
  }

  trix-editor & {
    display: block;
    inline-size: fit-content;
    max-inline-size: 100%;
  }
}

.trix-button:not(.trix-button--remove) {
  @media (any-hover: hover) {
    &:where(:not(:active):hover) {
      filter: brightness(0.9);
      background-color: var(--color-bg);
    }
  }

  &:disabled {
    opacity: 0.33;
  }
}

trix-editor,
.trix-content {
  pre {
    background-color: var(--color-bg) !important;
    border-radius: 0.5em;
    border: 1px solid var(--color-border);
    font-family: ui-monospace, SFMono-Regular, "SF Mono", Menlo, Consolas, "Liberation Mono", monaco, monospace;
    font-size: 0.8rem !important;
    margin: 0 !important;
    padding: 1em !important;
    white-space: pre-wrap !important;
    word-wrap: break-word;
  }

  --blockquote-border: var(--inline-space-half);
  --blockquote-padding: 1.5ch;
  --blockquote-margin: var(--inline-space);

  blockquote {
    border: 0 solid var(--color-border-darker) !important;
    border-inline-start-width: var(--blockquote-border) !important;
    margin: 0 var(--blockquote-margin) !important;
    padding-inline-start: var(--blockquote-padding) !important;
  }

  cite {
    margin-inline-start: calc(var(--blockquote-padding));
    font-style: normal;
    font-size: 0.8rem;
    font-weight: 600;

    &::before {
      content: "— ";
      color: var(--color-border-darker);
    }
  }

  a {
    color: var(--color-link);
  }

  ul,
  ol {
    margin: 0 !important;
    padding: 0 !important;
  }

  li {
    margin: 0 0 0 var(--inline-space-double) !important;
    padding: 0 !important;
  }

  h1 {
    font-size: 1.4rem !important;
    margin: 0;
  }
}



================================================
FILE: app/assets/stylesheets/animation.css
================================================
@keyframes appear-then-fade {
  0%,100% { opacity: 0; }
  5%,60%  { opacity: 1; }
}

@keyframes boost {
  0%   { transform: scale(0.3);  opacity: 0; }
  50%  { transform: scale(1.15); opacity: 1; }
  100% { transform: scale(1); }
}

@keyframes pulsing-outline {
  0%  { outline-width: 0; }
  33% { outline-width: 4px; }
}

@keyframes scale-fade-out {
  0%   { transform: scale(1); opacity: 1; }
  100% { transform: scale(0); opacity: 0; }
}

@keyframes shake {
  0%  { transform: translateX(-2rem); }
  25% { transform: translateX(2rem); }
  50% { transform: translateX(-1rem); }
  75% { transform: translateX(1rem); }
}

@keyframes submitting {
  0%    { -webkit-mask-position: 0% 0%,   50% 0%,   100% 0% }
  12.5% { -webkit-mask-position: 0% 50%,  50% 0%,   100% 0% }
  25%   { -webkit-mask-position: 0% 100%, 50% 50%,  100% 0% }
  37.5% { -webkit-mask-position: 0% 100%, 50% 100%, 100% 50% }
  50%   { -webkit-mask-position: 0% 100%, 50% 100%, 100% 100% }
  62.5% { -webkit-mask-position: 0% 50%,  50% 100%, 100% 100% }
  75%   { -webkit-mask-position: 0% 0%,   50% 50%,  100% 100% }
  87.5% { -webkit-mask-position: 0% 0%,   50% 0%,   100% 50% }
  100%  { -webkit-mask-position: 0% 0%,   50% 0%,   100% 0% }
}

@keyframes success {
  0%  { background-color: var(--color-border-darker); scale: 0.8; }
  20% { background-color: var(--color-border-darker); scale: 1; }
}

@keyframes wiggle {
  0%   { transform: rotate(0deg); }
  20%  { transform: rotate(3deg); }
  40%  { transform: rotate(-3deg); }
  60%  { transform: rotate(3deg); }
  80%  { transform: rotate(-3deg); }
  100% { transform: rotate(0deg); }
}

@keyframes zoom-fade {
  100% { transform: translateY(-2em); opacity: 0; }
}

@keyframes border-fade-out {
  from {
    border-color: var(--color-text);
  }

  to {
    border-color: transparent;
  }
}

.shake {
  animation: shake 400ms both;
}



================================================
FILE: app/assets/stylesheets/autocomplete.css
================================================
.autocomplete__list {
  background-color: var(--color-bg);
  border-radius: 0.8em;
  border: 1px solid var(--color-border);
  max-block-size: 10em;
  max-inline-size: 30ch;
  min-inline-size: 15ch;
  overflow-y: auto;
  position: absolute;
  z-index: 3;
}

.autocomplete__item {
  --avatar-size: 2.5ch;
}

.btn:is(.autocomplete__btn) {
  --btn-border-radius: 0;
  --outline-size: 0 !important;

  font-weight: normal !important;
  gap: var(--inline-space-half);

  &:hover,
  &:focus-visible {
    background-color: var(--color-text);
    box-shadow: none !important;
    color: var(--color-text-reversed);
  }

  .avatar:not(img) {
    margin-inline-start: -0.5em;
  }
}

[data-trix-content-type~='application/vnd.campfire.mention'] {
  display: inline-flex;
  margin: 0;
  padding: 0;
  position: relative;

  .attachment__toolbar {
    inset-block-start: 0;
    inset-inline-start: 0;
    z-index: 2;
  }
}

.mention {
  --avatar-size: 1.1em;
  --avatar-border-radius: var(--avatar-size);

  align-items: center;
  color: inherit;
  display: inline-flex;
  font-weight: 600;
  line-height: var(--avatar-size);
  margin: 0;
  padding-inline-start: calc(var(--avatar-size) + var(--inline-space) / 3) !important;
  position: relative;
  z-index: 2;

  .avatar {
    aspect-ratio: 1;
    block-size: auto;
    border-radius: var(--avatar-border-radius);
    inline-size: var(--avatar-size);
    inset-block: 0;
    inset-inline: 0.1ch 0.3ch;
    letter-spacing: -0.1em;
    margin: 0;
    overflow: clip;
    position: absolute;
  }

  figcaption {
    display: none;
  }
}

blockquote .attachment--preview {
  --avatar-size: 2.5ch;
  --avatar-border-radius: 2em;

  color: inherit;
  display: inline-flex;
  margin: 0;
  padding-inline-start: 2.75ch !important;
  position: relative;
  z-index: 2;

  img {
    aspect-ratio: 1;
    block-size: auto;
    border-radius: var(--avatar-border-radius);
    inline-size: var(--avatar-size);
    inset-block-start: -1em;
    inset-inline-start: 0;
    margin: 0;
    overflow: clip;
    position: absolute;
  }

  figcaption {
    display: none;
  }
}

suggestion-select {
  .autocompletable__unselect {
    display: none;
  }
}

suggestion-option {
  color: var(--color-text-reversed);

  &[selected]:not(.flashing-off) {
    background: var(--color-text);

    .autocomplete__btn {
      background: var(--color-text);
      color: var(--color-text-reversed);
    }
  }
}

.autocomplete__container {
  --input-padding: 0.3em 0;

  @media (min-width: 100ch) {
    max-inline-size: calc(var(--sidebar-width) - (var(--btn-size) * 2) - (var(--column-gap) * 2) - (var(--sidebar-inline-space) * 2));
  }
}

.autocomplete__input {
  --input-padding: 0.3em !important;

  flex: 1;
  gap: var(--input-padding);
}

.autocomplete__pill {
  --avatar-size: var(--inline-space-double);

  align-items: center;
  background-color: var(--color-message-bg);
  border-radius: var(--btn-border-radius, 2em);
  color: currentColor;
  display: inline-flex;
  font-family: inherit;
  gap: var(--input-padding);
  justify-content: center;
  line-height: inherit;
  padding: var(--input-padding) calc(var(--input-padding) * 2);
  text-align: start;
}



================================================
FILE: app/assets/stylesheets/avatars.css
================================================
.avatar {
  --avatar-border-radius: 50%;

  aspect-ratio: 1;
  border-radius: var(--avatar-border-radius);
  display: grid;
  inline-size: var(--avatar-size, 5ch);
  margin: 0;
  place-items: center;

  img {
    aspect-ratio: 1;
    block-size: auto;
    border-radius: var(--avatar-border-radius);
    grid-area: 1/1;
    inline-size: var(--avatar-size, 5ch);
    max-inline-size: 100%;
    object-fit: cover;
  }
}

.avatar--icon {
  border: 1px solid var(--color-border-darker);
  background-color: var(--color-text-reversed);

  img {
    background-color: transparent;
    border-radius: 0;
    inline-size: auto;
    margin: var(--inline-space);
  }

  @media (any-hover: hover) {
    &:where(:not(:active):hover) {
      box-shadow: 0 0 0 var(--hover-size) var(--hover-color);
    }
  }
}

.avatar__group {
  --avatar-size: 2.5ch;

  block-size: 5ch;
  display: grid;
  gap: 1px;
  grid-template-columns: 1fr 1fr;
  grid-template-rows: min-content;
  inline-size: 5ch;
  place-content: center;

  .avatar {
    margin: auto;
  }

  &:where(:has(> :last-child:nth-child(2))) {
    --avatar-size: 3.5ch;

    > :first-child {
      margin-block-end: 1.5ch;
      margin-inline-end: -0.75ch;
    }

    > :last-child {
      margin-block-start: 1.5ch;
      margin-inline-start: -0.75ch;
    }
  }

  &:where(:has(> :last-child:nth-child(3))) {
    > :last-child {
      margin-inline: 1.25ch -1.25ch;
    }
  }
}

.avatar__form {
  display: grid;
  grid-template-columns: 1fr auto 1fr;
}

/* Account logo */
.account-logo {
  --avatar-border-radius: 0.5em;

  #nav & {
    block-size: var(--btn-size);
    inline-size: auto;
  }
}



================================================
FILE: app/assets/stylesheets/base.css
================================================
:root {
  --font-family: -apple-system, BlinkMacSystemFont, Aptos, Roboto, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  --hover-color: var(--color-border-darker);
  --hover-size: 0.15em;
  --hover-filter: brightness(1);
}

html, body {
  -webkit-text-size-adjust: none;
  background-color: var(--color-bg);
  color: var(--color-text);
  font-family: var(--font-family);
  line-height: 1.4;
  overflow: initial;
  text-size-adjust: none;
}

/* Links */
:where(a:not([class]):not(:has(img))) {
  color: var(--link-color, var(--color-link));

  @media (any-hover: hover) {
    &:where(:not(:active):hover) {
      --hover-filter: brightness(1.3);

      filter: var(--hover-filter);
    }
  }
}

:where(button, input, textarea, summary, .input, .btn) {
  --outline-size: min(0.2em, 2px);

  appearance: none;
  border: none;
  background-color: transparent;
  font: inherit;
  line-height: inherit;
  text-decoration: none;
  touch-action: manipulation;
  transition: box-shadow 150ms ease, outline-offset 150ms ease, background-color 150ms ease, opacity 150ms ease, filter 150ms ease;

  /* Hover */
  @media (any-hover: hover) {
    &:where(:not(:active):hover) {
      filter: var(--hover-filter);
      box-shadow: 0 0 0 var(--hover-size) var(--hover-color);
    }
  }

  /* Keyboard navigation */
  &:where(:not(:active)):focus-visible {
    outline-width: var(--outline-size);
    outline-color: var(--outline-color, var(--color-link));
    outline-offset: var(--outline-offset, calc(var(--outline-size) * 2));
  }

  /* Pressing */
  &:focus:not(:focus-visible) {
    --outline-offset: 0;
  }

  /* Disabled */
  &:where([disabled]):not(:hover):not(:active) {
    cursor: not-allowed;
    filter: brightness(0.75);
  }
}

/* Turbo */
turbo-frame,
turbo-cable-stream-source {
  display: contents;
}

/* For settings */
fieldset {
  border: 2px solid var(--fieldset-border-color, var(--color-border));
  border-block-end: 0;
  border-inline: 0;
  display: flex;
  flex-direction: column;
  max-inline-size: 50ch;
  padding: var(--block-space) 0;

  &.border {
    border-color: var(--color-border-darker);
    border-style: solid;
    border-width: 1px;
  }
}

legend {
  align-items: center;
  display: flex;
  justify-content: center;
  margin-inline: auto;
  text-align: center;
}

.membership-item:has(.btn.invisible) {
  opacity: 0.5;
}

/* Dialogs */
.dialog {
  --width: 50ch;

  background-color: var(--color-bg);
  margin-inline: var(--inline-space);
  inline-size: var(--width);
  max-inline-size: calc(100dvw - var(--inline-space) * 2);
  position: relative;

  &::backdrop {
    background-image: linear-gradient(
      45deg,
      #fff500,
      #ff9f00,
      #f00,
      #ec0061
    );
    opacity: 0.75;
  }
}

.dialog__close {
  position: absolute;
  inset: calc(var(--block-space) * 1.5) var(--inline-space) auto auto;
}

/* Misc */
menu {
  outline: 0;
}

code {
  background: var(--color-bg);
  border: 1px solid var(--color-border-dark);
  padding: 0.2em 0.4em;
  border-radius: 0.3em;
  font-weight: 500;
}

pre {
  background-color: var(--color-bg);
  font-family: ui-monospace, SFMono-Regular, "SF Mono", Menlo, Consolas, "Liberation Mono", monaco, monospace;
  font-size: 0.8rem;
  white-space: pre-wrap;
  word-wrap: break-word;
}

.version-badge {
  border: 1px solid var(--color-border-darker);
  border-radius: 0.3em;
  color: var(--color-border-darker);
  padding: 0.1em var(--inline-space-half);
}

/* PWA install */
.pwa__instructions {
  @media (display-mode: standalone) {
    display: none;
  }
}

.pwa__installer {
  display: none;

  .pwa--can-install & {
    display: block;
  }
}

/* Notification settings */
.notifications-help {
  padding: var(--block-space) var(--inline-space);
  background-color: var(--color-border);
  border-radius: 0.5em;
  border: 1px solid var(--color-border-dark);
  margin-block-end: var(--block-space-half);

  summary {
    --column-gap: var(--inline-space-half);
    --btn-background: transparent;
    --btn-border-radius: 0.5em;
    --btn-border-color: transparent;

    display: flex;
    justify-content: start;
    padding: var(--block-space) var(--inline-space);
    margin: calc(var(--block-space) * -1) calc(var(--inline-space) * -1);
  }

  .disclosure {
    margin-inline-start: auto;
    transition: transform 150ms ease;

    .notifications-help[open] & {
      transform: rotate(90deg);
    }
  }

  img {
    display: inline;
    vertical-align: text-top;

    @media (prefers-color-scheme: dark) {
      filter: invert(100);
    }
  }

  li {
    margin-block: var(--block-space-half);
  }

  em {
    background: var(--color-bg);
    border: 1px solid var(--color-border-darker);
    padding: 0.2em 0.4em;
    border-radius: 0.3em;
    font-weight: 500;
    font-style: normal;
    font-size: 0.9em;
  }
}

/* Language translations */
.language-list-menu {
  --max-width: 40ch;

  background-color: var(--color-border);
  border: 1px solid var(--color-border-dark);
  border-radius: 0.5em;
  inset: auto;
  inline-size: max-content;
  margin-inline: var(--inline-space);
  max-inline-size: 40ch;
  overflow: clip;
  position: absolute;
  z-index: 3;

  @media (max-width: 100ch) {
    max-inline-size: calc(var(--max-width) - var(--inline-space));
  }
}

.language-list {
  display: grid;
  gap: var(--block-space-half) var(--inline-space);
  grid-template-rows: min-content;
  grid-template-columns: min-content 1fr;
  justify-content: start;
  margin: 0;
  padding: var(--block-space) var(--inline-space-double);
  text-align: start;
}

/* Nicer scrollbars on Chrome 29+. This is intended for Windows machines, but */
/* there's not a way to target Windows using CSS, so Chrome on Mac will have */
/* slightly thinner scrollbars than normal. #C1C1C1 is the default color on Macs. */
@media screen and (-webkit-min-device-pixel-ratio:0) and (min-resolution:.001dpcm) {
  * {
    scrollbar-color: #C1C1C1 transparent;
    scrollbar-width: thin;
  }
}



================================================
FILE: app/assets/stylesheets/boosts.css
================================================
/* Container */
.boosts {
  --boost-border-color: var(--color-border-dark);
}

/* Item */
.boost {
  border: 1px solid var(--boost-border-color);
  border-radius: 4rem;
  margin-block-start: calc(var(--block-space-half) / 2);
  opacity: 1;
  padding: 0.1em 0.2em 0.1em 0.1em;
  transition: opacity 100ms ease-in-out, box-shadow 150ms ease-in-out, transform 150ms ease-in-out;

  .boost__action {
    margin-block-start: 0;
  }

  .btn:not(.avatar) {
    font-size: 0.55rem;
  }

  @media (any-hover: hover) {
    &:where(:not(:active):hover) {
      --boost-border-color: var(--color-border-darker);

      box-shadow: 0 0 0 var(--hover-size) var(--hover-color);
    }
  }

  &:has(.input--boost):focus-within {
    --boost-border-color: var(--color-selected-dark);
    --hover-color: var(--color-selected-dark);

    box-shadow: 0 0 0 var(--hover-size) var(--hover-color);
  }
}

.btn:is(.boost__action) {
  --btn-border-color: var(--boost-border-color);

  font-size: 0.66em;
  margin-block-start: calc(var(--block-space-half) / 2);

  @media (any-hover: hover) {
    &:where(:not(:active):hover) {
      --boost-border-color: var(--color-border-darker)
    }
  }
}

.btn:is(.boost__delete) {
  display: none;

  .expanded & {
    display: flex;
  }
}

.boost__avatar {
  --avatar-size: 2.2ch;

  inline-size: auto;
}

.boost__form {
  transition: none;

  &.expanded {
    animation: boost 0.2s both;
    transform: translate3d(0, 0, 0);
  }

  .boost__form-label:focus {
    outline: none;
  }

  .input--boost {
    --hover-size: 0;
    --input-background: transparent;
    --input-border-size: 0;
    --input-padding: 0;
    --outline-size: 0;

    box-shadow: none;
    display: inherit;
    max-inline-size: 16ch;
    min-inline-size: 2em;
    outline: 0;
  }
}

/* Variants */
.boost--deleting {
  animation: scale-fade-out 0.2s both;
}

/* Reactions */
.quick-boosts {
  display: grid;
  grid-template-columns: repeat(3, 2em);
}

.boost-character {
  font-size: 1.3rem;
}



================================================
FILE: app/assets/stylesheets/buttons.css
================================================
:root {
  --btn-size: 2.65em;
}

.btn {
  align-items: center;
  background-color: var(--btn-background, var(--color-text-reversed));
  border-radius: var(--btn-border-radius, 2em);
  border: var(--btn-border-size, 1px) solid var(--btn-border-color, var(--color-border-darker));
  color: var(--btn-color, var(--color-text));
  cursor: pointer;
  display: inline-flex;
  font-weight: 600;
  gap: 0.5em;
  justify-content: center;
  padding: var(--btn-padding, 0.5em 1.1em);
  pointer-events: auto;
  text-align: center;

  img {
    -webkit-touch-callout: none;
    user-select: none;
  }

  /* Default icon styles */
  &:where(:has(img):not(.avatar)) {
    text-align: start;

    img {
      inline-size: 1.3em;
      max-inline-size: unset;
    }

    img:not([class]) {
      filter: invert(0);

      @media (prefers-color-scheme: dark) {
        filter: invert(100%);
      }
    }
  }

  /* Circle buttons */
  &:where(:has(.for-screen-reader):has(img, figure)) {
    --btn-border-radius: 50%;
    --btn-padding: 0;

    aspect-ratio: 1;
    block-size: var(--btn-size);
    display: grid;
    inline-size: var(--btn-size);
    place-items: center;

    > * {
      grid-area: 1/1;
    }
  }

  &:where(.avatar) {
    --btn-border-radius: var(--avatar-border-radius);
    --btn-padding: 0;
    --btn-border-size: 0;
    --hover-size: 0;

    justify-content: unset;

    img {
      inline-size: 100%;
    }

    @media (any-hover: hover) {
      &:where(:not(:active):hover) {
        filter: brightness(0.7);
      }
    }
  }

  &:where(summary) {
    list-style: none;

    &::marker,
    &::-webkit-details-marker { display: none; }
  }

  img {
    user-select: none;
    -webkit-touch-callout: none;
  }

  [aria-busy] &:disabled {
    position: relative;

    > * {
      visibility: hidden;
    }

    &::after {
      --mask: no-repeat radial-gradient(#000 68%,#0000 71%);
      --size: 1.25em;

      -webkit-mask: var(--mask), var(--mask), var(--mask);
      -webkit-mask-size: 28% 45%;
      animation: submitting 1s infinite linear;
      aspect-ratio: 8/5;
      background: currentColor;
      content: "";
      inline-size: var(--size);
      inset: 50%;
      margin-block: calc((var(--size) / 3) * -1);
      margin-inline: calc((var(--size) / 2) * -1);
      position: absolute;
    }
  }

  &:has(input:checked) {
    --btn-background: var(--color-text);
    --btn-color: var(--color-text-reversed);

    img {
      filter: invert(100%);
    }

    @media (prefers-color-scheme: dark) {
      img {
        filter: invert(0);
      }
    }
  }

  [disabled] &[type=submit],
  &[type=submit]:disabled {
    cursor: not-allowed;
    filter: grayscale(100%) contrast(0.5);
    opacity: 0.5;
    pointer-events: none;
  }
}

/* Variants */
.btn--reversed {
  --btn-background: var(--color-text);
  --btn-color: var(--color-text-reversed);
}

.btn--negative {
  --btn-background: var(--color-negative);
  --btn-color: var(--color-text-reversed);
}

.btn--reversed,
.btn--negative {
  --btn-border-color: transparent;
  --hover-size: 0;
  --hover-filter: brightness(0.7);

  img:not(.avatar) {
    filter: invert(100%);

    @media (prefers-color-scheme: dark) {
      filter: invert(0%);
    }
  }
}

.btn--success {
  animation: success 1s ease-out;

  img {
    animation: zoom-fade 300ms ease-out;
  }
}

.btn--faux {
  --hover-filter: none;

  box-shadow: none;
  cursor: initial;
  outline: 0;
}

.btn--borderless {
  --btn-border-color: transparent;
}

.btn--plain {
  --btn-background: transparent;
  --btn-border-color: transparent;
  --btn-padding: 0;
}

.btn--pulsing {
  animation: pulsing-outline 2s infinite both;
  outline: 0 solid var(--color-alert);
}

button {
  @media (any-hover: hover) {
    cursor: pointer;
  }
}



================================================
FILE: app/assets/stylesheets/code.css
================================================
/*
  Github light/dark theme based on work by @Hirse
  https://github.com/highlightjs/highlight.js/blob/main/src/styles/github.css
*/


:root {
  /* Named color values */
  --keyword: oklch(58.79% 0.193 20.47);
  --entity: oklch(50.15% 0.188 294.99);
  --constant: oklch(49.49% 0.18 257.6);
  --string: oklch(31.08% 0.101 255.87);
  --variable: oklch(64.82% 0.18 45.87);
  --comment: oklch(55.14% 0.019 250.98);
  --entity-tag: oklch(54.64% 0.144 147.32);
  --markup-heading: oklch(49.49% 0.18 257.6);
  --markup-list: oklch(48.46% 0.093 90.48);
  --markup-inserted: oklch(54.64% 0.144 147.32);
  --markup-deleted: oklch(49.59% 0.183 24.19);

  /* Redefine named color values for dark mode */
  @media (prefers-color-scheme: dark) {
    --keyword: oklch(73.45% 0.16260514269909043 25.78369140372489);
    --entity: oklch(80.05% 0.127 305.86);
    --constant: oklch(78.57% 0.115 246.66);
    --string: oklch(78.57% 0.115 246.66);
    --variable: oklch(79.91% 0.141 60.1);
    --comment: oklch(66.25% 0.018 250.92);
    --entity-tag: oklch(84.16% 0.164 145.75);
    --markup-heading: oklch(56.86% 0.202 259.67);
    --markup-list: oklch(85.74% 0.133 89.95);
    --markup-inserted: oklch(90.72% 0.112 146.34);
    --markup-deleted: oklch(92.23% 0.03967766015913856 27.493308249746637);
  }
}

.hljs {
  color: var(--color-txt);
  background: var(--color-bg);
}

.hljs-doctag,
.hljs-keyword,
.hljs-meta .hljs-keyword,
.hljs-template-tag,
.hljs-template-variable,
.hljs-type,
.hljs-variable.language_ {
  color: var(--keyword);
}

.hljs-title,
.hljs-title.class_,
.hljs-title.class_.inherited__,
.hljs-title.function_ {
  color: var(--entity);
}

.hljs-attr,
.hljs-attribute,
.hljs-literal,
.hljs-meta,
.hljs-number,
.hljs-operator,
.hljs-variable,
.hljs-selector-attr,
.hljs-selector-class,
.hljs-selector-id {
  color: var(--constant);
}

.hljs-regexp,
.hljs-string,
.hljs-meta .hljs-string {
  color: var(--string);
}

.hljs-built_in,
.hljs-symbol {
  color: var(--variable);
}

.hljs-comment,
.hljs-code,
.hljs-formula {
  color: var(--comment);
}

.hljs-name,
.hljs-quote,
.hljs-selector-tag,
.hljs-selector-pseudo {
  color: var(--entity-tag);
}

.hljs-subst {
  color: var(--storage-modifier-import);
}

.hljs-section {
  color: var(--markup-heading);
  font-weight: bold;
}

.hljs-bullet {
  color: var(--markup-list);
}

.hljs-emphasis {
  color: var(--markup-italic);
  font-style: italic;
}

.hljs-strong {
  color: var(--markup-bold);
  font-weight: bold;
}

.hljs-addition {
  color: var(--markup-inserted);
  background-color: var(--color-border);
}

.hljs-deletion {
  color: var(--markup-deleted);
  background-color: var(--color-border);
}

.hljs-char.escape_,
.hljs-link,
.hljs-params,
.hljs-property,
.hljs-punctuation,
.hljs-tag {
  /* purposely ignored */
}



================================================
FILE: app/assets/stylesheets/colorize.css
================================================
.colorize--white {
  filter: invert(100%);

  @media (prefers-color-scheme: dark) {
    filter: invert(0%);
  }
}

.colorize--black {
  filter: invert(0%);

  @media (prefers-color-scheme: dark) {
    filter: invert(100%);
  }
}



================================================
FILE: app/assets/stylesheets/colors.css
================================================
:root {
  /* Named color values */
  --lch-black: 0% 0 0;
  --lch-white: 100% 0 0;
  --lch-gray: 96% 0.005 96;
  --lch-gray-dark: 92% 0.005 96;
  --lch-gray-darker: 75% 0.005 96;
  --lch-blue: 54% 0.23 255;
  --lch-blue-light: 95% 0.03 255;
  --lch-blue-dark: 80% 0.08 255;
  --lch-orange: 70% 0.2 44;
  --lch-red: 51% 0.2 31;
  --lch-green: 65.59% 0.234 142.49;
  --lch-always-black: 0% 0 0;

  /* Abstractions */
  --color-negative: oklch(var(--lch-red));
  --color-positive: oklch(var(--lch-green));
  --color-bg: oklch(var(--lch-white));
  --color-message-bg: oklch(var(--lch-gray));
  --color-text: oklch(var(--lch-black));
  --color-text-reversed: oklch(var(--lch-white));
  --color-link: oklch(var(--lch-blue));
  --color-border: oklch(var(--lch-gray));
  --color-border-dark: oklch(var(--lch-gray-dark));
  --color-border-darker: oklch(var(--lch-gray-darker));
  --color-selected: oklch(var(--lch-blue-light));
  --color-selected-dark: oklch(var(--lch-blue-dark));
  --color-alert: oklch(var(--lch-orange));

  /* Redefine named color values for dark mode */
  @media (prefers-color-scheme: dark) {
    --lch-black: 100% 0 0;
    --lch-white: 0% 0 0;
    --lch-gray: 25.2% 0 0;
    --lch-gray-dark: 30.12% 0 0;
    --lch-gray-darker: 44.95% 0 0;
    --lch-blue: 72.25% 0.16 248;
    --lch-blue-light: 28.11% 0.053 248;
    --lch-blue-dark: 42.25% 0.07 248;
    --lch-red: 73.8% 0.184 29.18;
    --lch-green: 75% 0.21 141.89;
  }
}



================================================
FILE: app/assets/stylesheets/composer.css
================================================
/* Composer */
.composer {
  flex: none;
  padding: var(--block-space-half) calc(var(--inline-space) + 1vw);
}

.composer__input-hint,
.composer__context-btn {
  .composer:has(.composer__input:focus-within) & {
    @media (max-width: 100ch) {
      display: none;
    }
  }
}

/* Attachments */
.composer__attachment-btn {
  --hover-filter: brightness(0.85);

  @media (any-hover: hover) {
    &:where(:not(:active):hover) {
      filter: var(--hover-filter);
      box-shadow: none;
    }
  }
}

/* Pending attachments */
.composer__filelist {
  --row-gap: var(--block-space-half);

  &:not(:empty) {
    padding-block-end: var(--block-space-half);
  }
}

.composer__file {
  --aspect-ratio: 5/4;
  --btn-border-radius: 1em;
  --thumbnail-size: 15ch;

  aspect-ratio: var(--aspect-ratio);
  inline-size: var(--thumbnail-size);
}

:is(img, span):is(.composer__file-thumbnail) {
  aspect-ratio: var(--aspect-ratio);
  block-size: auto;
  border-radius: var(--btn-border-radius);
  border: 1px solid var(--color-border-darker);
  inline-size: var(--thumbnail-size);
  object-fit: cover;
}

.composer__file-thumbnail--common {
  background: url(common-file-text.svg) no-repeat center;
  background-size: 55%;
}

.composer__file-caption {
  --icon-size: 1.3em;

  &::after {
    content: "";
    block-size: var(--icon-size);
    inline-size: var(--icon-size);
    background: url("remove-circle.svg") no-repeat center;
    margin-inline: 0.5em -0.5em;
    flex-shrink: 0;
  }

  @media (prefers-color-scheme: dark) {
    &::after {
      filter: invert(100%);
    }
  }
}

/* Rich text */
.composer__rich-text-btn {
  --hover-filter: brightness(0.85);

  display: none;

  @media (any-hover: hover) {
    &:where(:not(:active):hover) {
      filter: var(--hover-filter);
      box-shadow: none;
    }
  }

  img {
    inline-size: 1.7em;
  }
}

@media (min-width: 100ch) and (any-hover: hover) and (pointer: fine) {
  .composer__rich-text-btn {
    display: inline-flex;
  }

  .composer--rich-text {
    trix-toolbar {
      display: block;
    }

    trix-editor.input {
      margin-block-start: var(--block-space-half);
    }
  }

  .composer--edit trix-toolbar {
    border-block-end: 1px solid var(--color-border);
    margin-inline: -0.8em;
    padding-inline: 0.3em;
    padding-block-end: 0.5em;
  }
}

/* Typing indicator */
.typing-indicator {
  inset-block-start: var(--indicator-position, 0.15rem);
  inset-inline-start: var(--block-space);
  opacity: var(--indicator-opacity, 0);
  position: absolute;
  transition: inset-block-start 300ms ease,
              opacity 300ms ease;

  .sidebar & {
    @media (min-width: 100ch) {
      margin-inline-start: 2vw;
    }
  }

  &.typing-indicator--active {
    --indicator-position: 0.15rem;
    --indicator-opacity: 1;
  }
}

.typing-indicator__author {
  line-height: 1;
  padding-inline-start: 1.5em;

  &.spinner {
    display: none;

    .typing-indicator--active & {
      display: block;
    }
  }
}

.composer__input {
  .composer__rich-text-btn,
  label:has(input[type="file"]) {
    cursor: pointer;
  }
}



================================================
FILE: app/assets/stylesheets/embeds.css
================================================
trix-editor,
.trix-content {
  .og-embed {
    background: var(--color-bg);
    border: 1px solid var(--color-border-dark);
    border-radius: 0.5em;
    display: flex;
    flex-direction: column;
    margin-block: var(--block-space) var(--block-space-half);
    overflow: clip;
    padding: var(--block-space) calc(var(--inline-space) * 1.5);

    @media (min-width: 100ch) {
      align-items: start;
      flex-direction: row;
    }

    .cf-twitter-avatar & {
      flex-direction: row;
    }
  }

  .og-embed__content {
    -webkit-line-clamp: 6;
    -webkit-box-orient: vertical;
    display: -webkit-box;
    overflow: hidden;
    text-overflow: clip;
    white-space: normal;
  }

  .og-embed__description {
    color: var(--color-text);
  }

  .og-embed__title {
    font-weight: 600;
    text-decoration: underline;

    a {
      color: var(--color-link);
    }
  }

  .og-embed__image {
    aspect-ratio: 16 / 9;
    display: flex;
    flex-shrink: 0;
    max-inline-size: 100%;
    overflow: clip;

    @media (min-width: 100ch) {
      inline-size: 15dvw;
    }

    > * {
      object-position: top right;
      inline-size: 100%;
      object-fit: contain;

      @media (max-width: 100ch) {
        object-position: top left;
      }
    }

    .cf-twitter-avatar & {
      aspect-ratio: 1;
      border-radius: 50%;
      inline-size: 2lh;
      block-size: 2lh;
    }
  }
}



================================================
FILE: app/assets/stylesheets/filters.css
================================================
.filter--active li {
  display: none;

  &.selected {
    display: flex;
  }
}



================================================
FILE: app/assets/stylesheets/flash.css
================================================
.flash {
  display: flex;
  inset-block-start: var(--block-space);
  inset-inline-start: 50%;
  justify-content: center;
  position: fixed;
  transform: translate(-50%);
  z-index: 6;
}

.flash__inner {
  animation: appear-then-fade 3s 300ms both;
  aspect-ratio: 1;
  background-color: var(--flash-background, var(--color-positive));
  border-radius: 50%;
  display: grid;
  padding: var(--block-space);
  place-items: center;

  img {
    grid-area: 1/1;
  }
}



================================================
FILE: app/assets/stylesheets/inputs.css
================================================
/* Text inputs */
.input {
  accent-color: var(--input-accent-color, var(--color-text));
  background-color: var(--input-background, transparent);
  border-radius: var(--input-border-radius, 0.5em);
  border: var(--input-border-size, 1px) solid var(--input-border-color, var(--color-border-darker));
  color: var(--input-color, var(--color-text));
  font-size: max(16px, 1em);
  inline-size: 100%;
  padding: var(--input-padding, 0.5em 0.8em);
  resize: none;

  &[type="search"] {
    &::-webkit-search-decoration,
    &::-webkit-search-results-button,
    &::-webkit-search-results-decoration {
      display: none;
    }
  }

  &:autofill,
  &:-webkit-autofill,
  &:-webkit-autofill:hover,
  &:-webkit-autofill:focus {
    -webkit-text-fill-color: var(--color-text);
    -webkit-box-shadow: 0 0 0px 1000px var(--color-selected) inset;
  }

  &:where(:not(:active)):focus {
    --input-border-color: var(--color-selected-dark);
    --hover-color: var(--color-selected-dark);
    --outline-size: 0;

    filter: var(--hover-filter);
    box-shadow: 0 0 0 var(--hover-size) var(--hover-color);
  }
}

.input--transparent {
  --input-border-color: currentColor;
  --input-color: currentColor;
  --input-background: transparent;
}

.input--invisible {
  background-color: transparent;
  block-size: 5px;
  border: none;
  inline-size: 5px;
  opacity: 0.1;

  &:focus {
    outline: none;
  }
}

.input--actor {
  transition: box-shadow 150ms ease, outline-offset 150ms ease;

  &:focus-within {
    --input-border-color: var(--color-selected-dark);
    --hover-color: var(--color-selected-dark);
    --outline-size: 0;

    filter: var(--hover-filter);
    box-shadow: 0 0 0 var(--hover-size) var(--hover-color);
  }

  .input {
    --input-padding: 0;
    --input-border-radius: 0;
    --input-background: transparent;
    --input-border-size: 0;
    --hover-size: 0;
    --outline-size: 0;
    --outline-color: transparent;

    outline: 0;
  }

  &:has(.input:is(
    :autofill,
    :-webkit-autofill,
    :-webkit-autofill:hover,
    :-webkit-autofill:focus)) {
    -webkit-text-fill-color: var(--color-text);
    -webkit-box-shadow: 0 0 0px 1000px var(--color-selected) inset;
  }

  .btn:not(.avatar) {
    margin-block: -0.4em;

    &:last-child {
      margin-inline-end: -0.7em;
    }
  }

  .btn--reversed img {
    inline-size: 1em;
  }
}

.input--file {
  input[type="file"] {
    --hover-size: 0;

    block-size: 100%;
    border: 0;
    border-radius: 50%;
    inline-size: 100%;
    overflow: clip;
    padding: 0;

    &::file-selector-button {
      appearance: none;
      cursor: pointer;
      opacity: 0;
    }
  }

  &:not(.avatar) {
    img {
      inline-size: 1.6em;
    }
  }
}

.input--code {
  font-family: ui-monospace, SFMono-Regular, "SF Mono", Menlo, Consolas, "Liberation Mono", monaco, monospace;
  white-space: pre-wrap !important;
  word-wrap: break-word;
}

/* Switches */
.switch {
  block-size: 1.75em;
  display: inline-flex;
  inline-size: 3em;
  position: relative;
  border-radius: 2em;

  @media (any-hover: hover) {
    &:where(:not(:active):hover) .switch__btn {
      filter: brightness(0.7);
      box-shadow: none;
    }
  }

  &:focus-within .switch__btn {
    --shadow-size: min(0.2em, 2px);

    box-shadow:
      0 0 0 var(--shadow-size) var(--color-bg),
      0 0 0 calc(var(--shadow-size) * 2) var(--color-link);
  }
}

.switch__input {
  block-size: 0;
  inline-size: 0;
  opacity: 0.1;
}

.switch__btn {
  background-color: var(--color-border-darker);
  border-radius: 2em;
  cursor: pointer;
  inset: 0;
  position: absolute;
  transition: 150ms ease;

  &::before {
    background-color: var(--color-text-reversed);
    block-size: 1.35em;
    border-radius: 50%;
    content: "";
    inline-size: 1.35em;
    inset-block-end: 0.2em;
    inset-inline-start: 0.2em;
    position: absolute;
    transition: 150ms ease;
  }

  .switch__input:disabled + & {
    background-color: var(--color-border-darker) !important;
    cursor: not-allowed;
  }

  .switch__input:checked + & {
    background-color: var(--color-text);

    &::before {
      transform: translateX(1.2em);
    }
  }
}



================================================
FILE: app/assets/stylesheets/layout.css
================================================
html {
  overscroll-behavior: none;
}

body {
  --footer-height: calc((var(--block-space)) + 3.6em + var(--block-space));
  --navbar-height: 4.125em;
  --sidebar-width: 0vw;

  display: grid;
  grid-template-areas:
    "nav sidebar"
    "main sidebar";
  grid-template-columns: 1fr var(--sidebar-width);
  grid-template-rows: min-content 1fr;
  max-block-size: 100dvh;

  &.sidebar {
    @media (min-width: 100ch) {
      --sidebar-width: 26vw;
    }
  }
}

#app-logo {
  display: none;

  @media (min-width: 100ch) {
    block-size: var(--footer-height);
    display: grid;
    filter: saturate(0);
    inline-size: 5vw;
    inset: auto auto 0 0;
    opacity: 0.5;
    padding-inline: 1vw;
    place-items: center;
    position: absolute;
    transition: opacity 500ms ease-in-out, filter 500ms ease-in-out;

    & img {
      block-size: auto;
      inline-size: 100%;
      max-inline-size: 2.75em;
    }

    &:hover {
      filter: none;
      opacity: 1;
    }
  }
}

#nav {
  grid-area: nav;
}

#main-content {
  align-content: start;
  background-color: var(--color-bg);
  display: flex;
  flex-direction: column;
  grid-area: main;
  overflow: auto;
  position: relative;

  .sidebar & {
    justify-content: end;

    @media (min-width: 100ch) {
      border-inline: 1px solid var(--color-border-darker);
      margin-inline: 5vw 0;
    }
  }
}

#sidebar {
  grid-area: sidebar;
  position: relative;
  transition: transform 300ms ease;

  .sidebar & {
    -webkit-backdrop-filter: blur(66px);
    backdrop-filter: blur(66px);
    background-color: oklch(var(--lch-white) / 0.66);
    block-size: 100dvh;
    max-block-size: 100dvh;
    z-index: 3;

    @media (max-width: 100ch) {
      inset: 0;
      position: fixed;
      transform: translate(100%);
    }
  }

  &.open {
    @media (max-width: 100ch) {
      transform: translate(0);
    }
  }
}

#footer {
  grid-area: footer;
}



================================================
FILE: app/assets/stylesheets/lightbox.css
================================================
.lightbox {
  background-color: oklch(var(--lch-white) / 0.66);
  block-size: 100dvh;
  border: 0;
  inline-size: 100dvw;
  inset: 0;
  margin: auto;
  max-height: unset;
  max-width: unset;
  overflow: hidden;
  padding: var(--block-space) var(--inline-space);

  &[open] {
    display: grid;
    place-items: center;
  }

  &::backdrop {
    -webkit-backdrop-filter: blur(66px);
    backdrop-filter: blur(66px);
  }
}

.lightbox__btn {
  align-self: start;
  grid-area: 1/1;
  justify-self: end;
}

.lightbox__btn--download {
  align-self: end;
  grid-area: 1/1;
  justify-self: end;
}

.lightbox__btn--share {
  align-self: start;
  grid-area: 1/1;
  justify-self: start;
}

.lightbox__image {
  grid-area: 1/1;
  max-inline-size: calc(100dvw - (var(--inline-space) * 2));
  max-block-size: calc(100dvh - (var(--block-space) * 2));
}



================================================
FILE: app/assets/stylesheets/messages.css
================================================
.message-area {
  display: contents;

  &:has(.message) {
    .message-area--empty {
      display: none;
    }
  }

  &:not(:has(.message)) {
    --opacity: 0.2;

    block-size: 100vh;
    display: grid;
    place-content: center stretch;
    place-items: center center;

    > * {
      grid-area: 1/1;
    }

    .message-area--empty > figure img {
      inline-size: 30dvw;
    }
  }
}

.message-area__return-to-latest {
  animation: pulsing-outline 2s infinite both;
  outline: 0 solid var(--color-selected-dark);
  inset-block-end: var(--footer-height);
  inset-inline-start: calc(50% - calc(var(--btn-size) / 2));
  position: absolute;
}

#system_welcome {
  --avatar-size: 5ch;

  display: block;
  margin-block-start: calc(var(--avatar-size) * 2);
  position: relative;
  z-index: 1;

  .avatar {
    margin-block-start: calc(var(--avatar-size) * -0.5);
  }

  .message__body {
    display: block;
    max-inline-size: unset;
  }

  .message__body-content {
    overflow: unset;
  }

  .system-welcome--translation {
    inset-block-start: var(--block-space);
    inset-inline-start: var(--block-space);
    position: absolute;
  }

  .invite-label,
  .btn--regenerate {
    display: none;
  }
}

.messages {
  --message-column-gap: 0.66ch;
  --message-row-gap: 0.1em;
  --message-space: 1.33em;

  display: grid;
  flex: 1;
  grid-auto-rows: min-content;
  overflow-y: auto;
  overscroll-behavior: contain;
  position: relative;
  row-gap: var(--message-space);

  @media (max-width: 100ch) {
    padding-block-start: var(--navbar-height);
  }
}

.message {
  --content-padding-block: 0.66rem;
  --content-padding-inline: calc(var(--inline-space) * 1.5);

  column-gap: var(--message-column-gap);
  display: grid;
  grid-auto-columns: var(--inline-space-double) 1fr min-content;
  grid-auto-rows: min-content;
  grid-template-areas:
    "sep sep sep"
    "avatar body body";
  padding-inline: calc(var(--inline-space) + 1vw);
  position: relative;
  row-gap: var(--message-row-gap);
  visibility: hidden;
  z-index: 0;

  .message__boost-inline {
    display: none;
  }

  &:last-of-type {
    &:has(.boost__reactions) {
      .message__body {
        padding-block-end: 3.2rem;
      }
    }
  }

  &.message--formatted {
    visibility: visible;
  }

  &:has([open]) {
    z-index: 1;

    .message__options-btn {
      opacity: 1;
    }

    .message__actions-menu {
      display: block;
    }
  }

  &:has(.boost-item) {
    .message__boost-inline {
      display: inline-flex;
    }
  }

  + .message--threaded {
    margin-block-start: calc((var(--message-space) + (var(--message-row-gap) * 2) - 2px) * -1);
  }

  &.message--failed {
    opacity: 0.5;

    .message__meta::after {
      content: "🚫";
      font-size: 1em;
      line-height: 1;
    }

    .message__body-content {
      animation: wiggle 0.4s both;
      outline: 1px dashed var(--color-negative);
    }
  }
}

.message__day-separator {
  align-items: center;
  display: none;
  font-size: 0.8rem;
  font-weight: 600;
  grid-area: sep;
  grid-template-columns: 1fr auto 1fr;
  inline-size: 100%;
  margin-block: var(--message-space);
  text-align: center;
  text-transform: uppercase;
  visibility: hidden;

  time,
  span {
    padding: 0.66em 2.33ch;
    background-color: var(--color-message-bg);
    border-radius: 3em;
  }

  &::after,
  &::before {
    border-top: 2px solid var(--color-message-bg);
    content: "";
  }

  .message--first-of-day & {
    display: grid;
    visibility: visible;
  }
}

.message__avatar {
  --avatar-border-size: 1px;
  --avatar-size: 3.5ch;

  grid-area: avatar;
  z-index: 2;
  display: flex;
  box-shadow: 0 0 0 var(--hover-size) var(--color-bg);
}

.message__meta {
  align-items: center;
  column-gap: calc(var(--message-column-gap) / 2);
  display: flex;
  justify-content: start;
  line-height: 1.5;
  min-inline-size: 0;
  margin: 0;
  padding-inline-end: calc(var(--btn-size) / 2);

  .message__room {
    display: none;
    visibility: hidden;
  }

  .message__heading {
    align-items: center;
    column-gap: calc(var(--message-column-gap) / 2);
    display: inline-flex;
    margin: 0;
    min-inline-size: 0;
  }

  .message__actions {
    @media (max-width: 100ch) {
      .message__options-btn {
        --btn-padding: 0 0.5em;

        aspect-ratio: unset;
        block-size: auto;
        border-radius: 0.3em;
      }
    }

    @media (min-width: 100ch) {
      inset-block-start: 50%;
      inset-inline-start: calc(100% + var(--message-column-gap) / 2);
      position: absolute;
      transform: translate(0, -50%);
    }
  }
}

.message__author {
  font-size: 0.8rem;
  font-weight: 400;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.message__permalink {
  color: var(--color-text);
  font-size: 0.8rem;
  font-weight: 400;
  opacity: 0.5;
  text-decoration: none;
  white-space: nowrap;
}

.message__body {
  column-gap: var(--inline-space-half);
  display: flex;
  grid-area: body;
  max-inline-size: min(80ch, 85%);
  position: relative;

  .message--me & {
    flex-direction: row-reverse;
  }

  @media (max-width: 100ch) {
    max-inline-size: 100%;
  }
}

.message__body-content {
  background-color: var(--message-background, var(--color-message-bg));
  border-radius: 0.66em;
  color: var(--message-color, var(--color-text));
  font-weight: 400;
  inline-size: fit-content;
  margin-block-end: var(--message-row-gap);
  max-inline-size: 100%;
  padding: var(--content-padding-block) var(--content-padding-inline);
  position: relative;
  word-break: break-word;

  &:has(.message__attachment) {
    margin-block-end: 0.33em;
    padding: 0;

    &:has(.boost) {
      padding-block-end: var(--block-space-half);

      .boosts {
        padding-inline: var(--inline-space);
      }
    }

    .message__meta {
      padding: var(--content-padding-block) var(--content-padding-inline);
    }
  }

  &.message__body-content--editing:has(.message__attachment) {
    max-inline-size: calc(100% - var(--btn-size));
  }

  &:has(.message__pending-upload) {
    padding: 0;
  }
}

.message__attachment {
  block-size: auto;
  border: 1px solid var(--color-border);
  border-radius: 0.66em;

  .message__body-content:has(.boost) & {
    border-end-start-radius: 0;
    border-end-end-radius: 0;
  }

  .message:not(.message--threaded) & {
    border-start-end-radius: 0;
    border-start-start-radius: 0;
  }
}

img.message__attachment {
  cursor: zoom-in;
}

.message__actions {
  align-content: center;
  display: flex;
  flex-wrap: wrap;
  justify-content: start;
  z-index: 3;
}

.message__action-btn {
  --btn-background: transparent;
  --btn-border-color: transparent;
  --outline-offset: 0;
  --width: 33%;

  flex-basis: var(--width);
  font-size: 0.8rem;

  @media (hover: hover) and (pointer: fine) {
    &:where(:not(:active):hover) {
      --btn-background: var(--color-border-dark);
      --hover-size: 0;

      opacity: 1;
    }
  }

  &:where(:not(:active)):focus-visible {
    opacity: 1;
  }

  .message__actions-grid & {
    padding: 0.5em;

    &:where(:has(> :last-child:nth-child(1))) & {
      --width: 100%;
    }

    &:where(:has(> :last-child:nth-child(even))) & {
      --width: 50%;
    }
  }
}

.message__edit-btn {
  display: none;

  .admin &,
  .message--me & {
    display: inline-flex;
  }
}

.message__options-btn {
  @media (hover: hover) and (pointer: fine) {
    opacity: 0;
    transition: opacity 150ms ease-in-out;
    transition-delay: 150ms;

    .message:hover & {
      opacity: 1;
    }
  }

  @media (hover: none) and (pointer: coarse) {
    opacity: 0.5;

    & [open] {
      opacity: 1;
    }
  }
}

.message__actions-menu {
  --arrow-size: 1.5em;
  --boost-border-color: var(--color-selected-dark);
  --border-color: var(--color-border-darker);
  --border-size: 1px;

  background-color: var(--color-bg);
  border-radius: calc(var(--arrow-size) / 2);
  display: none;
  inset: var(--btn-size) auto auto 50%;
  padding: var(--inline-space-half);
  position: absolute;
  transform: translateX(-50%);
  transform-origin: top left;

  &::before {
    aspect-ratio: 2;
    background: var(--border-color);
    clip-path: polygon(50% 0, 100% 100%, 0 100%);
    inline-size: var(--arrow-size);
    content: "";
    display: block;
    inset-block-start: calc(var(--arrow-size) / -2);
    inset-inline-start: 50%;
    position: absolute;
    transform: translateX(-50%);
  }

  &::after {
    aspect-ratio: 2;
    background: var(--color-bg);
    clip-path: polygon(50% 0, 100% 100%, 0 100%);
    inline-size: var(--arrow-size);
    content: "";
    display: block;
    inset-block-start: calc((var(--arrow-size) / -2) + var(--border-size) * 1.5);
    inset-inline-start: 50%;
    position: absolute;
    transform: translateX(-50%);
  }

  @media (max-width: 100ch) {
    inset-block-start: calc(var(--btn-size) / 1.5);
  }

  .popup-orientation-top & {
    inset-block-end: var(--btn-size);
    inset-block-start: auto;
    transform-origin: bottom left;

    &::before {
      clip-path: polygon(50% 100%, 100% 0, 0 0);
      inset-block-end: auto;
      inset-block-start: 100%;
    }

    &::after {
      clip-path: polygon(50% 100%, 100% 0, 0 0);
      inset-block-end: auto;
      inset-block-start: calc(100% - var(--border-size) * 1.5);
    }

    @media (max-width: 100ch) {
      inset-block-end: calc(var(--btn-size) / 1.5);
    }
  }
}

/* Me */
.message--me {
  grid-auto-columns: min-content 1fr var(--inline-space-double);
  grid-template-areas:
    "sep sep sep"
    "body body avatar";

  :is(.message__body, .message__meta, .message__heading) {
    justify-self: end;
  }

  :is(.message__meta, .message__heading) {
    flex-direction: row-reverse;
    justify-content: end;
  }

  .message__meta {
    padding-inline: calc(var(--btn-size) / 2) 0;
  }

  .message__avatar {
    margin-inline: calc(var(--content-padding-inline) * -1) 0;
  }

  .message__actions {
    justify-content: end;

    @media (min-width: 100ch) {
      inset-inline-end: calc(100% + var(--message-column-gap) / 2);
      inset-inline-start: auto;
    }
  }
}

.message--mentioned {
  .message__body-content {
    --message-background: oklch(var(--lch-red) / 0.1);

    animation: wiggle 0.4s both;

    @media (prefers-color-scheme: dark) {
      --message-background: oklch(var(--lch-red) / 0.2);
    }
  }
}

.message--threaded {
  .message__author,
  .message__avatar {
    display: none;
  }
}

.message__edit-btns div:only-of-type {
  margin-inline: auto;
}

.message--emoji:not(:has(.composer--edit)) {
  .message__body-content {
    --message-background: transparent;

    border-radius: 0;
    margin-block-end: 0;
    padding: var(--content-padding-block) 0 var(--content-padding-block) var(--content-padding-inline);
    text-shadow: 0 0 3px var(--color-text-reversed);

    .trix-content {
      font-size: 2.4em;
      line-height: 1.4;
    }

    .message--me & {
      padding: var(--content-padding-block) var(--content-padding-inline) var(--content-padding-block) 0;
      text-align: right;
    }

    :is(.message--threaded) & {
      padding-block-start: 0;
    }
  }
}

.message.search-highlight {
  .message__body-content {
    border: 2px solid var(--color-text);
    animation: border-fade-out 0.5s 1s forwards;
  }
}

/* Pending uploads */
.message__pending-upload {
  border-radius: 0.66em;
  overflow: hidden;
  padding: var(--content-padding-block) var(--content-padding-inline);
  position: relative;

  &::before {
    background-color: var(--color-border-dark);
    block-size: 100%;
    content: "";
    inline-size: 100%;
    inset-inline-start: var(--percentage);
    position: absolute;
    transform: translateX(-100%);
    z-index: 1;
  }

  > div {
    z-index: 2;
  }

  span {
    inline-size: 3rem;
    display: inline-block;
  }

  .composer__file-thumbnail {
    aspect-ratio: 1;
    background-size: contain;
    inline-size: 1.4em;
  }
}



================================================
FILE: app/assets/stylesheets/nav.css
================================================
#nav {
  align-items: center;
  column-gap: var(--inline-space-half);
  display: flex;
  inset: 0 0 auto 0;
  inset-inline-end: var(--sidebar-width);
  padding-block: var(--block-space);
  padding-inline: calc(var(--inline-space) * 1.5) var(--inline-space-double);
  pointer-events: none;
  position: fixed;
  row-gap: var(--block-space);
  z-index: 2;

  &:has(.room--current) {
    padding-inline: var(--inline-space);

    @media (min-width: 100ch) {
      margin-inline-start: 5vw;

      .room--current {
        margin-inline-start: -3vw;

        .account-logo + & {
          margin-inline-start: 0;
        }
      }

      .account-logo {
        margin-inline-start: calc((var(--btn-size) / 2 + var(--inline-space)) * -1);
      }
    }
  }

  .sidebar & {
    @media (max-width: 100ch) {
      padding-block: var(--block-space-half);

      &::before {
        background: linear-gradient(180deg, oklch(var(--lch-white)) 20%, oklch(var(--lch-white) / 0) 100%);
        content: "";
        inset: 0;
        position: absolute;
        z-index: -1;
      }
    }
  }
}

.skip-navigation {
  --left-offset: -999em;

  inset-block-start: 4rem;
  inset-inline-start: var(--left-offset);
  position: absolute;
  white-space: nowrap;
  z-index: 11;

  &:focus {
    --left-offset: var(--inline-space);
  }
}



================================================
FILE: app/assets/stylesheets/panels.css
================================================
.panel {
  --panel-width: 50ch;
  --panel-padding: 1em;

  inline-size: var(--panel-width);
  margin: calc(var(--navbar-height) - var(--block-space)) auto var(--block-space);
  max-inline-size: 100vw;
  padding: var(--panel-padding);

  @media (min-width: 100ch) {
    --panel-padding: 2em;

    box-shadow:
      0 0 0 1px oklch(var(--lch-always-black) / 0.02),
      0 .2em 1.6em -0.8em oklch(var(--lch-always-black) / 0.2),
      0 .4em 2.4em -1em oklch(var(--lch-always-black) / 0.3),
      0 .4em .8em -1.2em oklch(var(--lch-always-black) / 0.4),
      0 .8em 1.2em -1.6em oklch(var(--lch-always-black) / 0.5),
      0 1.2em 1.6em -2em oklch(var(--lch-always-black) / 0.6);
    background-color: var(--color-bg);
    border: 1px solid var(--color-border);
    border-radius: 0.8em;
  }
}

.panel--wide {
  --panel-width: 80ch;
}

.panel__button {
  inset-block-start: var(--block-space);
  inset-inline-start: var(--block-space);
  position: absolute;
}



================================================
FILE: app/assets/stylesheets/separators.css
================================================
.separator {
  border: none;
  border-block-start: 1px var(--border-style, dashed) var(--color-border-darker);
  flex-grow: 1;
  min-inline-size: var(--inline-space-double);
}



================================================
FILE: app/assets/stylesheets/sidebar.css
================================================
/* Sidebar */
:root {
  --sidebar-inline-space: max(calc(var(--inline-space) * 1.5), 1vw);
  --sidebar-tools-height: calc(var(--block-space) + var(--btn-size) + (var(--block-space) * 2));
}

.sidebar__container {
  block-size: 100dvh;
  max-block-size: 100dvh;
  padding-block-end: var(--sidebar-tools-height);
}

.sidebar__tools {
  -webkit-backdrop-filter: blur(12px);
  backdrop-filter: blur(12px);
  inset: auto 0 0 0;
  padding-block: calc(var(--block-space) * 1.5);
  padding-inline: var(--sidebar-inline-space);
  position: fixed;

  @media (min-width: 100ch) {
    inline-size: calc(var(--sidebar-width));
    inset-inline-start: auto;
  }
}

.sidebar__toggle {
  inset-block-start: var(--block-space-half);
  inset-inline-start: calc((var(--btn-size) + max(var(--inline-space), 1vw)) * -1);
  position: absolute;
  transition:
    inset-inline-start 300ms ease,
    border-color 300ms ease,
    background-color 300ms ease;
  z-index: 5;

  #sidebar:where(:not(.open):has(.unread)) & {
    &::after {
      --size: 1em;

      aspect-ratio: 1;
      background-color: var(--color-negative);
      block-size: var(--size);
      border-radius: calc(var(--size) * 2);
      content: "";
      flex-shrink: 0;
      inline-size: var(--size);
      inset-block-start: calc(var(--size) / -4);
      inset-inline-end: calc(var(--size) / -4);
      position: absolute;
    }
  }

  @media (min-width: 100ch) {
    display: none;
    inset-block-start: var(--block-space);
  }

  .open & {
    inset-block-start: var(--block-space);

    @media (max-width: 100ch) {
      inset-inline-start: var(--sidebar-inline-space);

      & img {
        filter: invert(0);
      }

      @media (prefers-color-scheme: dark) {
        & img {
          filter: invert(100%);
        }
      }
    }
  }
}

/* Direct messsages */
.directs {
  --btn-border-color: var(--color-border-darker);
  --column-gap: calc(var(--inline-space) / 1.5);

  -webkit-backdrop-filter: blur(12px);
  backdrop-filter: blur(12px);
  display: grid;
  grid-auto-columns: minmax(auto, max-content);
  grid-auto-flow: column;
  inset: 0 0 auto 0;
  justify-content: start;
  overscroll-behavior: auto;
  margin-block-end: var(--block-space-half);
  padding-block: var(--block-space) var(--block-space-half);
  padding-inline: var(--sidebar-inline-space) calc(var(--sidebar-inline-space) + var(--column-gap));
  position: sticky;
  z-index: 3;

  .open & {
    @media (max-width: 100ch) {
      -webkit-mask-image: linear-gradient(to left, oklch(0% 0 0 / 1) 85%, oklch(0% 0 0 / 0) 99%);
      mask-image: linear-gradient(to left, oklch(0% 0 0 / 1) 85%, oklch(0% 0 0 / 0) 99%);
      padding-inline-start: calc(var(--btn-size) + var(--sidebar-inline-space) + (var(--column-gap) * 2.5));
    }
  }

  &.directs--new {
    --column-gap: var(--inline-space);
    --row-gap: 2px;

    -webkit-mask-image: none;
    mask-image: none;
    padding-inline-end: var(--sidebar-inline-space);
  }
}

.directs--edit  {
  display: grid;
  gap: var(--inline-space);
  grid-template-columns: repeat(auto-fit, minmax(33%, 1fr));
  grid-template-rows: min-content;
  place-items: center;

  .member {
    aspect-ratio: 1;
    block-size: auto;
    inline-size: 100%;
    margin-inline: auto;
    place-content: center;
  }
}

.direct {
  border-radius: 0.3em;
  box-shadow: none;
  color: var(--color-text);
  display: grid;
  justify-items: center;
  position: relative;
  text-decoration: none;

  .avatar,
  .avatar__group {
    margin-inline: calc(var(--inline-space) / 1.5);

    .avatar {
      margin-inline: 0;
    }
  }

  @media (any-hover: hover) {
    &:where(:not(:active):hover) .avatar:not(.avatar--icon) {
      filter: brightness(0.7);
    }
  }

  &:focus-within,
  &:where(:not(:active)):focus-visible {
    outline: 0;
  }
}

.direct__new {
  margin-inline-end: var(--inline-space-half);

  .avatar {
    margin-inline: 0;
  }
}

.direct__author {
  --column-gap: 0.3ch;

  margin-block-start: 0.1em;

  .unread & {
    font-weight: 800;
    position: relative;

    &::after {
      --size: 0.6em;

      aspect-ratio: 1;
      background-color: var(--color-text);
      block-size: var(--size);
      border-radius: calc(var(--size) * 2);
      content: "";
      flex-shrink: 0;
      inline-size: var(--size);
      position: absolute;
      inset: 1.3em auto auto 50%;
      transform: translate(-50%);
    }
  }
}

/* Rooms */
.rooms {
  --column-gap: 0.5em;
  --row-gap: 0.5em;

  padding-inline: var(--sidebar-inline-space);
}

.rooms__new-btn {
  inset-block-end: calc((var(--sidebar-tools-height) * -1) + var(--block-space) * 1.5);
  position: sticky;
  z-index: 4;
}

.room {
  background-color: var(--color-text-reversed);
  color: var(--color-text);
  font-weight: normal;
  justify-content: start;
  margin-inline-end: auto;
  max-inline-size: 100%;

  .searches-list & {
    border-radius: 0.5em;
  }

  &.unread {
    --btn-border-color: var(--color-text);
    --hover-color: var(--color-text);

    font-weight: 600;

    &:not(:hover) {
      box-shadow: 0 0 0 1px var(--color-text);
    }
  }
}

.room--current {
  --btn-border-radius: 0.5em;
  --hover-filter: none;
  --num-buttons: 1;

  min-block-size: var(--btn-size);

  .room__contents {
    .account-has-logo & {
      --num-buttons: 2;
    }

    max-inline-size: calc(100dvw - (var(--btn-size) * var(--num-buttons)) - (var(--btn-size) + max(var(--inline-space), 1vw)) - ((var(--inline-space) + 1.8em) * 2) - var(--sidebar-width) - var(--inline-space) * var(--num-buttons));

    @media (max-width: 100ch) {
      --num-buttons: 2;

      .account-has-logo & {
        --num-buttons: 3;
      }
    }
  }
}

/* Searches */
.searches {
  #nav {
    align-items: start;
    column-gap: 0;
    padding-inline-end: 0;
  }

  .rooms {
    padding-block-start: var(--block-space);
  }

  .message--formatted .message__room {
    display: block;
    font-size: 0.8rem;
    font-weight: 400;
    overflow: hidden;
    text-overflow: ellipsis;
    visibility: visible;
    white-space: nowrap;

    &::before {
      content: "→";
    }

    .message--me & {
      &::after {
        content: "←";
      }

      &::before {
        content: "";
      }
    }
  }

  .message__actions {
    display: none !important;
    visibility: hidden !important;
  }
}

.searches__recents {
  --mask: linear-gradient(to left, oklch(0% 0 0 / 1) 97%, oklch(0% 0 0 / 0) 99%);

  -webkit-mask-image: var(--mask);
  display: none;
  mask-image: var(--mask);
  position: relative;

  @media (max-width: 100ch) {
    display: flex;
  }

  .room {
    max-inline-size: 20ch;

    &:first-child {
      margin-inline-start: var(--inline-space);
    }
  }

  .searches__btn {
    margin-inline-end: var(--inline-space-double);
  }
}

.searches__query {
  --btn-border-radius: 0.5em;

  min-block-size: var(--btn-size);
}

.searches__results {
  padding-block-start: var(--navbar-height);
}

.searches__input:required:invalid {
  ~ .searches__reset {
    display: none;
    visibility: hidden;
  }
}



================================================
FILE: app/assets/stylesheets/signup.css
================================================
.nametag {
  --fieldset-border-color: var(--color-border-darker);
  --nametag-padding: var(--block-space-double);
  --nametag-border-size: 1px;

  background-color: var(--color-message-bg);
  border-radius: var(--fieldset-border-radius, 1em);
  border: var(--nametag-border-size) solid var(--fieldset-border-color);
  box-shadow: 0 0 1em oklch(var(--lch-black) / 0.2);
  margin-block-end: var(--block-space);
  margin-block-start: 18ex;
  overflow: unset;
  padding: var(--nametag-padding);

  @media (max-width: 100ch) {
    --nametag-padding: calc(var(--block-space) * 1.5);
  }
}

.nametag__inner {
  --avatar-size: 4ch;
  --nametag-inner-padding: var(--block-space);

  background-color: var(--color-bg);
  border-radius: 0.8em;
  border: var(--nametag-border-size) solid var(--fieldset-border-color);
  inline-size: 42ch;
  max-inline-size: calc(100dvw - var(--nametag-padding) - var(--nametag-inner-padding) - (var(--nametag-border-size) * 6) - var(--inline-space) * 2);
  padding: var(--nametag-inner-padding);

  legend {
    padding-inline: 0.8em;
  }
}

.nametag__lanyard {
  block-size: auto;
  display: block;
  inline-size: 20ex;
  inset-block-start: -4.5ex;
  position: absolute;
}

/* Unuspported browser */
.browser-list img {
  aspect-ratio: 1;
  block-size: auto;
  inline-size: 7ch;
}

.browser {
  flex-basis: 20%;
}

.signup {
  .skip-navigation {
    display: none;
  }
}



================================================
FILE: app/assets/stylesheets/spinner.css
================================================
.spinner {
  position: relative;

  &::before {
    --mask: no-repeat radial-gradient(#000 68%, #0000 71%);
    --dot-size: 1.25em;

    -webkit-mask: var(--mask), var(--mask), var(--mask);
    -webkit-mask-size: 28% 45%;
    animation: submitting 1.3s infinite linear;
    aspect-ratio: 8/5;
    background: currentColor;
    content: "";
    inline-size: var(--dot-size);
    inset: 50% 0.25em;
    margin-block: calc((var(--dot-size) / 3) * -1);
    margin-inline: calc((var(--dot-size) / 2) * -1);
    position: absolute;
  }
}



================================================
FILE: app/assets/stylesheets/utilities.css
================================================
:root {
  --inline-space: 1ch;
  --inline-space-half: calc(var(--inline-space) / 2);
  --inline-space-double: calc(var(--inline-space) * 2);

  --block-space: 1rem;
  --block-space-half: calc(var(--block-space) / 2);
  --block-space-double: calc(var(--block-space) * 2);
}

/* Text */
.txt-small { font-size: 0.8rem; }
.txt-medium { font-size: 1rem; }
.txt-large { font-size: 1.4rem; }
.txt-x-large { font-size: 1.8rem; }
.txt-xx-large { font-size: 2.4rem; }

.txt-align-center { text-align: center; }
.txt-align-start { text-align: start; }
.txt-align-end { text-align: end; }

.txt-primary { color: var(--color-text); }
.txt-reversed { color: var(--color-text-reversed); }
.txt-negative { color: var(--color-negative); }
.txt-subtle { color: var(--color-border-darker); }
.txt-undecorated { text-decoration: none; }
.txt-tight-lines { line-height: 1.2; }
.txt-normal { font-weight: 400; font-style: normal; }
.txt-nowrap { white-space: nowrap; }

/* Flexbox and Grid */
.justify-end { justify-content: end; }
.justify-start { justify-content: start; }
.justify-center { justify-content: center; }
.justify-space-between { justify-content: space-between; }

.align-center { align-items: center; }
.align-start { align-items: start; }
.align-end { align-items: end; }

.align-self-start { align-self: start; }

.contain { contain: inline-size; }

.flex { display: flex; }
.flex-inline { display: inline-flex; }
.flex-column { flex-direction: column; }
.flex-wrap { flex-wrap: wrap; }

.flex-item-grow { flex-grow: 1; }
.flex-item-no-shrink { flex-shrink: 0; }
.flex-item-justify-start { margin-inline-end: auto; }
.flex-item-justify-end { margin-inline-start: auto; }

.gap {
  column-gap: var(--column-gap, var(--inline-space));
  row-gap: var(--row-gap, var(--block-space));
}

.gap-half {
  column-gap: var(--inline-space-half);
  row-gap: var(--block-space-half);
}

/* Sizing */
.full-width { inline-size: 100%; }
.min-width { min-inline-size: 0; }
.max-width { max-inline-size: 100%; }
.min-content { inline-size: min-content; }
.max-inline-size { max-inline-size: 100%; }
.constrain-height { max-block-size: var(--max-height, 50vh); }

/* Overflow */
.overflow-x { overflow-x: auto; scroll-snap-type: x mandatory; scroll-behavior: smooth; }
.overflow-y { overflow-y: auto; scroll-snap-type: y mandatory; scroll-behavior: smooth; }
.overflow-clip { text-overflow: clip; white-space: nowrap; overflow: hidden; }
.overflow-ellipsis { text-overflow: ellipsis; white-space: nowrap; overflow: hidden; }

.overflow-hide-scrollbar::-webkit-scrollbar {
  @media (pointer: course) {
    display: none;
  }
}

/* Padding */
.pad { padding: var(--block-space) var(--inline-space); }
.pad-block { padding-block: var(--block-space); }
.pad-block-start { padding-block-start: var(--block-space); }
.pad-block-end { padding-block-end: var(--block-space); }
.pad-block-half { padding-block: var(--block-space-half); }
.pad-block-start-half { padding-block-start: var(--block-space-half); }

.pad-inline { padding-inline: var(--inline-space); }
.pad-inline-start { padding-inline-start: var(--inline-space); }
.pad-inline-end { padding-inline-end: var(--inline-space); }
.pad-inline-half { padding-inline: var(--inline-space-half); }
.pad-inline-double { padding-inline: var(--inline-space-double); }

.unpad { padding: 0; }

/* Margins */
.margin { margin: var(--block-space) var(--inline-space); }
.margin-block { margin-block: var(--block-space); }
.margin-block-half { margin-block: var(--block-space-half); }
.margin-block-start { margin-block-start: var(--block-space); }
.margin-block-start-half { margin-block-start: var(--block-space-half); }
.margin-block-end { margin-block-end: var(--block-space); }
.margin-block-end-half { margin-block-end: var(--block-space-half); }
.margin-block-double { margin-block: var(--block-space-double); }

.margin-inline { margin-inline: var(--inline-space); }
.margin-inline-start { margin-inline-start: var(--inline-space); }
.margin-inline-start-half { margin-inline-start: var(--inline-space-half); }
.margin-inline-end { margin-inline-end: var(--inline-space); }
.margin-inline-half { margin-inline: var(--inline-space-half); }
.margin-inline-double { margin-inline: var(--inline-space-double); }

.margin-none { margin: 0; }
.margin-none-block { margin-block: 0; }
.margin-none-block-start { margin-block-start: 0; }
.margin-none-block-end { margin-block-end: 0; }

.margin-none-inline { margin-inline: 0; }
.margin-none-inline-start { margin-inline-start: 0; }
.margin-none-inline-end { margin-inline-end: 0; }

.center { margin-inline: auto; }
.center-block { margin-block: auto; }

/* Position */
.position-relative { position: relative; }

/* Fills */
.fill { background-color: var(--color-bg); }
.fill-white { background-color: var(--color-text-reversed); }
.fill-shade { background-color: var(--color-border); }
.fill-transparent { background-color: transparent; }

.translucent { opacity: var(--opacity, 0.5); }

/* Borders */
.border { border: var(--border-size, 1px) solid var(--border-color, var(--color-border)); }
.border-top { border-block-start: var(--border-size, 1px) solid var(--border-color, var(--color-border)); }
.borderless { border: 0; }

/* Border radius */
.border-radius { border-radius: var(--border-radius, 1em); }

/* Shadows */
.shadow {
  box-shadow:
    0 0 0 1px oklch(var(--lch-always-black) / 0.02),
    0 .2em 1.6em -0.8em oklch(var(--lch-always-black) / 0.2),
    0 .4em 2.4em -1em oklch(var(--lch-always-black) / 0.3),
    0 .4em .8em -1.2em oklch(var(--lch-always-black) / 0.4),
    0 .8em 1.2em -1.6em oklch(var(--lch-always-black) / 0.5),
    0 1.2em 1.6em -2em oklch(var(--lch-always-black) / 0.6);

  @media (prefers-color-scheme: dark) {
    box-shadow:
      0 0 0 1px oklch(var(--lch-always-black) / 0.42),
      0 .2em 1.6em -0.8em oklch(var(--lch-always-black) / 0.6),
      0 .4em 2.4em -1em oklch(var(--lch-always-black) / 0.7),
      0 .4em .8em -1.2em oklch(var(--lch-always-black) / 0.8),
      0 .8em 1.2em -1.6em oklch(var(--lch-always-black) / 0.9),
      0 1.2em 1.6em -2em oklch(var(--lch-always-black) / 1);
  }
}

/* Accessibility */
.for-screen-reader {
  block-size: 1px;
  clip-path: inset(50%);
  inline-size: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
}

/* Visibility */
[hidden] { display: none; }
[contents] { display: contents; }

/* PWA */
.hide-in-pwa {
  @media (display-mode: standalone) {
    display: none;
  }
}

.hide-in-browser {
  @media (display-mode: browser) {
    display: none;
  }
}

.hide-in-ios-pwa {
  @media (display-mode: standalone) {
    @supports (-webkit-touch-callout: none) {
      display: none;
    }
  }
}



================================================
FILE: app/channels/heartbeat_channel.rb
================================================
class HeartbeatChannel < ApplicationCable::Channel
end



================================================
FILE: app/channels/presence_channel.rb
================================================
class PresenceChannel < RoomChannel
  on_subscribe   :present, unless: :subscription_rejected?
  on_unsubscribe :absent,  unless: :subscription_rejected?

  def present
    membership.present

    broadcast_read_room
  end

  def absent
    membership.disconnected
  end

  def refresh
    membership.refresh_connection
  end

  private
    def membership
      @room.memberships.find_by(user: current_user)
    end

    def broadcast_read_room
      ActionCable.server.broadcast "user_#{current_user.id}_reads", { room_id: membership.room_id }
    end
end



================================================
FILE: app/channels/read_rooms_channel.rb
================================================
class ReadRoomsChannel < ApplicationCable::Channel
  def subscribed
    stream_from "user_#{current_user.id}_reads"
  end
end



================================================
FILE: app/channels/room_channel.rb
================================================
class RoomChannel < ApplicationCable::Channel
  def subscribed
    if @room = find_room
      stream_for @room
    else
      reject
    end
  end

  private
    def find_room
      current_user.rooms.find_by(id: params[:room_id])
    end
end



================================================
FILE: app/channels/typing_notifications_channel.rb
================================================
class TypingNotificationsChannel < RoomChannel
  def start(data)
    broadcast_to @room, action: :start, user: current_user_attributes
  end

  def stop(data)
    broadcast_to @room, action: :stop, user: current_user_attributes
  end

  private
    def current_user_attributes
      current_user.slice(:id, :name)
    end
end



================================================
FILE: app/channels/unread_rooms_channel.rb
================================================
class UnreadRoomsChannel < ApplicationCable::Channel
  def subscribed
    stream_from "unread_rooms"
  end
end



================================================
FILE: app/channels/application_cable/channel.rb
================================================
module ApplicationCable
  class Channel < ActionCable::Channel::Base
  end
end



================================================
FILE: app/channels/application_cable/connection.rb
================================================
module ApplicationCable
  class Connection < ActionCable::Connection::Base
    include Authentication::SessionLookup

    identified_by :current_user

    def connect
      self.current_user = find_verified_user
    end

    private
      def find_verified_user
        if verified_session = find_session_by_cookie
          verified_session.user
        else
          reject_unauthorized_connection
        end
      end
  end
end



================================================
FILE: app/controllers/accounts_controller.rb
================================================
class AccountsController < ApplicationController
  before_action :ensure_can_administer, only: :update
  before_action :set_account

  def edit
    set_page_and_extract_portion_from User.active.ordered, per_page: 500
  end

  def update
    @account.update!(account_params)
    redirect_to edit_account_url, notice: "✓"
  end

  private
    def set_account
      @account = Current.account
    end

    def account_params
      params.require(:account).permit(:name, :logo)
    end
end



================================================
FILE: app/controllers/application_controller.rb
================================================
class ApplicationController < ActionController::Base
  include AllowBrowser, Authentication, Authorization, SetCurrentRequest, SetPlatform, TrackedRoomVisit, VersionHeaders
  include Turbo::Streams::Broadcasts, Turbo::Streams::StreamName
end



================================================
FILE: app/controllers/first_runs_controller.rb
================================================
class FirstRunsController < ApplicationController
  allow_unauthenticated_access

  before_action :prevent_repeats

  def show
    @user = User.new
  end

  def create
    user = FirstRun.create!(user_params)
    start_new_session_for user

    redirect_to root_url
  end

  private
    def prevent_repeats
      redirect_to root_url if Account.any?
    end

    def user_params
      params.require(:user).permit(:name, :avatar, :email_address, :password)
    end
end



================================================
FILE: app/controllers/messages_controller.rb
================================================
class MessagesController < ApplicationController
  include ActiveStorage::SetCurrent, RoomScoped

  before_action :set_room, except: :create
  before_action :set_message, only: %i[ show edit update destroy ]
  before_action :ensure_can_administer, only: %i[ edit update destroy ]

  layout false, only: :index

  def index
    @messages = find_paged_messages

    if @messages.any?
      fresh_when @messages
    else
      head :no_content
    end
  end

  def create
    set_room
    @message = @room.messages.create_with_attachment!(message_params)

    @message.broadcast_create
    deliver_webhooks_to_bots
  rescue ActiveRecord::RecordNotFound
    render action: :room_not_found
  end

  def show
  end

  def edit
  end

  def update
    @message.update!(message_params)

    @message.broadcast_replace_to @room, :messages, target: [ @message, :presentation ], partial: "messages/presentation", attributes: { maintain_scroll: true }
    redirect_to room_message_url(@room, @message)
  end

  def destroy
    @message.destroy
    @message.broadcast_remove_to @room, :messages
  end

  private
    def set_message
      @message = @room.messages.find(params[:id])
    end

    def ensure_can_administer
      head :forbidden unless Current.user.can_administer?(@message)
    end


    def find_paged_messages
      case
      when params[:before].present?
        @room.messages.with_creator.page_before(@room.messages.find(params[:before]))
      when params[:after].present?
        @room.messages.with_creator.page_after(@room.messages.find(params[:after]))
      else
        @room.messages.with_creator.last_page
      end
    end


    def message_params
      params.require(:message).permit(:body, :attachment, :client_message_id)
    end


    def deliver_webhooks_to_bots
      bots_eligible_for_webhook.excluding(@message.creator).each { |bot| bot.deliver_webhook_later(@message) }
    end

    def bots_eligible_for_webhook
      @room.direct? ? @room.users.active_bots : @message.mentionees.active_bots
    end
end



================================================
FILE: app/controllers/pwa_controller.rb
================================================
class PwaController < ApplicationController
  allow_unauthenticated_access
  skip_forgery_protection

  # We need a stable URL at the root, so we can't use the regular asset path here.
  def service_worker
  end

  # Need ERB interpolation for paths, so can't use asset path here either.
  def manifest
  end
end



================================================
FILE: app/controllers/qr_code_controller.rb
================================================
class QrCodeController < ApplicationController
  allow_unauthenticated_access

  def show
    url = Base64.urlsafe_decode64(params[:id])
    qr_code = RQRCode::QRCode.new(url).as_svg(viewbox: true, fill: :white, color: :black)

    expires_in 1.year, public: true
    render plain: qr_code, content_type: "image/svg+xml"
  end
end



================================================
FILE: app/controllers/rooms_controller.rb
================================================
class RoomsController < ApplicationController
  before_action :set_room, only: %i[ show destroy ]
  before_action :ensure_can_administer, only: %i[ destroy ]
  before_action :remember_last_room_visited, only: :show

  def index
    redirect_to room_url(Current.user.rooms.last)
  end

  def show
    @messages = find_messages
  end

  def destroy
    @room.destroy

    broadcast_remove_room
    redirect_to root_url
  end

  private
    def set_room
      if room = Current.user.rooms.find_by(id: params[:room_id] || params[:id])
        @room = room
      else
        redirect_to root_url, alert: "Room not found or inaccessible"
      end
    end

    def ensure_can_administer
      head :forbidden unless Current.user.can_administer?(@room)
    end

    def find_messages
      messages = @room.messages.with_creator.with_attachment_details.with_boosts

      if show_first_message = messages.find_by(id: params[:message_id])
        @messages = messages.page_around(show_first_message)
      else
        @messages = messages.last_page
      end
    end

    def room_params
      params.require(:room).permit(:name)
    end

    def broadcast_remove_room
      broadcast_remove_to :rooms, target: [ @room, :list ]
    end
end



================================================
FILE: app/controllers/searches_controller.rb
================================================
class SearchesController < ApplicationController
  before_action :set_messages

  def index
    @query = query if query.present?
    @recent_searches = Current.user.searches.ordered
    @return_to_room = last_room_visited
  end

  def create
    Current.user.searches.record(query)
    redirect_to searches_url(q: query)
  end

  def clear
    Current.user.searches.destroy_all
    redirect_to searches_url
  end

  private
    def set_messages
      if query.present?
        @messages = Current.user.reachable_messages.search(query).last(100)
      else
        @messages = Message.none
      end
    end

    def query
      params[:q]&.gsub(/[^[:word:]]/, " ")
    end
end



================================================
FILE: app/controllers/sessions_controller.rb
================================================
class SessionsController < ApplicationController
  allow_unauthenticated_access only: %i[ new create ]
  rate_limit to: 10, within: 3.minutes, only: :create, with: -> { render_rejection :too_many_requests }

  before_action :ensure_user_exists, only: :new

  def new
  end

  def create
    if user = User.active.authenticate_by(email_address: params[:email_address], password: params[:password])
      start_new_session_for user
      redirect_to post_authenticating_url
    else
      render_rejection :unauthorized
    end
  end

  def destroy
    remove_push_subscription
    reset_authentication
    redirect_to root_url
  end

  private
    def ensure_user_exists
      redirect_to first_run_url if User.none?
    end

    def render_rejection(status)
      flash.now[:alert] = "Too many requests or unauthorized."
      render :new, status: status
    end

    def remove_push_subscription
      if endpoint = params[:push_subscription_endpoint]
        Push::Subscription.destroy_by(endpoint: endpoint, user_id: Current.user.id)
      end
    end
end



================================================
FILE: app/controllers/unfurl_links_controller.rb
================================================
class UnfurlLinksController < ApplicationController
  def create
    opengraph = Opengraph::Metadata.from_url(url_param)

    if opengraph.valid?
      render json: opengraph
    else
      head :no_content
    end
  end

  private
    def url_param
      params.require(:url)
    end
end



================================================
FILE: app/controllers/users_controller.rb
================================================
class UsersController < ApplicationController
  require_unauthenticated_access only: %i[ new create ]

  before_action :set_user, only: :show
  before_action :verify_join_code, only: %i[ new create ]

  def new
    @user = User.new
  end

  def create
    @user = User.create!(user_params)
    start_new_session_for @user
    redirect_to root_url
  rescue ActiveRecord::RecordNotUnique
    redirect_to new_session_url(email_address: user_params[:email_address])
  end

  def show
  end

  private
    def set_user
      @user = User.find(params[:id])
    end

    def verify_join_code
      head :not_found if Current.account.join_code != params[:join_code]
    end

    def user_params
      params.require(:user).permit(:name, :avatar, :email_address, :password)
    end
end



================================================
FILE: app/controllers/welcome_controller.rb
================================================
class WelcomeController < ApplicationController
  def show
    if Current.user.rooms.any?
      redirect_to room_url(last_room_visited)
    else
      render
    end
  end
end



================================================
FILE: app/controllers/accounts/bots_controller.rb
================================================
class Accounts::BotsController < ApplicationController
  before_action :ensure_can_administer
  before_action :set_bot, only: %i[ edit update destroy ]

  def index
    @bots = User.active_bots.ordered
  end

  def new
    @bot = User.active_bots.new
  end

  def create
    User.create_bot! bot_params
    redirect_to account_bots_url
  end

  def edit
  end

  def update
    @bot.update_bot! bot_params
    redirect_to account_bots_url
  end

  def destroy
    @bot.deactivate
    redirect_to account_bots_url
  end

  private
    def set_bot
      @bot = User.active_bots.find(params[:id])
    end

    def bot_params
      params.require(:user).permit(:name, :avatar, :webhook_url)
    end
end



================================================
FILE: app/controllers/accounts/custom_styles_controller.rb
================================================
class Accounts::CustomStylesController < ApplicationController
  before_action :ensure_can_administer, :set_account

  def edit
  end

  def update
    @account.update!(account_params)
    redirect_to edit_account_custom_styles_url, notice: "✓"
  end

  private
    def set_account
      @account = Current.account
    end

    def account_params
      params.require(:account).permit(:custom_styles)
    end
end



================================================
FILE: app/controllers/accounts/join_codes_controller.rb
================================================
class Accounts::JoinCodesController < ApplicationController
  before_action :ensure_can_administer

  def create
    Current.account.reset_join_code
    redirect_to edit_account_url
  end
end



================================================
FILE: app/controllers/accounts/logos_controller.rb
================================================
class Accounts::LogosController < ApplicationController
  include ActiveStorage::Streaming, ActionView::Helpers::AssetUrlHelper

  allow_unauthenticated_access only: :show
  before_action :ensure_can_administer, only: :destroy

  def show
    if stale?(etag: Current.account)
      expires_in 5.minutes, public: true, stale_while_revalidate: 1.week

      if Current.account&.logo&.attached?
        logo = Current.account.logo.variant(logo_variant).processed
        send_png_file ActiveStorage::Blob.service.path_for(logo.key)
      else
        send_stock_icon
      end
    end
  end

  def destroy
    Current.account.logo.destroy
    redirect_to edit_account_url
  end

  private
    LARGE_SQUARE_PNG_VARIANT = { resize_to_limit: [ 512, 512 ], format: :png }
    SMALL_SQUARE_PNG_VARIANT = { resize_to_limit: [ 192, 192 ], format: :png }

    def send_png_file(path)
      send_file path, content_type: "image/png", disposition: :inline
    end

    def send_stock_icon
      if small_logo?
        send_png_file logo_path("app-icon-192.png")
      else
        send_png_file logo_path("app-icon.png")
      end
    end

    def logo_variant
      small_logo? ? SMALL_SQUARE_PNG_VARIANT : LARGE_SQUARE_PNG_VARIANT
    end

    def small_logo?
      params[:size] == "small"
    end

    def logo_path(filename)
      Rails.root.join("app/assets/images/logos/#{filename}")
    end
end



================================================
FILE: app/controllers/accounts/users_controller.rb
================================================
class Accounts::UsersController < ApplicationController
  before_action :ensure_can_administer, :set_user, only: %i[ update destroy ]

  def index
    set_page_and_extract_portion_from User.active.ordered.without_bots, per_page: 500
  end

  def update
    @user.update(role_params)
    redirect_to edit_account_url
  end

  def destroy
    @user.deactivate
    redirect_to edit_account_url
  end

  private
    def set_user
      @user = User.active.find(params[:user_id] || params[:id])
    end

    def role_params
      { role: params.require(:user)[:role].presence_in(%w[ member administrator ]) || "member" }
    end
end



================================================
FILE: app/controllers/accounts/bots/keys_controller.rb
================================================
class Accounts::Bots::KeysController < ApplicationController
  before_action :ensure_can_administer

  def update
    User.active_bots.find(params[:bot_id]).reset_bot_key
    redirect_to account_bots_url
  end
end



================================================
FILE: app/controllers/autocompletable/users_controller.rb
================================================
class Autocompletable::UsersController < ApplicationController
  def index
    set_page_and_extract_portion_from find_autocompletable_users.with_attached_avatar.ordered, per_page: 20
  end

  private
    def find_autocompletable_users
      params[:query].present? ? users_scope.active.filtered_by(params[:query]) : users_scope.active
    end

    def users_scope
      params[:room_id].present? ? Current.user.rooms.find(params[:room_id]).users : User.all
    end
end



================================================
FILE: app/controllers/concerns/allow_browser.rb
================================================
module AllowBrowser
  extend ActiveSupport::Concern

  VERSIONS = { safari: 17.2, chrome: 120, firefox: 121, opera: 104, ie: false }

  included do
    allow_browser versions: VERSIONS, block: -> { render template: "sessions/incompatible_browser" }
  end
end



================================================
FILE: app/controllers/concerns/authentication.rb
================================================
module Authentication
  extend ActiveSupport::Concern
  include SessionLookup

  included do
    before_action :require_authentication
    before_action :deny_bots
    helper_method :signed_in?

    protect_from_forgery with: :exception, unless: -> { authenticated_by.bot_key? }
  end

  class_methods do
    def allow_unauthenticated_access(**options)
      skip_before_action :require_authentication, **options
    end

    def allow_bot_access(**options)
      skip_before_action :deny_bots, **options
    end

    def require_unauthenticated_access(**options)
      skip_before_action :require_authentication, **options
      before_action :restore_authentication, :redirect_signed_in_user_to_root, **options
    end
  end

  private
    def signed_in?
      Current.user.present?
    end

    def require_authentication
      restore_authentication || bot_authentication || request_authentication
    end

    def restore_authentication
      if session = find_session_by_cookie
        resume_session session
      end
    end

    def bot_authentication
      if params[:bot_key].present? && bot = User.authenticate_bot(params[:bot_key].strip)
        Current.user = bot
        set_authenticated_by(:bot_key)
      end
    end

    def request_authentication
      session[:return_to_after_authenticating] = request.url
      redirect_to new_session_url
    end

    def redirect_signed_in_user_to_root
      redirect_to root_url if signed_in?
    end

    def start_new_session_for(user)
      user.sessions.start!(user_agent: request.user_agent, ip_address: request.remote_ip).tap do |session|
        authenticated_as session
      end
    end

    def resume_session(session)
      session.resume user_agent: request.user_agent, ip_address: request.remote_ip
      authenticated_as session
    end

    def authenticated_as(session)
      Current.user = session.user
      set_authenticated_by(:session)
      cookies.signed.permanent[:session_token] = { value: session.token, httponly: true, same_site: :lax }
    end

    def post_authenticating_url
      session.delete(:return_to_after_authenticating) || root_url
    end

    def reset_authentication
      cookies.delete(:session_token)
    end

    def deny_bots
      head :forbidden if authenticated_by.bot_key?
    end

    def set_authenticated_by(method)
      @authenticated_by = method.to_s.inquiry
    end

    def authenticated_by
      @authenticated_by ||= "".inquiry
    end
end



================================================
FILE: app/controllers/concerns/authorization.rb
================================================
module Authorization
  private
    def ensure_can_administer
      head :forbidden unless Current.user.can_administer?
    end
end



================================================
FILE: app/controllers/concerns/room_scoped.rb
================================================
module RoomScoped
  extend ActiveSupport::Concern

  included do
    before_action :set_room
  end

  private
    def set_room
      @membership = Current.user.memberships.find_by!(room_id: params[:room_id])
      @room = @membership.room
    end
end



================================================
FILE: app/controllers/concerns/set_current_request.rb
================================================
module SetCurrentRequest
  extend ActiveSupport::Concern

  included do
    before_action do
      Current.request = request
    end
  end

  def default_url_options
    { host: Current.request_host, protocol: Current.request_protocol }.compact_blank
  end
end



================================================
FILE: app/controllers/concerns/set_platform.rb
================================================
module SetPlatform
  extend ActiveSupport::Concern

  included do
    helper_method :platform
  end

  private
    def platform
      @platform ||= ApplicationPlatform.new(request.user_agent)
    end
end



================================================
FILE: app/controllers/concerns/tracked_room_visit.rb
================================================
module TrackedRoomVisit
  extend ActiveSupport::Concern

  included do
    helper_method :last_room_visited
  end

  def remember_last_room_visited
    cookies.permanent[:last_room] = @room.id
  end

  def last_room_visited
    Current.user.rooms.find_by(id: cookies[:last_room]) || default_room
  end

  private
    def default_room
      Current.user.rooms.original
    end
end



================================================
FILE: app/controllers/concerns/version_headers.rb
================================================
module VersionHeaders
  extend ActiveSupport::Concern

  included do
    before_action :set_version_headers
  end

  private
    def set_version_headers
      response.headers["X-Version"] = Rails.application.config.app_version
      response.headers["X-Rev"] = Rails.application.config.git_revision
    end
end



================================================
FILE: app/controllers/concerns/authentication/session_lookup.rb
================================================
module Authentication::SessionLookup
  def find_session_by_cookie
    if token = cookies.signed[:session_token]
      Session.find_by(token: token)
    end
  end
end



================================================
FILE: app/controllers/messages/boosts_controller.rb
================================================
class Messages::BoostsController < ApplicationController
  before_action :set_message

  def index
  end

  def new
  end

  def create
    @boost = @message.boosts.create!(boost_params)

    broadcast_create
    redirect_to message_boosts_url(@message)
  end

  def destroy
    @boost = Current.user.boosts.find(params[:id])
    @boost.destroy!

    broadcast_remove
  end

  private
    def set_message
      @message = Current.user.reachable_messages.find(params[:message_id])
    end

    def boost_params
      params.require(:boost).permit(:content)
    end

    def broadcast_create
      @boost.broadcast_append_to @boost.message.room, :messages,
        target: "boosts_message_#{@boost.message.client_message_id}", partial: "messages/boosts/boost", attributes: { maintain_scroll: true }
    end

    def broadcast_remove
      @boost.broadcast_remove_to @boost.message.room, :messages
    end
end



================================================
FILE: app/controllers/messages/by_bots_controller.rb
================================================
class Messages::ByBotsController < MessagesController
  allow_bot_access only: :create

  def create
    super
    head :created, location: message_url(@message)
  end

  private
    def message_params
      if params[:attachment]
        params.permit(:attachment)
      else
        reading(request.body) { |body| { body: body } }
      end
    end

    def reading(io)
      io.rewind
      yield io.read.force_encoding("UTF-8")
    ensure
      io.rewind
    end
end



================================================
FILE: app/controllers/rooms/closeds_controller.rb
================================================
class Rooms::ClosedsController < RoomsController
  before_action :set_room, only: %i[ show edit update ]
  before_action :ensure_can_administer, only: %i[ update ]
  before_action :remember_last_room_visited, only: :show
  before_action :force_room_type, only: %i[ edit update ]

  DEFAULT_ROOM_NAME = "New room"

  def show
    redirect_to room_url(@room)
  end

  def new
    @room  = Rooms::Closed.new(name: DEFAULT_ROOM_NAME)
    @users = User.active.ordered
  end

  def create
    room = Rooms::Closed.create_for(room_params, users: grantees)

    broadcast_create_room(room)
    redirect_to room_url(room)
  end

  def edit
    selected_user_ids = @room.users.pluck(:id)
    @selected_users, @unselected_users = User.active.ordered.partition { |user| selected_user_ids.include?(user.id) }
  end

  def update
    @room.update! room_params
    @room.memberships.revise(granted: grantees, revoked: revokees)

    broadcast_update_room
    redirect_to room_url(@room)
  end

  private
    # Allows us to edit an open room and turn it into a closed one on saving.
    def force_room_type
      @room = @room.becomes!(Rooms::Closed)
    end

    def grantees
      User.where(id: grantee_ids)
    end

    def revokees
      @room.users.where.not(id: grantee_ids)
    end

    def grantee_ids
      params.fetch(:user_ids, [])
    end

    def broadcast_create_room(room)
      each_user_and_html_for(room) do |user, html|
        broadcast_prepend_to user, :rooms, target: :shared_rooms, html: html
      end
    end

    def broadcast_update_room
      each_user_and_html_for(@room) do |user, html|
        broadcast_replace_to user, :rooms, target: [ @room, :list ], html: html
      end
    end

    def each_user_and_html_for(room)
      # Optimization to avoid rendering the same partial for every user
      html = render_to_string(partial: "users/sidebars/rooms/shared", locals: { room: room })

      room.users.each { |user| yield user, html }
    end
end



================================================
FILE: app/controllers/rooms/directs_controller.rb
================================================
class Rooms::DirectsController < RoomsController
  before_action :set_room, only: %i[ edit destroy ]
  def new
    @room = Rooms::Direct.new
  end

  def create
    room = Rooms::Direct.find_or_create_for(selected_users)

    broadcast_create_room(room)
    redirect_to room_url(room)
  end

  def edit
  end

  private
    def selected_users
      User.where(id: selected_users_ids.including(Current.user.id))
    end

    def selected_users_ids
      params.fetch(:user_ids, [])
    end

    def broadcast_create_room(room)
      room.memberships.each do |membership|
        membership.broadcast_prepend_to membership.user, :rooms, target: :direct_rooms, partial: "users/sidebars/rooms/direct"
      end
    end

    # All users in a direct room can administer it
    def ensure_can_administer
      true
    end
end



================================================
FILE: app/controllers/rooms/involvements_controller.rb
================================================
class Rooms::InvolvementsController < ApplicationController
  include RoomScoped

  before_action :ensure_can_administer, only: %i[ update ]

  def show
    @involvement = @membership.involvement
  end

  def update
    @membership.update! involvement: params[:involvement]

    broadcast_visibility_changes
    redirect_to room_involvement_url(@room)
  end

  private
    def broadcast_visibility_changes
      case
      when @room.direct?
        # Do nothing
      when @membership.involved_in_invisible?
        broadcast_remove_to @membership.user, :rooms, target: [ @room, :list ]
      when @membership.involvement_previously_was.inquiry.invisible?
        broadcast_prepend_to @membership.user, :rooms, target: :shared_rooms, partial: "users/sidebars/rooms/shared", locals: { room: @room }
      end
    end
end



================================================
FILE: app/controllers/rooms/opens_controller.rb
================================================
class Rooms::OpensController < RoomsController
  before_action :set_room, only: %i[ show edit update ]
  before_action :ensure_can_administer, only: %i[ update ]
  before_action :remember_last_room_visited, only: :show
  before_action :force_room_type, only: %i[ edit update ]

  DEFAULT_ROOM_NAME = "New room"

  def show
    redirect_to room_url(@room)
  end

  def new
    @room = Rooms::Open.new(name: DEFAULT_ROOM_NAME)
    @users = User.active.ordered
  end

  def create
    room = Rooms::Open.create_for(room_params, users: Current.user)

    broadcast_create_room(room)
    redirect_to room_url(room)
  end

  def edit
    @users = User.active.ordered
  end

  def update
    @room.update! room_params

    broadcast_update_room
    redirect_to room_url(@room)
  end

  private
    # Allows us to edit a closed room and turn it into an open one on saving.
    def force_room_type
      @room = @room.becomes!(Rooms::Open)
    end

    def broadcast_create_room(room)
      broadcast_prepend_to :rooms, target: :shared_rooms, partial: "users/sidebars/rooms/shared", locals: { room: room }
    end

    def broadcast_update_room
      broadcast_replace_to :rooms, target: [ @room, :list ], partial: "users/sidebars/rooms/shared", locals: { room: @room }
    end
end



================================================
FILE: app/controllers/rooms/refreshes_controller.rb
================================================
class Rooms::RefreshesController < ApplicationController
  include RoomScoped

  before_action :set_last_updated_at

  def show
    @new_messages = @room.messages.with_creator.page_created_since(@last_updated_at)
    @updated_messages = @room.messages.without(@new_messages).with_creator.page_updated_since(@last_updated_at)
  end

  private
    def set_last_updated_at
      @last_updated_at = Time.at(0, params[:since].to_i, :millisecond)
    end
end



================================================
FILE: app/controllers/sessions/transfers_controller.rb
================================================
class Sessions::TransfersController < ApplicationController
  allow_unauthenticated_access

  def show
  end

  def update
    if user = User.active.find_by_transfer_id(params[:id])
      start_new_session_for user
      redirect_to post_authenticating_url
    else
      head :bad_request
    end
  end
end



================================================
FILE: app/controllers/users/avatars_controller.rb
================================================
class Users::AvatarsController < ApplicationController
  include ActiveStorage::Streaming

  rescue_from(ActiveSupport::MessageVerifier::InvalidSignature) { head :not_found }

  def show
    @user = User.from_avatar_token(params[:user_id])

    if stale?(etag: @user)
      expires_in 30.minutes, public: true, stale_while_revalidate: 1.week

      if @user.avatar.attached?
        avatar_variant = @user.avatar.variant(SQUARE_WEBP_VARIANT).processed
        send_webp_blob_file avatar_variant.key
      elsif @user.bot?
        render_default_bot
      else
        render_initials
      end
    end
  end

  def destroy
    Current.user.avatar.destroy
    redirect_to user_profile_url
  end

  private
    SQUARE_WEBP_VARIANT = { resize_to_limit: [ 512, 512 ], format: :webp }

    def send_webp_blob_file(key)
      send_file ActiveStorage::Blob.service.path_for(key), content_type: "image/webp", disposition: :inline
    end

    def render_default_bot
      send_file Rails.root.join("app/assets/images/default-bot-avatar.svg"), content_type: "image/svg+xml", disposition: :inline
    end

    def render_initials
      render formats: :svg
    end
end



================================================
FILE: app/controllers/users/profiles_controller.rb
================================================
class Users::ProfilesController < ApplicationController
  before_action :set_user

  def show
    @direct_memberships, @shared_memberships =
      Current.user.memberships.with_ordered_room.partition { |m| m.room.direct? }
  end

  def update
    @user.update user_params
    redirect_to user_profile_url, notice: update_notice
  end

  private
    def set_user
      @user = Current.user
    end

    def user_params
      params.require(:user).permit(:name, :avatar, :email_address, :password, :bio).compact
    end

    def update_notice
      params[:user][:avatar] ? "It may take up to 30 minutes to change everywhere." : "✓"
    end
end



================================================
FILE: app/controllers/users/push_subscriptions_controller.rb
================================================
class Users::PushSubscriptionsController < ApplicationController
  before_action :set_push_subscriptions

  def index
  end

  def create
    if subscription = @push_subscriptions.find_by(push_subscription_params)
      subscription.touch
    else
      @push_subscriptions.create! push_subscription_params.merge(user_agent: request.user_agent)
    end

    head :ok
  end

  def destroy
    @push_subscriptions.destroy_by(id: params[:id])
    redirect_to user_push_subscriptions_url
  end

  private
    def set_push_subscriptions
      @push_subscriptions = Current.user.push_subscriptions
    end

    def push_subscription_params
      params.require(:push_subscription).permit(:endpoint, :p256dh_key, :auth_key)
    end
end



================================================
FILE: app/controllers/users/sidebars_controller.rb
================================================
class Users::SidebarsController < ApplicationController
  DIRECT_PLACEHOLDERS = 20

  def show
    all_memberships     = Current.user.memberships.visible.with_ordered_room
    @direct_memberships = extract_direct_memberships(all_memberships)
    @other_memberships  = all_memberships.without(@direct_memberships)

    @direct_placeholder_users = find_direct_placeholder_users
  end

  private
    def extract_direct_memberships(all_memberships)
      all_memberships.select { |m| m.room.direct? }.sort_by { |m| m.room.updated_at }.reverse
    end

    def find_direct_placeholder_users
      exclude_user_ids = user_ids_already_in_direct_rooms_with_current_user.including(Current.user.id)
      User.active.where.not(id: exclude_user_ids).order(:created_at).limit(DIRECT_PLACEHOLDERS - exclude_user_ids.count)
    end

    def user_ids_already_in_direct_rooms_with_current_user
      Membership.where(room_id: Current.user.rooms.directs.pluck(:id)).pluck(:user_id).uniq
    end
end



================================================
FILE: app/controllers/users/push_subscriptions/test_notifications_controller.rb
================================================
class Users::PushSubscriptions::TestNotificationsController < ApplicationController
  before_action :set_push_subscription

  def create
    @push_subscription.notification(title: "Campfire Test", body: Random.uuid, path: user_push_subscriptions_url).deliver
    redirect_to user_push_subscriptions_url
  end

  private
    def set_push_subscription
      @push_subscription = Current.user.push_subscriptions.find(params[:push_subscription_id])
    end
end



================================================
FILE: app/helpers/accounts_helper.rb
================================================
module AccountsHelper
  def account_logo_tag(style: nil)
    tag.figure image_tag(fresh_account_logo_path, alt: "Account logo", size: 300), class: "account-logo avatar #{style}"
  end
end



================================================
FILE: app/helpers/application_helper.rb
================================================
module ApplicationHelper
  def page_title_tag
    tag.title @page_title || "Campfire"
  end

  def current_user_meta_tags
    unless Current.user.nil?
      safe_join [
        tag(:meta, name: "current-user-id", content: Current.user.id),
        tag(:meta, name: "current-user-name", content: Current.user.name)
      ]
    end
  end

  def custom_styles_tag
    if custom_styles = Current.account&.custom_styles
      tag.style(custom_styles.to_s.html_safe, data: { turbo_track: "reload" })
    end
  end

  def body_classes
    [ @body_class, admin_body_class, account_logo_body_class ].compact.join(" ")
  end

  def link_back
    back_url = request.referrer
    back_url = root_path if back_url.nil? || back_url == request.url
    link_back_to back_url
  end

  def link_back_to(destination)
    link_to destination, class: "btn" do
      image_tag("arrow-left.svg", aria: { hidden: "true" }, size: 20) +
      tag.span("Go Back", class: "for-screen-reader")
    end
  end

  private
    def admin_body_class
      "admin" if Current.user&.can_administer?
    end

    def account_logo_body_class
      "account-has-logo" if Current.account&.logo&.attached?
    end
end



================================================
FILE: app/helpers/broadcasts_helper.rb
================================================
module BroadcastsHelper
  def broadcast_image_tag(image, options)
    image_tag(broadcast_image_path(image), options)
  end

  def broadcast_image_path(image)
    if image.is_a?(Symbol) || image.is_a?(String)
      image_path(image)
    else
      polymorphic_url(image, only_path: true)
    end
  end
end



================================================
FILE: app/helpers/clipboard_helper.rb
================================================
module ClipboardHelper
  def button_to_copy_to_clipboard(url, &)
    tag.button class: "btn", data: {
      controller: "copy-to-clipboard", action: "copy-to-clipboard#copy",
      copy_to_clipboard_success_class: "btn--success", copy_to_clipboard_content_value: url
    }, &
  end
end



================================================
FILE: app/helpers/content_filters.rb
================================================
module ContentFilters
  TextMessagePresentationFilters = ActionText::Content::Filters.new(RemoveSoloUnfurledLinkText, StyleUnfurledTwitterAvatars, SanitizeTags)
end



================================================
FILE: app/helpers/drop_target_helper.rb
================================================
module DropTargetHelper
  def drop_target_actions
    "dragenter->drop-target#dragenter dragover->drop-target#dragover drop->drop-target#drop"
  end
end



================================================
FILE: app/helpers/emoji_helper.rb
================================================
module EmojiHelper
  REACTIONS = {
    "👍" => "Thumbs up",
    "👏" => "Clapping",
    "👋" => "Waving hand",
    "💪" => "Muscle",
    "❤️" => "Red heart",
    "😂" => "Face with tears of joy",
    "🎉" => "Party popper",
    "🔥" => "Fire"
  }
end



================================================
FILE: app/helpers/forms_helper.rb
================================================
module FormsHelper
  def auto_submit_form_with(**attributes, &)
    data = attributes.delete(:data) || {}
    data[:controller] = "auto-submit #{data[:controller]}".strip

    form_with **attributes, data: data, &
  end
end



================================================
FILE: app/helpers/messages_helper.rb
================================================
module MessagesHelper
  def message_area_tag(room, &)
    tag.div id: "message-area", class: "message-area", contents: true, data: {
      controller: "messages presence drop-target",
      action: [ messages_actions, drop_target_actions, presence_actions ].join(" "),
      messages_first_of_day_class: "message--first-of-day",
      messages_formatted_class: "message--formatted",
      messages_me_class: "message--me",
      messages_mentioned_class: "message--mentioned",
      messages_threaded_class: "message--threaded",
      messages_page_url_value: room_messages_url(room)
    }, &
  end

  def messages_tag(room, &)
    tag.div id: dom_id(room, :messages), class: "messages", data: {
      controller: "maintain-scroll refresh-room",
      action: [ maintain_scroll_actions, refresh_room_actions ].join(" "),
      messages_target: "messages",
      refresh_room_loaded_at_value: room.updated_at.to_fs(:epoch),
      refresh_room_url_value: room_refresh_url(room)
    }, &
  end

  def message_tag(message, &)
    message_timestamp_milliseconds = message.created_at.to_fs(:epoch)

    tag.div id: dom_id(message),
      class: "message #{"message--emoji" if message.plain_text_body.all_emoji?}",
      data: {
        controller: "reply",
        user_id: message.creator_id,
        message_id: message.id,
        message_timestamp: message_timestamp_milliseconds,
        message_updated_at: message.updated_at.to_fs(:epoch),
        sort_value: message_timestamp_milliseconds,
        messages_target: "message",
        search_results_target: "message",
        refresh_room_target: "message",
        reply_composer_outlet: "#composer"
      }, &
  rescue Exception => e
    Sentry.capture_exception(e, extra: { message: message })
    Rails.logger.error "Exception while rendering message #{message.class.name}##{message.id}, failed with: #{e.class} `#{e.message}`"

    render "messages/unrenderable"
  end

  def message_timestamp(message, **attributes)
    local_datetime_tag message.created_at, **attributes
  end

  def message_presentation(message)
    case message.content_type
    when "attachment"
      message_attachment_presentation(message)
    when "sound"
      message_sound_presentation(message)
    else
      auto_link h(ContentFilters::TextMessagePresentationFilters.apply(message.body.body)), html: { target: "_blank" }
    end
  rescue Exception => e
    Sentry.capture_exception(e, extra: { message: message })
    Rails.logger.error "Exception while generating message representation for #{message.class.name}##{message.id}, failed with: #{e.class} `#{e.message}`"

    ""
  end

  private
    def messages_actions
      "turbo:before-stream-render@document->messages#beforeStreamRender keydown.up@document->messages#editMyLastMessage"
    end

    def maintain_scroll_actions
      "turbo:before-stream-render@document->maintain-scroll#beforeStreamRender"
    end

    def refresh_room_actions
      "visibilitychange@document->refresh-room#visibilityChanged online@window->refresh-room#online"
    end

    def presence_actions
      "visibilitychange@document->presence#visibilityChanged"
    end

    def message_attachment_presentation(message)
      Messages::AttachmentPresentation.new(message, context: self).render
    end

    def message_sound_presentation(message)
      sound = message.sound

      tag.div class: "sound", data: { controller: "sound", action: "messages:play->sound#play", sound_url_value: asset_path(sound.asset_path) } do
        play_button + (sound.image ? sound_image_tag(sound.image) : sound.text)
      end
    end

    def play_button
      tag.button "🔊", class: "btn btn--plain", data: { action: "sound#play" }
    end

    def sound_image_tag(image)
      image_tag image.asset_path, width: image.width, height: image.height, class: "align--middle"
    end

    def message_author_title(author)
      [ author.name, author.bio ].compact_blank.join(" – ")
    end
end



================================================
FILE: app/helpers/qr_code_helper.rb
================================================
module QrCodeHelper
  def link_to_zoom_qr_code(url, &)
    id = Base64.urlsafe_encode64(url)

    link_to qr_code_path(id), class: "btn", data: {
      lightbox_target: "image", action: "lightbox#open", lightbox_url_value: qr_code_path(id) }, &
  end
end



================================================
FILE: app/helpers/rich_text_helper.rb
================================================
module RichTextHelper
  def rich_text_data_actions
    default_actions =
      "trix-change->typing-notifications#start keydown->composer#submitByKeyboard"

    autocomplete_actions =
      "trix-focus->rich-autocomplete#focus trix-change->rich-autocomplete#search trix-blur->rich-autocomplete#blur"

    [ default_actions, autocomplete_actions ].join(" ")
  end
end



================================================
FILE: app/helpers/rooms_helper.rb
================================================
module RoomsHelper
  def link_to_room(room, **attributes, &)
    link_to room_path(room), **attributes, data: {
      rooms_list_target: "room", room_id: room.id, badge_dot_target: "unread", sorted_list_target: "item"
    }.merge(attributes.delete(:data) || {}), &
  end

  def link_to_edit_room(room, &)
    link_to \
      [ :edit, @room ],
      class: "btn",
      style: "view-transition-name: edit-room-#{@room.id}",
      data: { room_id: @room.id },
      &
  end

  def link_back_to_last_room_visited
    if last_room = last_room_visited
      link_back_to room_path(last_room)
    else
      link_back_to root_path
    end
  end

  def button_to_delete_room(room, url: nil)
    button_to url || room_url(room), method: :delete, class: "btn btn--negative max-width", aria: { label: "Delete #{room.name}" },
        data: { turbo_confirm: "Are you sure you want to delete this room and all messages in it? This can’t be undone." } do
      image_tag("trash.svg", aria: { hidden: "true" }, size: 20) +
      tag.span(room_display_name(room), class: "overflow-ellipsis")
    end
  end

  def button_to_jump_to_newest_message
    tag.button \
        class: "message-area__return-to-latest btn",
        data: { action: "messages#returnToLatest", messages_target: "latest" },
        hidden: true do
      image_tag("arrow-down.svg", aria: { hidden: "true" }, size: 20) +
      tag.span("Jump to newest message", class: "for-screen-reader")
    end
  end

  def submit_room_button_tag
    button_tag class: "btn btn--reversed txt-large center", type: "submit" do
      image_tag("check.svg", aria: { hidden: "true" }, size: 20) +
      tag.span("Save", class: "for-screen-reader")
    end
  end

  def composer_form_tag(room, &)
    form_with model: Message.new, url: room_messages_path(room),
      id: "composer", class: "margin-block flex-item-grow contain", data: composer_data_options(room), &
  end

  def room_display_name(room, for_user: Current.user)
    if room.direct?
      room.users.without(for_user).pluck(:name).to_sentence.presence || for_user&.name
    else
      room.name
    end
  end

  private
    def composer_data_options(room)
      {
        controller: "composer drop-target",
        action: composer_data_actions,
        composer_messages_outlet: "#message-area",
        composer_toolbar_class: "composer--rich-text", composer_room_id_value: room.id
      }
    end

    def composer_data_actions
      drag_and_drop_actions = "drop-target:drop@window->composer#dropFiles"

      trix_attachment_actions =
        "trix-file-accept->composer#preventAttachment refresh-room:online@window->composer#online"

      remaining_actions =
        "typing-notifications#stop paste->composer#pasteFiles turbo:submit-end->composer#submitEnd refresh-room:offline@window->composer#offline"

      [ drop_target_actions, drag_and_drop_actions, trix_attachment_actions, remaining_actions ].join(" ")
    end
end



================================================
FILE: app/helpers/searches_helper.rb
================================================
module SearchesHelper
  def search_results_tag(&)
    tag.div id: "search-results", class: "messages searches__results", data: {
      controller: "search-results",
      search_results_target: "messages",
      search_results_me_class: "message--me",
      search_results_threaded_class: "message--threaded",
      search_results_mentioned_class: "message--mentioned",
      search_results_formatted_class: "message--formatted"
    }, &
  end
end



================================================
FILE: app/helpers/time_helper.rb
================================================
module TimeHelper
  def local_datetime_tag(datetime, style: :time, **attributes)
    tag.time **attributes, datetime: datetime.iso8601, data: { local_time_target: style }
  end
end



================================================
FILE: app/helpers/translations_helper.rb
================================================
module TranslationsHelper
  TRANSLATIONS = {
    email_address:  { "🇺🇸": "Enter your email address", "🇪🇸": "Introduce tu correo electrónico", "🇫🇷": "Entrez votre adresse courriel", "🇮🇳": "अपना ईमेल पता दर्ज करें", "🇩🇪": "Geben Sie Ihre E-Mail-Adresse ein", "🇧🇷": "Insira seu endereço de email", "🇯🇵": "メールアドレスを入力してください" },
    password: { "🇺🇸": "Enter your password", "🇪🇸": "Introduce tu contraseña", "🇫🇷": "Saisissez votre mot de passe", "🇮🇳": "अपना पासवर्ड दर्ज करें", "🇩🇪": "Geben Sie Ihr Passwort ein", "🇧🇷": "Insira sua senha", "🇯🇵": "パスワードを入力してください" },
    update_password: { "🇺🇸": "Change password", "🇪🇸": "Cambiar contraseña", "🇫🇷": "Changer le mot de passe", "🇮🇳": "पासवर्ड बदलें", "🇩🇪": "Passwort ändern", "🇧🇷": "Alterar senha", "🇯🇵": "パスワードを変更" },
    user_name: { "🇺🇸": "Enter your name", "🇪🇸": "Introduce tu nombre", "🇫🇷": "Entrez votre nom", "🇮🇳": "अपना नाम दर्ज करें", "🇩🇪": "Geben Sie Ihren Namen ein", "🇧🇷": "Insira seu nome", "🇯🇵": "お名前を入力してください" },
    account_name: { "🇺🇸": "Name this account", "🇪🇸": "Nombre de esta cuenta", "🇫🇷": "Nommez ce compte", "🇮🇳": "इस खाते का नाम दें", "🇩🇪": "Benennen Sie dieses Konto", "🇧🇷": "Dê um nome a essa conta", "🇯🇵": "アカウントに名前を付ける" },
    room_name: { "🇺🇸": "Name the room", "🇪🇸": "Nombrar la sala", "🇫🇷": "Nommez la salle", "🇮🇳": "कमरे का नाम दें", "🇩🇪": "Geben Sie dem Raum einen Namen", "🇧🇷": "Dê um nome a essa sala", "🇯🇵": "ルームに名前を付ける" },
    invite_message: { "🇺🇸": "Welcome to Campfire. To invite some people to chat with you, share the join link below.", "🇪🇸": "Bienvenido a Campfire. Para invitar a algunas personas a chatear contigo, comparte el enlace de unión que se encuentra a continuación.", "🇫🇷": "Bienvenue sur Campfire. Pour inviter des personnes à discuter avec vous, partagez le lien pour rejoindre ci-dessous.", "🇮🇳": "Campfire में आपका स्वागत है। अधिक लोगों को चैट के लिए आमंत्रित करने के लिए, नीचे जुड़ने का लिंक साझा करें।", "🇩🇪": "Willkommen bei Campfire. Um einige Personen zum Chatten einzuladen, teilen Sie den unten stehenden Beitrittslink.", "🇧🇷": "Boas vindas ao Campfire. Para convidar pessoas para conversarem com você, compartilhe o link de convite abaixo.", "🇯🇵": "Campfireへようこそ。他の人をチャットに招待するには、下記の参加リンクを共有してください。" },
    incompatible_browser_messsage: { "🇺🇸": "Upgrade to a supported web browser. Campfire requires a modern web browser. Please use one of the browsers listed below and make sure auto-updates are enabled.", "🇪🇸": "Actualiza a un navegador web compatible. Campfire requiere un navegador web moderno. Utiliza uno de los navegadores listados a continuación y asegúrate de que las actualizaciones automáticas estén habilitadas.", "🇫🇷": "Mettez à jour vers un navigateur web pris en charge. Campfire nécessite un navigateur web moderne. Veuillez utiliser l'un des navigateurs répertoriés ci-dessous et assurez-vous que les mises à jour automatiques sont activées.", "🇮🇳": "समर्थित वेब ब्राउज़र में अपग्रेड करें। Campfire को एक आधुनिक वेब ब्राउज़र की आवश्यकता है। कृपया नीचे सूचीबद्ध ब्राउज़रों में से कोई एक का उपयोग करें और सुनिश्चित करें कि स्वचालित अपडेट्स सक्षम हैं।", "🇩🇪": "Aktualisieren Sie auf einen unterstützten Webbrowser. Campfire erfordert einen modernen Webbrowser. Verwenden Sie bitte einen der unten aufgeführten Browser und stellen Sie sicher, dass automatische Updates aktiviert sind.", "🇧🇷": "Atualize para um navegador compatível. O Campfire requer um navegador moderno. Por favor, use um dos navegadores listados abaixo e certifique-se de que as atualizações automáticas estão ativadas.", "🇯🇵": "サポートされたウェブブラウザーにアップグレードしてください。Campfireはモダンなウェブブラウザーが必要です。下記のブラウザーのいずれかを使用し、自動更新が有効になっていることを確認してください。" },
    bio: { "🇺🇸": "Enter a few words about yourself.", "🇪🇸": "Ingresa algunas palabras sobre ti mismo.", "🇫🇷": "Saisissez quelques mots à propos de vous-même.", "🇮🇳": "अपने बारे में कुछ शब्द लिखें.", "🇩🇪": "Geben Sie ein paar Worte über sich selbst ein.", "🇧🇷": "Insira alguma palavras sobre você.", "🇯🇵": "ご自分について簡単に記入してください。" },
    webhook_url: { "🇺🇸": "Webhook URL", "🇪🇸": "URL del Webhook", "🇫🇷": "URL du webhook", "🇮🇳": "वेबहुक URL", "🇩🇪": "Webhook-URL", "🇧🇷": "URL do Webhook", "🇯🇵": "Webhook URL" },
    chat_bots: { "🇺🇸": "Chat bots. With Chat bots, other sites and services can post updates directly to Campfire.", "🇪🇸": "Bots de chat. Con los bots de chat, otros sitios y servicios pueden publicar actualizaciones directamente en Campfire.", "🇫🇷": "Bots de discussion. Avec les bots de discussion, d'autres sites et services peuvent publier des mises à jour directement sur Campfire.", "🇮🇳": "चैट बॉट। चैट बॉट के साथ, अन्य साइटों और सेवाएं सीधे कैम्पफायर में अपडेट पोस्ट कर सकती हैं।", "🇩🇪": "Chat-Bots. Mit Chat-Bots können andere Websites und Dienste Updates direkt in Campfire veröffentlichen.", "🇧🇷": "Chat bots. Com Chat bots, outros sites e serviços podem postar atualizações diretamente no Campfire.", "🇯🇵": "チャットボット。チャットボットを使用すると、他のサイトやサービスがCampfireに直接更新情報を投稿できます。" },
    bot_name: { "🇺🇸": "Name the bot", "🇪🇸": "Nombrar al bot", "🇫🇷": "Nommer le bot", "🇮🇳": "बॉट का नाम दें", "🇩🇪": "Benenne den Bot", "🇧🇷": "Dê um nome ao bot", "🇯🇵": "ボットに名前を付ける" },
    custom_styles: { "🇺🇸": "Add custom CSS styles. Use Caution: you could break things.", "🇪🇸": "Agrega estilos CSS personalizados. Usa precaución: podrías romper cosas.", "🇫🇷": "Ajoutez des styles CSS personnalisés. Utilisez avec précaution : vous pourriez casser des choses.", "🇮🇳": "कस्टम CSS स्टाइल जोड़ें। सावधानी बरतें: आप चीज़ों को तोड़ सकते हैं।", "🇩🇪": "Fügen Sie benutzerdefinierte CSS-Stile hinzu. Vorsicht: Sie könnten Dinge kaputt machen.", "🇧🇷": "Adicione estilos CSS personalizados. Use com cuidado: você pode quebrar coisas.", "🇯🇵": "カスタムCSSスタイルを追加。注意: サイトが壊れる可能性があります。" }
  }

  def translations_for(translation_key)
    tag.dl(class: "language-list") do
      TRANSLATIONS[translation_key].map do |language, translation|
        concat tag.dt(language)
        concat tag.dd(translation, class: "margin-none")
      end
    end
  end

  def translation_button(translation_key)
    tag.details(class: "position-relative", data: { controller: "popup", action: "keydown.esc->popup#close toggle->popup#toggle click@document->popup#closeOnClickOutside", popup_orientation_top_class: "popup-orientation-top" }) do
      tag.summary(class: "btn", tabindex: -1) do
        concat image_tag("globe.svg", size: 20, aria: { hidden: "true" }, class: "color-icon")
        concat tag.span("Translate", class: "for-screen-reader")
      end +
      tag.div(class: "language-list-menu shadow", data: { popup_target: "menu" }) do
        translations_for(translation_key)
      end
    end
  end
end



================================================
FILE: app/helpers/users_helper.rb
================================================
module UsersHelper
  def button_to_direct_room_with(user)
    button_to rooms_directs_path(user_ids: [ user.id ]), class: "btn btn--primary full-width txt--large" do
      image_tag("messages.svg")
    end
  end
end



================================================
FILE: app/helpers/version_helper.rb
================================================
module VersionHelper
  def version_badge
    tag.span(Rails.application.config.app_version, class: "version-badge")
  end
end



================================================
FILE: app/helpers/content_filters/remove_solo_unfurled_link_text.rb
================================================
class ContentFilters::RemoveSoloUnfurledLinkText < ActionText::Content::Filter
  def applicable?
    normalize_tweet_url(solo_unfurled_url) == normalize_tweet_url(content.to_plain_text)
  end

  def apply
    fragment.replace("div") { |node| node.tap { |n| n.inner_html = unfurled_links.first.to_s } }
  end

  private
    TWITTER_DOMAINS = %w[ x.com twitter.com ]
    TWITTER_DOMAIN_MAPPING = { "x.com" => "twitter.com" }

    def solo_unfurled_url
      unfurled_links.first["href"] if unfurled_links.size == 1
    end

    def unfurled_links
      fragment.find_all("action-text-attachment[@content-type='#{ActionText::Attachment::OpengraphEmbed::OPENGRAPH_EMBED_CONTENT_TYPE}']")
    end

    def normalize_tweet_url(url)
      return url unless twitter_url?(url)

      uri = URI.parse(url)

      uri.dup.tap do |u|
        u.host = TWITTER_DOMAIN_MAPPING[uri.host&.downcase] || uri.host
        u.query = nil
      end.to_s
    rescue URI::InvalidURIError
      url
    end

    def twitter_url?(url)
      url.present? && TWITTER_DOMAINS.any? { |domain| url.strip.include?(domain) }
    end
end



================================================
FILE: app/helpers/content_filters/sanitize_tags.rb
================================================
class ContentFilters::SanitizeTags < ActionText::Content::Filter
  def applicable?
    true
  end

  def apply
    fragment.replace(not_allowed_tags_css_selector) { nil }
  end

  private
    ALLOWED_TAGS = %w[ a abbr acronym address b big blockquote br cite code dd del dfn div dl dt em h1 h2 h3 h4 h5 h6 hr i ins kbd li ol
      p pre samp small span strong sub sup time tt ul var ] + [ ActionText::Attachment.tag_name, "figure", "figcaption" ]

    def not_allowed_tags_css_selector
      ALLOWED_TAGS.map { |tag| ":not(#{tag})" }.join("")
    end
end



================================================
FILE: app/helpers/content_filters/style_unfurled_twitter_avatars.rb
================================================
class ContentFilters::StyleUnfurledTwitterAvatars < ActionText::Content::Filter
  def applicable?
    unfurled_twitter_avatars.present?
  end

  def apply
    fragment.update do |source|
      div = source.at_css("div")
      div["class"] = UNFURLED_TWITTER_AVATAR_CSS_CLASS
    end
  end

  private
    UNFURLED_TWITTER_AVATAR_CSS_CLASS = "cf-twitter-avatar"
    TWITTER_AVATAR_URL_PREFIX = "https://pbs.twimg.com/profile_images"

    def unfurled_twitter_avatars
      fragment.find_all("#{opengraph_css_selector}[url*='#{TWITTER_AVATAR_URL_PREFIX}']")
    end

    def opengraph_css_selector
      "action-text-attachment[@content-type='#{ActionText::Attachment::OpengraphEmbed::OPENGRAPH_EMBED_CONTENT_TYPE}']"
    end
end



================================================
FILE: app/helpers/messages/attachment_presentation.rb
================================================
class Messages::AttachmentPresentation
  def initialize(message, context:)
    @message, @context = message, context
  end

  def render
    if message.attachment.attached?
      if message.attachment.previewable? || message.attachment.variable?
        render_preview
      else
        render_link
      end
    end
  end

  private
    attr_reader :message, :context
    delegate :tag, :link_to, :broadcast_image_tag, :rails_blob_path, :url_for, to: :context

    def render_preview
      if message.attachment.video?
        video_preview_tag
      else
        lightboxed_image_preview_tag
      end
    end

    def video_preview_tag
      width, height = preview_dimensions

      inline_media_dimension_constraints(width, height) do
        tag.video \
          src: rails_blob_path(message.attachment), poster: url_for(message.attachment.preview(format: :webp, resize_to_limit: [ Message::THUMBNAIL_MAX_WIDTH, Message::THUMBNAIL_MAX_HEIGHT ])),
          controls: true, preload: :none, width: "100%", height: "100%", class: "message__attachment"
      end
    end

    def lightboxed_image_preview_tag
      width, height = preview_dimensions

      inline_media_dimension_constraints(width, height) do
        lightbox_link do
          broadcast_image_tag message.attachment.representation(:thumb), width: width, height: height, class: "message__attachment", loading: "lazy"
        end
      end
    end

    def inline_media_dimension_constraints(width, height, &)
      if width && height
        aspect_ratio = (width / height.to_f)

        tag.div class: "max-inline-size center flex overflow-clip", style: "width: #{width / 2}px; aspect-ratio: #{aspect_ratio};", &
      else
        tag.div class: "max-inline-size center overflow-clip", &
      end
    end

    def preview_dimensions
      width = message.attachment.metadata[:width]
      height = message.attachment.metadata[:height]

      case
      when width.nil? || height.nil?
        [ nil, nil ]
      when width <= Message::THUMBNAIL_MAX_WIDTH && height <= Message::THUMBNAIL_MAX_HEIGHT
        [ width, height ]
      else
        width_factor = Message::THUMBNAIL_MAX_WIDTH.to_f / width
        height_factor = Message::THUMBNAIL_MAX_HEIGHT.to_f / height
        scale_factor = [ width_factor, height_factor ].min

        [ width * scale_factor, height * scale_factor ]
      end
    end

    def render_link
      tag.div class: "flex-inline align-center gap-half" do
        broadcast_image_tag("common-file-text.svg", size: 22, class: "colorize--black", aria: { hidden: "true" }) +
          tag.span(filename) + download_link + share_button
      end
    end

    def lightbox_link(&)
      link_to rails_blob_path(message.attachment), class: "flex", data: {
        lightbox_target: "image", action: "lightbox#open", lightbox_url_value: download_url }, &
    end

    def download_link
      link_to download_url, class: "btn message__action-btn hide-in-ios-pwa", style: "--width: auto;" do
        broadcast_image_tag("download.svg", aria: { hidden: "true" }, size: 20) + tag.span("Download #{ filename }", class: "for-screen-reader")
      end
    end

    def share_button
      tag.button class: "btn message__action-btn", style: "--width: auto;", data: { controller: "web-share", action: "web-share#share", web_share_files_value: download_url } do
        broadcast_image_tag("share.svg", aria: { hidden: "true" }, size: 20) + tag.span("Share #{ filename }", class: "for-screen-reader")
      end
    end

    def filename
      message.attachment.filename.to_s
    end

    def download_url
      rails_blob_path message.attachment, disposition: "attachment", only_path: true
    end
end



================================================
FILE: app/helpers/rooms/involvements_helper.rb
================================================
module Rooms::InvolvementsHelper
  def turbo_frame_for_involvement_tag(room, &)
    turbo_frame_tag dom_id(room, :involvement), data: {
      controller: "turbo-frame", action: "notifications:ready@window->turbo-frame#load", turbo_frame_url_param: room_involvement_path(room)
    }, &
  end

  def button_to_change_involvement(room, involvement)
    button_to room_involvement_path(room, involvement: next_involvement_for(room, involvement: involvement)),
      method: :put,
      role: "checkbox", aria: { checked: true, labelledby: dom_id(room, :involvement_label) }, tabindex: 0,
      class: "btn #{involvement}" do
        image_tag("notification-bell-#{involvement}.svg", aria: { hidden: "true" }, size: 20) +
        tag.span(HUMANIZE_INVOLVEMENT[involvement], class: "for-screen-reader", id: dom_id(room, :involvement_label))
    end
  end

  private
    HUMANIZE_INVOLVEMENT = {
      "mentions" => "Notifying about @ mentions",
      "everything" => "Notifying about all messages",
      "nothing" => "Notifications are off",
      "invisible" => "Notifications are off and room invisible in sidebar"
    }

    SHARED_INVOLVEMENT_ORDER = %w[ mentions everything nothing invisible ]
    DIRECT_INVOLVEMENT_ORDER = %w[ everything nothing ]

    def next_involvement_for(room, involvement:)
      if room.direct?
        DIRECT_INVOLVEMENT_ORDER[DIRECT_INVOLVEMENT_ORDER.index(involvement) + 1] || DIRECT_INVOLVEMENT_ORDER.first
      else
        SHARED_INVOLVEMENT_ORDER[SHARED_INVOLVEMENT_ORDER.index(involvement) + 1] || SHARED_INVOLVEMENT_ORDER.first
      end
    end
end



================================================
FILE: app/helpers/users/avatars_helper.rb
================================================
require "zlib"

module Users::AvatarsHelper
  AVATAR_COLORS = %w[
    #AF2E1B #CC6324 #3B4B59 #BFA07A #ED8008 #ED3F1C #BF1B1B #736B1E #D07B53
    #736356 #AD1D1D #BF7C2A #C09C6F #698F9C #7C956B #5D618F #3B3633 #67695E
  ]

  def avatar_background_color(user)
    AVATAR_COLORS[Zlib.crc32(user.to_param) % AVATAR_COLORS.size]
  end

  def avatar_tag(user, **options)
    link_to user_path(user), title: user.title, class: "btn avatar", data: { turbo_frame: "_top" } do
      image_tag fresh_user_avatar_path(user), aria: { hidden: "true" }, size: 48, **options
    end
  end
end



================================================
FILE: app/helpers/users/filter_helper.rb
================================================
module Users::FilterHelper
  def user_filter_menu_tag(&)
    tag.menu class: "flex flex-column gap margin-none pad overflow-y constrain-height",
      data: { controller: "filter", filter_active_class: "filter--active", filter_selected_class: "selected" }, &
  end

  def user_filter_search_tag
    tag.input type: "search", id: "search", autocorrect: "off", autocomplete: "off", "data-1p-ignore": "true", class: "input input--transparent full-width", placeholder: "Filter…", data: { action: "input->filter#filter" }
  end
end



================================================
FILE: app/helpers/users/profiles_helper.rb
================================================
module Users::ProfilesHelper
  def profile_form_with(model, **params, &)
    form_with \
      model: @user, url: user_profile_path, method: :patch,
      data: { controller: "form" },
      **params,
      &
  end

  def profile_form_submit_button
    tag.button class: "btn btn--reversed center txt-large", type: "submit" do
      image_tag("check.svg", aria: { hidden: "true" }, size: 20) +
      tag.span("Save changes", class: "for-screen-reader")
    end
  end

  def web_share_session_button(url, title, text, &)
    tag.button class: "btn", hidden: true, data: {
      controller: "web-share", action: "web-share#share",
      web_share_url_value: url,
      web_share_text_value: text,
      web_share_title_value: title
    }, &
  end
end



================================================
FILE: app/helpers/users/sidebar_helper.rb
================================================
module Users::SidebarHelper
  def sidebar_turbo_frame_tag(src: nil, &)
    turbo_frame_tag :user_sidebar, src: src, target: "_top", data: {
      turbo_permanent: true,
      controller: "rooms-list read-rooms turbo-frame",
      rooms_list_unread_class: "unread",
      action: "presence:present@window->rooms-list#read read-rooms:read->rooms-list#read turbo:frame-load->rooms-list#loaded refresh-room:visible@window->turbo-frame#reload".html_safe # otherwise -> is escaped
    }, &
  end
end



================================================
FILE: app/javascript/application.js
================================================
// Configure your import map in config/importmap.rb. Read more: https://github.com/rails/importmap-rails
import "@hotwired/turbo-rails"
import "trix"
import "@rails/actiontext"
import "initializers"
import "controllers"



================================================
FILE: app/javascript/controllers/application.js
================================================
import { Application } from "@hotwired/stimulus"

const application = Application.start()

application.debug = false
window.Stimulus = application

export { application }



================================================
FILE: app/javascript/controllers/auto_submit_controller.js
================================================
import { Controller } from "@hotwired/stimulus"

export default class extends Controller {
  connect() {
    this.element.requestSubmit()
  }
}



================================================
FILE: app/javascript/controllers/autocomplete_controller.js
================================================
import { Controller } from "@hotwired/stimulus"
import AutocompleteHandler from "lib/autocomplete/autocomplete_handler"
import { debounce } from "helpers/timing_helpers"

export default class extends Controller {
  static targets = [ "select", "input" ]
  static values = { url: String }

  #handler

  initialize() {
    this.search = debounce(this.search.bind(this), 300)
  }

  connect() {
    this.#installHandler()
    this.inputTarget.focus()
  }

  disconnect() {
    this.#uninstallHandler()
  }

  search(event) {
    this.#handler.search(event.target.value)
  }

  didPressKey(event) {
    if (event.key == "Backspace" && this.inputTarget.value == "") {
      this.#handler.removeLastSelection()
    }
  }

  remove(event) {
    this.#handler.remove(event.target.closest("button").dataset.value)
    this.inputTarget.focus()
  }

  #installHandler() {
    this.#uninstallHandler()
    this.#handler = new AutocompleteHandler(this.inputTarget, this.selectTarget, this.urlValue)
  }

  #uninstallHandler() {
    this.#handler?.disconnect()
    this.#handler?.destroy()
  }
}



================================================
FILE: app/javascript/controllers/badge_dot_controller.js
================================================
import { Controller } from "@hotwired/stimulus"
import { onNextEventLoopTick } from "helpers/timing_helpers"

export default class extends Controller {
  static targets = [ "unread" ]
  static classes = [ "unread" ]

  connect() {
    onNextEventLoopTick(() => this.update())
  }

  update() {
    if (this.#available) {
      const unreadCount = this.#unreadCount

      if (unreadCount > 0) {
        navigator.setAppBadge(unreadCount)
      } else {
        navigator.clearAppBadge()
      }
    }
  }

  get #unreadCount() {
    return this.unreadTargets.filter(unreadTarget => unreadTarget.classList.contains(this.unreadClass)).length
  }

  get #available() {
    return "setAppBadge" in navigator
  }
}



================================================
FILE: app/javascript/controllers/boost_delete_controller.js
================================================
import { Controller } from "@hotwired/stimulus"

export default class extends Controller {
  static classes = [ "reveal", "perform" ]
  static targets = [ "button", "content" ]
  static values = { boosterId: Number }

  connect() {
    if (this.#currentUserIsBooster) {
      this.#setAccessibleAttributes()
    }
  }

  reveal() {
    if (this.#currentUserIsBooster) {
      this.element.classList.toggle(this.revealClass)
      this.buttonTarget.focus()
    }
  }

  perform() {
    this.element.classList.add(this.performClass)
  }

  #setAccessibleAttributes() {
    this.contentTarget.setAttribute('tabindex', '0')
    this.contentTarget.setAttribute('aria-describedby', 'delete_boost_accessible_label')
  }

  get #currentUserIsBooster() {
    return Current.user.id === this.boosterIdValue
  }
}



================================================
FILE: app/javascript/controllers/composer_controller.js
================================================
import { Controller } from "@hotwired/stimulus"
import FileUploader from "models/file_uploader"
import { onNextEventLoopTick, nextFrame } from "helpers/timing_helpers"
import { escapeHTML } from "helpers/dom_helpers"

export default class extends Controller {
  static classes = ["toolbar"]
  static targets = [ "clientid", "fields", "fileList", "text" ]
  static values = { roomId: Number }
  static outlets = [ "messages" ]

  #files = []

  connect() {
    if (!this.#usingTouchDevice) {
      onNextEventLoopTick(() => this.textTarget.focus())
    }
  }

  submit(event) {
    event.preventDefault()

    if (!this.fieldsTarget.disabled) {
      this.#submitFiles()
      this.#submitMessage()
      this.collapseToolbar()
      this.textTarget.focus()
    }
  }

  submitEnd(event) {
    if (!event.detail.success) {
      this.messagesOutlet.failPendingMessage(this.clientidTarget.value)
    }
  }

  toggleToolbar() {
    this.element.classList.toggle(this.toolbarClass)
    this.textTarget.focus()
  }

  collapseToolbar() {
    this.element.classList.remove(this.toolbarClass)
  }

  replaceMessageContent(content) {
    const editor = this.textTarget.editor

    editor.recordUndoEntry("Format reply")
    editor.setSelectedRange([0, editor.getDocument().toString().length])
    editor.deleteInDirection("forward")
    editor.insertHTML(content)
    editor.setSelectedRange([editor.getDocument().toString().length - 1])
  }

  submitByKeyboard(event) {
    const toolbarVisible = this.element.classList.contains(this.toolbarClass)
    const metaEnter = event.key == "Enter" && (event.metaKey || event.ctrlKey)
    const plainEnter = event.keyCode == 13 && !event.shiftKey && !event.isComposing

    if (!this.#usingTouchDevice && (metaEnter || (plainEnter && !toolbarVisible))) {
      this.submit(event)
    }
  }

  filePicked(event) {
    for (const file of event.target.files) {
      this.#files.push(file)
    }
    event.target.value = null
    this.#updateFileList()
  }

  fileUnpicked(event) {
    this.#files.splice(event.params.index, 1)
    this.#updateFileList()
  }

  pasteFiles(event) {
    if (event.clipboardData.files.length > 0) {
      event.preventDefault()
    }

    for (const file of event.clipboardData.files) {
      this.#files.push(file)
    }

    this.#updateFileList()
  }

  dropFiles({ detail: { files } }) {
    for (const file of files) {
      this.#files.push(file)
    }

    this.#updateFileList()
  }

  preventAttachment(event) {
    event.preventDefault()
  }

  online() {
    this.fieldsTarget.disabled = false
  }

  offline() {
    this.fieldsTarget.disabled = true
  }

  get #usingTouchDevice() {
    return 'ontouchstart' in window || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0;
  }

  async #submitMessage() {
    if (this.#validInput()) {
      const clientMessageId = this.#generateClientId()

      await this.messagesOutlet.insertPendingMessage(clientMessageId, this.textTarget)
      await nextFrame()

      this.clientidTarget.value = clientMessageId
      this.element.requestSubmit()
      this.#reset()
    }
  }

  #validInput() {
    return this.textTarget.textContent.trim().length > 0
  }

  async #submitFiles() {
    const files = this.#files

    this.#files = []
    this.#updateFileList()

    for (const file of files) {
      const clientMessageId = this.#generateClientId()
      const uploader = new FileUploader(file, this.element.action, clientMessageId, this.#uploadProgress.bind(this))

      const body = this.#pendingUploadProgress(file.name)
      await this.messagesOutlet.insertPendingMessage(clientMessageId, body)

      const resp = await uploader.upload()

      Turbo.renderStreamMessage(resp)
    }
  }

  #uploadProgress(percent, clientMessageId, file) {
    const body = this.#pendingUploadProgress(file.name, percent)
    this.messagesOutlet.updatePendingMessage(clientMessageId, body)
  }

  #generateClientId() {
    return Math.random().toString(36).slice(2)
  }

  #reset() {
    this.textTarget.value = ""
  }

  #updateFileList() {
    this.#files.sort((a, b) => a.name.localeCompare(b.name))

    const fileNodes = this.#files.map((file, index) => {
      const filename = file.name.split(".").slice(0, -1).join(".")
      const extension = file.name.split(".").pop()

      const node = document.createElement("button")
      node.setAttribute("type","button")
      node.setAttribute("style","gap: 0")
      node.dataset.action = "composer#fileUnpicked"
      node.dataset.composerIndexParam = index
      node.className = "btn btn--plain composer__file txt-normal position-relative unpad flex-column"
      node.innerHTML = file.type.match(/^image\/.*/) ? `<img role="presentation" class="flex-item-no-shrink composer__file-thumbnail" src="${URL.createObjectURL(file)}">` : `<span class="composer__file-thumbnail composer__file-thumbnail--common colorize--black"></span>`
      node.innerHTML += `<span class="pad-inline txt-small flex align-center max-width composer__file-caption"><span class="overflow-ellipsis">${escapeHTML(filename)}.</span><span class="flex-item-no-shrink">${escapeHTML(extension)}</span></span>`

      return node
    })

    this.fileListTarget.replaceChildren(...fileNodes)
  }

  #pendingUploadProgress(filename, percent=0) {
    return `
      <div class="message__pending-upload flex align-center gap" style="--percentage: ${percent}%">
        <div class="composer__file-thumbnail composer__file-thumbnail--common colorize--black borderless flex-item-no-shrink"></div>
        <div>${escapeHTML(filename)} - <span>${percent}%</span></div>
      </div>
    `
  }
}



================================================
FILE: app/javascript/controllers/copy_to_clipboard_controller.js
================================================
import { Controller } from "@hotwired/stimulus"

export default class extends Controller {
  static values = { content: String }
  static classes = [ "success" ]

  async copy(event) {
    event.preventDefault()
    this.reset()

    try {
      await navigator.clipboard.writeText(this.contentValue)
      this.element.classList.add(this.successClass)
    } catch {}
  }

  reset() {
    this.element.classList.remove(this.successClass)
    this.#forceReflow()
  }

  #forceReflow() {
    this.element.offsetWidth
  }
}



================================================
FILE: app/javascript/controllers/drop_target_controller.js
================================================
import { Controller } from "@hotwired/stimulus"

export default class extends Controller {
  dragenter(event) {
    event.preventDefault()
  }

  dragover(event) {
    event.preventDefault()
    event.dataTransfer.dropEffect = "copy"
  }

  drop(event) {
    event.preventDefault()
    this.dispatch("drop", { detail: { files: event.dataTransfer.files }})
  }
}



================================================
FILE: app/javascript/controllers/element_removal_controller.js
================================================
import { Controller } from "@hotwired/stimulus"

export default class extends Controller {
  remove() {
    this.element.remove()
  }
}



================================================
FILE: app/javascript/controllers/filter_controller.js
================================================
import { Controller } from "@hotwired/stimulus"
import { debounce } from "helpers/timing_helpers"

export default class extends Controller {
  static targets = [ "list" ]
  static classes = [ "active", "selected" ]

  initialize() {
    this.filter = debounce(this.filter.bind(this), 300)
  }

  connect() {
    this.element.focus()
  }

  filter(event) {
    this.#reset()

    if (event.target.value != "") {
      this.#selectMatches(event.target.value)
      this.#activate()
    }
  }

  #reset() {
    this.#deactivate()

    this.listTarget.querySelectorAll(`.${this.selectedClass}`).forEach((element) => {
      element.classList.remove(this.selectedClass)
    })
  }

  #activate() {
    this.listTarget.classList.add(this.activeClass)
  }

  #deactivate() {
    this.listTarget.classList.remove(this.activeClass)
  }

  #selectMatches(value) {
    this.listTarget.querySelectorAll(`[data-value*=${value.toLowerCase()}]`).forEach((element) => {
      element.classList.add(this.selectedClass)
    })
  }
}



================================================
FILE: app/javascript/controllers/form_controller.js
================================================
import { Controller } from "@hotwired/stimulus"

export default class extends Controller {
  static targets = [ "cancel" ]

  submit() {
    this.element.requestSubmit()
  }

  cancel() {
    this.cancelTarget?.click()
  }

  preventAttachment(event) {
    event.preventDefault()
  }
}



================================================
FILE: app/javascript/controllers/index.js
================================================
import { application } from "controllers/application"

import { eagerLoadControllersFrom } from "@hotwired/stimulus-loading"
eagerLoadControllersFrom("controllers", application)



================================================
FILE: app/javascript/controllers/lightbox_controller.js
================================================
import { Controller } from "@hotwired/stimulus"

export default class extends Controller {
  static targets = [ "image", "dialog", "zoomedImage", "download", "share" ]

  open(event) {
    event.preventDefault()

    this.dialogTarget.showModal()
    this.#set(event.target.closest("a"))
  }

  reset() {
    this.zoomedImageTarget.src = ""
    this.downloadTarget.href = ""
    this.shareTarget.dataset.webShareFilesValue = "";
  }

  #set(target) {
    this.zoomedImageTarget.src = target.href
    this.downloadTarget.href = target.dataset.lightboxUrlValue;
    this.shareTarget.dataset.webShareFilesValue = target.dataset.lightboxUrlValue;
  }
}



================================================
FILE: app/javascript/controllers/local_time_controller.js
================================================
import { Controller } from "@hotwired/stimulus"

export default class extends Controller {
  static targets = [ "time", "date", "datetime" ]

  initialize() {
    this.timeFormatter = new Intl.DateTimeFormat(undefined, { timeStyle: "short" })
    this.dateFormatter = new Intl.DateTimeFormat(undefined, { dateStyle: "long" })
    this.dateTimeFormatter = new Intl.DateTimeFormat(undefined, { timeStyle: "short", dateStyle: "short" })
  }

  timeTargetConnected(target) {
    this.#formatTime(this.timeFormatter, target)
  }

  dateTargetConnected(target) {
    this.#formatTime(this.dateFormatter, target)
  }

  datetimeTargetConnected(target) {
    this.#formatTime(this.dateTimeFormatter, target)
  }

  #formatTime(formatter, target) {
    const dt = new Date(target.getAttribute("datetime"))
    target.textContent = formatter.format(dt)
    target.title = this.dateTimeFormatter.format(dt)
  }
}



================================================
FILE: app/javascript/controllers/maintain_scroll_controller.js
================================================
import { Controller } from "@hotwired/stimulus"
import ScrollManager from "models/scroll_manager"

export default class extends Controller {
  #scrollManager

  connect() {
    this.#scrollManager = new ScrollManager(this.element)
  }

  // Actions

  beforeStreamRender(event) {
    const shouldKeepScroll = event.detail.newStream.hasAttribute("maintain_scroll")
    const render = event.detail.render
    const target = event.detail.newStream.getAttribute("target")
    const targetElement = document.getElementById(target)

    if (this.element.contains(targetElement) && shouldKeepScroll) {
      const top = this.#isAboveFold(targetElement)
      event.detail.render = async (streamElement) => {
        this.#scrollManager.keepScroll(top, () => render(streamElement))
      }
    }
  }

  // Internal

  #isAboveFold(element) {
    return element.getBoundingClientRect().top < this.element.clientHeight
  }
}



================================================
FILE: app/javascript/controllers/messages_controller.js
================================================
import { Controller } from "@hotwired/stimulus"
import { nextEventLoopTick } from "helpers/timing_helpers"
import ClientMessage from "models/client_message"
import MessageFormatter, { ThreadStyle } from "models/message_formatter"
import MessagePaginator from "models/message_paginator"
import ScrollManager from "models/scroll_manager"

export default class extends Controller {
  static targets = [ "latest", "message", "body", "messages", "template" ]
  static classes = [ "firstOfDay", "formatted", "me", "mentioned", "threaded" ]
  static values = { pageUrl: String }

  #clientMessage
  #paginator
  #formatter
  #scrollManager

  // Lifecycle

  initialize() {
    this.#formatter = new MessageFormatter(Current.user.id, {
      firstOfDay: this.firstOfDayClass,
      formatted: this.formattedClass,
      me: this.meClass,
      mentioned: this.mentionedClass,
      threaded: this.threadedClass,
    })
  }

  connect() {
    this.#clientMessage = new ClientMessage(this.templateTarget)
    this.#paginator = new MessagePaginator(this.messagesTarget, this.pageUrlValue, this.#formatter, this.#allContentViewed.bind(this))
    this.#scrollManager = new ScrollManager(this.messagesTarget)

    if (this.#hasSearchResult) {
      this.#highlightSearchResult()
    } else {
      this.#scrollManager.autoscroll(true)
    }

    this.#paginator.monitor()
  }

  disconnect() {
    this.#paginator.disconnect()
  }

  messageTargetConnected(target) {
    this.#formatter.format(target, ThreadStyle.thread)
  }

  bodyTargetConnected(target) {
    this.#formatter.formatBody(target)
  }

  // Actions

  async beforeStreamRender(event) {
    const target = event.detail.newStream.getAttribute("target")

    if (target === this.messagesTarget.id) {
      const render = event.detail.render
      const upToDate = this.#paginator.upToDate

      if (upToDate) {
        event.detail.render = async (streamElement) => {
          const didScroll = await this.#scrollManager.autoscroll(false, async () => {
            await render(streamElement)
            await nextEventLoopTick()

            this.#positionLastMessage()
            this.#playSoundForLastMessage()
            this.#paginator.trimExcessMessages(true)
          })
          if (!didScroll) {
            this.latestTarget.hidden = false
          }
        }
      } else {
        this.latestTarget.hidden = false
      }
    }
  }

  async returnToLatest() {
    this.latestTarget.hidden = true
    await this.#ensureUpToDate()
    this.#scrollManager.autoscroll(true)
  }

  async editMyLastMessage() {
    const editorEmpty = document.querySelector("#composer trix-editor").matches(":empty")

    if (editorEmpty && this.#paginator.upToDate) {
      this.#myLastMessage?.querySelector(".message__edit-btn")?.click()
    }
  }


  // Outlet actions

  async insertPendingMessage(clientMessageId, node) {
    await this.#ensureUpToDate()

    return this.#scrollManager.autoscroll(true, async () => {
      const message = this.#clientMessage.render(clientMessageId, node)
      this.messagesTarget.insertAdjacentHTML("beforeend", message)
    })
  }

  updatePendingMessage(clientMessageId, body) {
    this.#clientMessage.update(clientMessageId, body)
  }

  failPendingMessage(clientMessageId) {
    this.#clientMessage.failed(clientMessageId)
  }

  // Callbacks

  #allContentViewed() {
    this.latestTarget.hidden = true
  }


  // Internal

  async #ensureUpToDate() {
    if (!this.#paginator.upToDate) {
      await this.#paginator.resetToLastPage()
    }
  }

  #highlightSearchResult() {
    const highlightId = location.pathname.split("@").pop()
    const highlightMessage = this.messagesTarget.querySelector(`.message[data-message-id="${highlightId}"]`)
    if (highlightMessage) {
      highlightMessage.classList.add("search-highlight")
      highlightMessage.scrollIntoView({ behavior: "instant", block: "center" })
    }

    this.#paginator.upToDate = false
  }

  get #hasSearchResult() {
    return location.pathname.includes("@")
  }

  get #lastMessage() {
    return this.messagesTarget.children[this.messagesTarget.children.length - 1]
  }

  get #myLastMessage() {
    const myMessages = this.messagesTarget.querySelectorAll(`.${this.meClass}`)
    return myMessages[myMessages.length - 1]
  }

  #positionLastMessage() {
    const followingMessage = this.#followingMessage(this.#lastMessage)

    if (followingMessage) {
      followingMessage.before(this.#lastMessage)
    }
  }

  #playSoundForLastMessage() {
    const soundTarget = this.#lastMessage.querySelector(".sound")

    if (soundTarget) {
      this.dispatch("play", { target: soundTarget })
    }
  }

  #followingMessage(message) {
    const messageSortValue = this.#sortValue(message)
    let followingMessage = null
    let previousMessage = message.previousElementSibling

    while (messageSortValue < this.#sortValue(previousMessage)) {
      followingMessage = previousMessage
      previousMessage = previousMessage.previousElementSibling;
    }

    return followingMessage
  }

  #sortValue(node) {
    return (node && parseInt(node.dataset.sortValue)) || 0
  }
}



================================================
FILE: app/javascript/controllers/notifications_controller.js
================================================
import { Controller } from "@hotwired/stimulus"
import { post } from "@rails/request.js"
import { pageIsTurboPreview } from "helpers/turbo_helpers"
import { onNextEventLoopTick } from "helpers/timing_helpers"
import { getCookie, setCookie } from "lib/cookie"

export default class extends Controller {
  static values = { subscriptionsUrl: String }
  static targets = [ "notAllowedNotice", "bell", "details" ]
  static classes = [ "attention" ]

  async connect() {
    if (!pageIsTurboPreview()) {
      if (window.notificationsPreviouslyReady) {
        onNextEventLoopTick(() => this.dispatch("ready"))
      } else {
        const firstTimeReady = await this.isEnabled()

        this.#pulseBellButton()

        if (firstTimeReady) {
          onNextEventLoopTick(() => this.dispatch("ready"))
          window.notificationsPreviouslyReady = true
        } else {
          this.#showBellAlert()
        }
      }
    }
  }

  async attemptToSubscribe() {
    if (this.#allowed) {
      const registration = await this.#serviceWorkerRegistration || await this.#registerServiceWorker()

      switch(Notification.permission) {
        case "denied":  { this.#revealNotAllowedNotice(); break }
        case "granted": { this.#subscribe(registration); break }
        case "default": { this.#requestPermissionAndSubscribe(registration) }
      }
    } else {
      this.#revealNotAllowedNotice()
    }

    this.#endFirstRun()
  }

  async isEnabled() {
    if (this.#allowed) {
      const registration = await this.#serviceWorkerRegistration
      const existingSubscription = await registration?.pushManager?.getSubscription()

      return Notification.permission == "granted" && registration && existingSubscription
    } else {
      return false
    }
  }

  get #allowed() {
    return navigator.serviceWorker && window.Notification
  }

  get #serviceWorkerRegistration() {
    return navigator.serviceWorker.getRegistration(window.location.origin)
  }

  #registerServiceWorker() {
    return navigator.serviceWorker.register("/service-worker.js")
  }

  #revealNotAllowedNotice() {
    this.notAllowedNoticeTarget.showModal()
    this.#openSingleOption()
  }

  #openSingleOption() {
    const visibleElements = this.detailsTargets.filter(item => !this.#isHidden(item))

    if (visibleElements.length === 1) {
      this.detailsTargets.forEach(item => item.toggleAttribute("open", item === visibleElements[0]))
    }
  }

  #showBellAlert() {
    this.bellTarget.querySelectorAll("img").forEach(img => img.toggleAttribute("hidden"))
  }

  #pulseBellButton() {
    if (!this.#hasSeenFirstRun) {
      this.bellTarget.classList.add(this.attentionClass)
    }
  }

  #endFirstRun() {
    this.bellTarget.classList.remove(this.attentionClass)
    this.#markFirstRunSeen()
  }

  async #subscribe(registration) {
    registration.pushManager
      .subscribe({ userVisibleOnly: true, applicationServerKey: this.#vapidPublicKey })
      .then(subscription => {
        this.#syncPushSubscription(subscription)
        this.dispatch("ready")
      })
  }

  async #syncPushSubscription(subscription) {
    const response = await post(this.subscriptionsUrlValue, { body: this.#extractJsonPayloadAsString(subscription), responseKind: "turbo-stream" })
    if (!response.ok) subscription.unsubscribe()
  }

  async #requestPermissionAndSubscribe(registration) {
    const permission = await Notification.requestPermission()
    if (permission === "granted") this.#subscribe(registration)
  }

  get #vapidPublicKey() {
    const encodedVapidPublicKey = document.querySelector('meta[name="vapid-public-key"]').content
    return this.#urlBase64ToUint8Array(encodedVapidPublicKey)
  }

  get #hasSeenFirstRun() {
    if (this.#isPWA) {
      return getCookie("notifications-pwa-first-run-seen")
    } else {
      return getCookie("notifications-first-run-seen")
    }
  }

  #markFirstRunSeen = (event) => {
    if (this.#isPWA) {
      setCookie("notifications-pwa-first-run-seen", true)
    } else {
      setCookie("notifications-first-run-seen", true)
    }
  }

  #extractJsonPayloadAsString(subscription) {
    const { endpoint, keys: { p256dh, auth } } = subscription.toJSON()
    return JSON.stringify({ push_subscription: { endpoint, p256dh_key: p256dh, auth_key: auth } })
  }

  // VAPID public key comes encoded as base64 but service worker registration needs it as a Uint8Array
  #urlBase64ToUint8Array(base64String) {
    const padding = "=".repeat((4 - base64String.length % 4) % 4)
    const base64 = (base64String + padding).replace(/-/g, "+").replace(/_/g, "/")

    const rawData = window.atob(base64)
    const outputArray = new Uint8Array(rawData.length)

    for (let i = 0; i < rawData.length; ++i) {
      outputArray[i] = rawData.charCodeAt(i)
    }

    return outputArray
  }

  #isHidden(item) {
    return (item.offsetParent === null)
  }

  get #isPWA() {
    return window.matchMedia("(display-mode: standalone)").matches
  }
}



================================================
FILE: app/javascript/controllers/popup_controller.js
================================================
import { Controller } from "@hotwired/stimulus"

const BOTTOM_THRESHOLD = 90

export default class extends Controller {
  static targets = [ "menu" ]
  static classes = [ "orientationTop" ]

  close() {
    this.element.open = false
  }

  toggle() {
    this.#orient()
  }

  closeOnClickOutside({ target }) {
    if (!this.element.contains(target)) this.close()
  }

  #orient() {
    this.element.classList.toggle(this.orientationTopClass, this.#distanceToBottom < BOTTOM_THRESHOLD)
    this.menuTarget.style.setProperty("--max-width", this.#maxWidth + "px")
  }

  get #distanceToBottom() {
    return window.innerHeight - this.#boundingClientRect.bottom
  }

  get #maxWidth() {
    return window.innerWidth - this.#boundingClientRect.left
  }

  get #boundingClientRect() {
    return this.menuTarget.getBoundingClientRect()
  }
}



================================================
FILE: app/javascript/controllers/presence_controller.js
================================================
import { Controller } from "@hotwired/stimulus"
import { cable } from "@hotwired/turbo-rails"
import { delay, nextFrame } from "helpers/timing_helpers"

const REFRESH_INTERVAL = 50 * 1000 // 50 seconds

// We delay transmitting visibility changes to ignore brief periods of invisibility,
// like switching to another tab and back
const VISIBILITY_CHANGE_DELAY = 5000 // 5 seconds

export default class extends Controller {
  async connect() {
    this.channel = await cable.subscribeTo({ channel: "PresenceChannel", room_id: Current.room.id }, {
      connected: this.#websocketConnected,
      disconnected: this.#websocketDisconnected
    })

    this.wasVisible = true

    await nextFrame()
    this.dispatch("present", { detail: { roomId: Current.room.id } })
  }

  disconnect() {
    this.#stopRefreshTimer()
    this.channel?.unsubscribe()
  }

  visibilityChanged = () => {
    if (this.#isVisible) {
      this.#visible()
    } else {
      this.#hidden()
    }
  }

  #websocketConnected = () => {
    this.connected = true
    this.#startRefreshTimer()
  }

  #websocketDisconnected = () => {
    this.connected = false
    this.#stopRefreshTimer()
  }

  #visible = async () => {
    await delay(VISIBILITY_CHANGE_DELAY)

    if (this.connected && this.#isVisible && !this.wasVisible) {
      this.channel.send({ action: "present" })
      this.#startRefreshTimer()
      this.wasVisible = true
    }
  }

  #hidden = async () => {
    await delay(VISIBILITY_CHANGE_DELAY)

    if (this.connected && this.wasVisible && !this.#isVisible) {
      this.#stopRefreshTimer()
      this.channel.send({ action: "absent" })
      this.wasVisible = false
    }
  }

  #startRefreshTimer = () => {
    this.refreshTimer ??= setInterval(this.#refresh, REFRESH_INTERVAL)
  }

  #stopRefreshTimer = () => {
    clearInterval(this.refreshTimer)
    this.refreshTimer = null
  }

  #refresh = () => {
    this.channel.send({ action: "refresh" })
  }

  get #isVisible() {
    return document.visibilityState === "visible"
  }
}



================================================
FILE: app/javascript/controllers/pwa_install_controller.js
================================================
import { Controller } from "@hotwired/stimulus"
import { getCookie, setCookie } from "lib/cookie"

export default class extends Controller {
  static classes = [ "prompting" ]

  connect() {
    if (this.#canInstall && !this.#isInstalledPWA) {
      window.addEventListener("beforeinstallprompt", this.#preventPrompt)
      window.addEventListener("appinstalled", this.#installed)
    }
  }

  promptInstall = () => {
    this.deferredPrompt.prompt()
  }

  #installed = () => {
    this.element.classList.remove(this.promptingClass)
  }

  #preventPrompt = (event) => {
    event.preventDefault()
    this.deferredPrompt = event;
    this.element.classList.add(this.promptingClass)
  }

  get #canInstall() {
    return "serviceWorker" in navigator
  }

  get #isInstalledPWA() {
    return window.matchMedia("(display-mode: standalone)").matches
  }
}



================================================
FILE: app/javascript/controllers/read_rooms_controller.js
================================================
import { Controller } from "@hotwired/stimulus"
import { cable } from "@hotwired/turbo-rails"
import { ignoringBriefDisconnects } from "helpers/dom_helpers"

export default class extends Controller {
  async connect() {
    this.channel ??= await cable.subscribeTo({ channel: "ReadRoomsChannel" }, {
      received: this.#read
    })
  }

  disconnect() {
    ignoringBriefDisconnects(this.element, () => {
      this.channel?.unsubscribe()
      this.channel = null
    })
  }

  #read = ({ room_id }) => {
    this.dispatch("read", { detail: { roomId: room_id } })
  }
}



================================================
FILE: app/javascript/controllers/refresh_room_controller.js
================================================
import { Controller } from "@hotwired/stimulus"
import { get } from "@rails/request.js"
import { cable } from "@hotwired/turbo-rails"
import { pageIsTurboPreview } from "helpers/turbo_helpers"

const OFFLINE_AFTER_DISCONNECTED_TIMEOUT = 5_000
const REFRESH_AFTER_HIDDEN_TIMEOUT = 60_000

export default class extends Controller {
  static targets = [ "message" ]
  static values = { loadedAt: Number, url: String, }

  #lastLoadedAt
  #offlineTimer = null
  #hiddenAt = null

  async connect() {
    if (!pageIsTurboPreview()) {
      this.#lastLoadedAt = this.loadedAtValue
      this.#channelDisconnected()

      this.channel = await cable.subscribeTo({ channel: "HeartbeatChannel" }, {
        connected: this.#channelConnected.bind(this),
        disconnected: this.#channelDisconnected.bind(this)
      })
    }
  }

  disconnect() {
    this.channel?.unsubscribe()
  }

  messageTargetConnected(target) {
    this.#lastLoadedAt = Math.max(this.#lastLoadedAt, target.dataset.messageUpdatedAt || 0)
  }

  visibilityChanged() {
    if (document.visibilityState === "visible") {
      if (this.#hiddenForTooLong()) {
        this.#refresh("visibility")
        this.dispatch("visible")
      }
      this.#hiddenAt = null
    } else {
      this.#hiddenAt = Date.now()
    }
  }

  online() {
    // Trigger reconnection attempt whenever the browser comes back
    // from being offline
    this.channel.consumer.connection.monitor.visibilityDidChange()
  }

  #channelConnected() {
    this.#refresh("connection")

    clearTimeout(this.#offlineTimer)
    this.dispatch("online", { target: window })
  }

  #channelDisconnected() {
    this.#offlineTimer = setTimeout(() => {
      this.dispatch("offline", { target: window })
    }, OFFLINE_AFTER_DISCONNECTED_TIMEOUT)
  }

  #refresh(reason) {
    get(this.urlValue, { query: { since: this.#lastLoadedAt, reason: reason }, responseKind: "turbo-stream" })
  }

  #hiddenForTooLong() {
    return this.#hiddenAt && Date.now() - this.#hiddenAt > REFRESH_AFTER_HIDDEN_TIMEOUT
  }
}



================================================
FILE: app/javascript/controllers/reply_controller.js
================================================
import { Controller } from "@hotwired/stimulus"

const unfurled_attachment_selector = ".og-embed"

export default class extends Controller {
  static targets = [ "body", "link", "author" ]
  static outlets = [ "composer" ]

  connect() {
    this.#formatLinkTargets()
  }

  reply() {
    const content = `<blockquote>${this.#bodyContent}</blockquote><cite>${this.authorTarget.innerHTML} ${this.#linkToOriginal}</cite><br>`
    this.composerOutlet.replaceMessageContent(content)
  }

  #formatLinkTargets() {
    this.bodyTarget.querySelectorAll("a").forEach(link => {
      const sameDomain = link.href.startsWith(window.location.origin)
      link.target = sameDomain ? "_top" : "_blank"
    })
  }

  get #bodyContent() {
    const body = this.bodyTarget.querySelector(".trix-content").cloneNode(true)
    return this.#stripMentionAttachments(this.#stripUnfurledAttachments(body)).innerHTML
  }

  #stripMentionAttachments(node) {
    node.querySelectorAll(".mention").forEach(mention => mention.outerHTML = mention.textContent.trim())
    return node
  }

  #stripUnfurledAttachments(node) {
    const firstUnfurledLink = node.querySelector(`${unfurled_attachment_selector} a`)?.href
    node.querySelectorAll(unfurled_attachment_selector).forEach(embed => embed.remove())

    // Use unfurled link as the content when the node has no additional text
    if (firstUnfurledLink && !node.textContent.trim()) node.textContent = firstUnfurledLink

    return node
  }

  get #linkToOriginal() {
    return `<a href="${this.linkTarget.href}">#</a>`
  }
}



================================================
FILE: app/javascript/controllers/rich_autocomplete_controller.js
================================================
import { Controller } from "@hotwired/stimulus"
import MentionsAutocompleteHandler from "lib/autocomplete/mentions_autocomplete_handler"
import { debounce } from "helpers/timing_helpers"

export default class extends Controller {
  static values = { url: String }

  initialize() {
    this.handlers = []
    this.search = debounce(this.search.bind(this), 300)
  }

  connect() {
    if (this.element == document.activeElement) {
      this.#installHandlers()
    }
  }

  focus(event) {
    this.#installHandlers()
  }

  search(event) {
    const content = this.editor.getDocument().toString()
    const position = this.editor.getPosition()
    this.handlers.forEach(handler => handler.updateWithContentAndPosition(content, position))
  }

  blur(event) {
    this.#uninstallHandlers()
  }

  #installHandlers() {
    this.#uninstallHandlers()
    this.handlers = [ new MentionsAutocompleteHandler(this.element, this.urlValue) ]
  }

  #uninstallHandlers() {
    this.handlers.forEach(handler => handler.destroy())
    this.handlers = []
  }

  get editor() {
    return this.element.editor
  }
}



================================================
FILE: app/javascript/controllers/rooms_list_controller.js
================================================
import { Controller } from "@hotwired/stimulus"
import { cable } from "@hotwired/turbo-rails"
import { ignoringBriefDisconnects } from "helpers/dom_helpers"

export default class extends Controller {
  static targets = [ "room" ]
  static classes = [ "unread" ]

  #disconnected = true

  async connect() {
    this.channel ??= await cable.subscribeTo({ channel: "UnreadRoomsChannel" }, {
      connected: this.#channelConnected.bind(this),
      disconnected: this.#channelDisconnected.bind(this),
      received: this.#unread.bind(this)
    })
  }

  disconnect() {
    ignoringBriefDisconnects(this.element, () => {
      this.channel?.unsubscribe()
      this.channel = null
    })
  }

  loaded() {
    this.read({ detail: { roomId: Current.room.id } })
  }

  read({ detail: { roomId } }) {
    const room = this.#findRoomTarget(roomId)

    if (room) {
      room.classList.remove(this.unreadClass)
      this.dispatch("read", { detail: { targetId: roomId } })
    }
  }

  #channelConnected() {
    if (this.#disconnected) {
      this.#disconnected = false
      this.element.reload()
    }
  }

  #channelDisconnected() {
    this.#disconnected = true
  }

  #unread({ roomId }) {
    const unreadRoom = this.#findRoomTarget(roomId)

    if (unreadRoom) {
      if (Current.room.id != roomId) {
        unreadRoom.classList.add(this.unreadClass)
      }

      this.dispatch("unread", { detail: { targetId: unreadRoom.id } })
    }
  }

  #findRoomTarget(roomId) {
    return this.roomTargets.find(roomTarget => roomTarget.dataset.roomId == roomId)
  }
}



================================================
FILE: app/javascript/controllers/scroll_into_view_controller.js
================================================
import { Controller } from "@hotwired/stimulus"
import { nextFrame } from "helpers/timing_helpers"

export default class extends Controller {
  async connect() {
    await nextFrame()
    this.element.scrollIntoView({ behavior: "smooth", block: "center" })
  }
}



================================================
FILE: app/javascript/controllers/search_results_controller.js
================================================
import { Controller } from "@hotwired/stimulus"
import MessageFormatter, { ThreadStyle } from "models/message_formatter"

export default class extends Controller {
  static targets = [ "message" ]
  static classes = [ "me", "threaded", "mentioned", "formatted" ]

  #formatter

  initialize() {
    this.#formatter = new MessageFormatter(Current.user.id, {
      formatted: this.formattedClass,
      me: this.meClass,
      mentioned: this.mentionedClass,
      threaded: this.threadedClass,
    })
  }

  connect() {
    this.element.scrollTo({ top: this.element.scrollHeight })
  }

  messageTargetConnected(target) {
    this.#formatter.format(target, ThreadStyle.none)
  }
}



================================================
FILE: app/javascript/controllers/sessions_controller.js
================================================
import { Controller } from "@hotwired/stimulus"

export default class extends Controller {
  static targets = [ "pushSubscriptionEndpoint" ]

  async logout(event) {
    await this.#unsubscribeFromWebPush()
    this.element.requestSubmit()
  }

  async #unsubscribeFromWebPush() {
    if ("serviceWorker" in navigator) {
      const registration = await navigator.serviceWorker.getRegistration(window.location.host)

      if (registration) {
        const subscription = await registration.pushManager.getSubscription()

        if (subscription) {
          this.pushSubscriptionEndpointTarget.value = subscription.endpoint
          await subscription.unsubscribe()
        }
      }
    }
  }
}



================================================
FILE: app/javascript/controllers/soft_keyboard_controller.js
================================================
import { Controller } from "@hotwired/stimulus"
import { nextEventNamed } from "helpers/timing_helpers"
import { isTouchDevice } from "helpers/navigator_helpers"

export default class extends Controller {
  static get shouldLoad() {
    return isTouchDevice()
  }

  // Use a fake input to trigger the soft keyboard on actions that load async content
  // See https://gist.github.com/cathyxz/73739c1bdea7d7011abb236541dc9aaa
  async open(event) {
    const fakeInput = this.#focusOnFakeInput()
    this.#removeOnFocusOut(fakeInput)
  }

  #focusOnFakeInput() {
    const fakeInput = document.createElement("input")

    fakeInput.setAttribute("type", "text")
    fakeInput.setAttribute("class", "input--invisible")

    this.element.appendChild(fakeInput)
    fakeInput.focus()

    return fakeInput
  }

  async #removeOnFocusOut(element) {
    await nextEventNamed("focusout", element)
    element.remove()
  }
}



================================================
FILE: app/javascript/controllers/sorted_list_controller.js
================================================
import { Controller } from "@hotwired/stimulus"
import { throttle } from "helpers/timing_helpers"

export default class extends Controller {
  static targets = [ "item" ]

  itemTargetConnected(target) {
    this.#throttledSort()
  }

  updateItem({ detail: { targetId }}) {
    const itemTargetForUpdate = this.itemTargets.find(itemTarget => itemTarget.id == targetId)

    if (itemTargetForUpdate) {
      if (itemTargetForUpdate.dataset.sortedListNumber) {
        itemTargetForUpdate.dataset.sortedListNumber = new Date().getTime()
      }

      this.sort()
    }
  }

  sort() {
    const sortedItemTargets = this.itemTargets.sort((a, b) => {
      if (a.dataset.sortedListNumber) {
        return b.dataset.sortedListNumber - a.dataset.sortedListNumber
      } else {
        return a.dataset.sortedListName.toLowerCase().localeCompare(b.dataset.sortedListName.toLowerCase())
      }
    })

    sortedItemTargets.forEach(item => this.element.appendChild(item))
  }

  #throttledSort = throttle(this.sort.bind(this))
}



================================================
FILE: app/javascript/controllers/sound_controller.js
================================================
import { Controller } from "@hotwired/stimulus"

export default class extends Controller {
  static values = { "url": String }

  play() {
    const sound = new Audio(this.urlValue)
    sound.play()
  }
}



================================================
FILE: app/javascript/controllers/toggle_class_controller.js
================================================
import { Controller } from "@hotwired/stimulus"

export default class extends Controller {
  static classes = [ "toggle" ]

  toggle() {
    this.element.classList.toggle(this.toggleClass)
  }
}



================================================
FILE: app/javascript/controllers/turbo_frame_controller.js
================================================
import { Controller } from "@hotwired/stimulus"
import { onNextEventLoopTick } from "helpers/timing_helpers"

export default class extends Controller {
  unpermanize() {
    delete this.element.dataset.turboPermanent
  }

  reload() {
    this.element.reload()
  }

  load({ params: { url }}) {
    onNextEventLoopTick(() => this.element.src = url)
  }
}



================================================
FILE: app/javascript/controllers/turbo_streaming_controller.js
================================================
import { Controller } from "@hotwired/stimulus"

// Unsubscribe a container from turbo streaming actions (by removing its id) can address timing jank
// when turbo streaming updates race against a full controller response.
export default class extends Controller {
  static targets = [ "container" ]

  unsubscribe() {
    this.containerTarget.removeAttribute("id")
  }
}



================================================
FILE: app/javascript/controllers/typing_notifications_controller.js
================================================
import { Controller } from "@hotwired/stimulus"
import { cable } from "@hotwired/turbo-rails"
import { throttle } from "helpers/timing_helpers"
import { pageIsTurboPreview } from "helpers/turbo_helpers"
import TypingTracker from "models/typing_tracker"

export default class extends Controller {
  static targets = [ "author", "indicator" ]
  static classes = [ "active" ]

  async connect() {
    if (!pageIsTurboPreview()) {
      this.tracker = new TypingTracker(this.#update.bind(this))

      this.channel = await cable.subscribeTo(
        { channel: "TypingNotificationsChannel", room_id: Current.room.id },
        { received: this.#received.bind(this) }
      )
    }
  }

  disconnect() {
    this.tracker?.close()
    this.channel?.unsubscribe()
  }

  start({ target }) {
    if (target.value) {
      this.#throttledSend("start")
    } else {
      this.#send("stop")
    }
  }

  stop() {
    this.#send("stop");
  }

  #received({ action, user }) {
    if (user.id !== Current.user.id) {
      if (action === "start") {
        this.tracker.add(user.name)
      } else {
        this.tracker.remove(user.name)
      }
    }
  }

  #send(action) {
    this.channel.send({ action })
  }

  #update(message) {
    this.authorTarget.textContent = message
    this.indicatorTarget.classList.toggle(this.activeClass, !!message)
  }

  #throttledSend = throttle(action => this.#send(action))
}



================================================
FILE: app/javascript/controllers/upload_preview_controller.js
================================================
import { Controller } from "@hotwired/stimulus"

export default class extends Controller {
  static targets = [ "image", "input" ]

  previewImage() {
    const file = this.inputTarget.files[0]

    if (file) {
      this.imageTarget.src = URL.createObjectURL(this.inputTarget.files[0]);
      this.imageTarget.onload = () => { URL.revokeObjectURL(this.imageTarget.src) }
    }
  }
}



================================================
FILE: app/javascript/controllers/web_share_controller.js
================================================
import { Controller } from "@hotwired/stimulus"

export default class extends Controller {
  static values = { title: String, text: String, url: String, files: String }

  connect() {
    this.element.hidden = !navigator.canShare
  }

  async share() {
    await navigator.share(await this.#getShareData())
  }

  async #getShareData() {
    const data = { title: this.titleValue, text: this.textValue }

    if (this.urlValue) {
      data.url = this.urlValue
    }

    if (this.filesValue) {
      data.files = [ await this.#getFileObject()]
    }

    return data;
  }

  async #getFileObject() {
    const response = await fetch(this.filesValue)
    const blob = await response.blob()
    const randomPrefix = `Campfire_${Math.random().toString(36).slice(2)}`
    const fileName = `${randomPrefix}.${blob.type.split('/').pop()}`

    return new File([ blob ], fileName, { type: blob.type })
  }
}



================================================
FILE: app/javascript/helpers/dom_helpers.js
================================================


export function scrollToBottom(container) {
  container.scrollTop = container.scrollHeight
}

export function escapeHTML(html) {
  const div = document.createElement("div")
  div.textContent = html
  return div.innerHTML
}

export function parseHTMLFragment(html) {
  const template = document.createElement("template")
  template.innerHTML = html
  return template.content
}

export function insertHTMLFragment(fragment, container, top) {
  if (top) {
    container.prepend(fragment)
  } else {
    container.append(fragment)
  }
}

export function ignoringBriefDisconnects(element, fn) {
  requestAnimationFrame(() => {
    if (!element.isConnected) fn()
  })
}

export function trimChildren(count, container, top) {
  const children = Array.from(container.children)
  const elements = top ? children.slice(0, count) : children.slice(-count)

  keepScroll(container, top, function() {
    for (const element of elements) {
      element.remove()
    }
  })
}

export async function keepScroll(container, top, fn) {
  pauseInertiaScroll(container)

  const scrollTop = container.scrollTop
  const scrollHeight = container.scrollHeight

  await fn()

  if (top) {
    container.scrollTop = scrollTop + (container.scrollHeight - scrollHeight)
  } else {
    container.scrollTop = scrollTop
  }
}

function pauseInertiaScroll(container) {
  container.style.overflow = "hidden"

  requestAnimationFrame(() => {
    container.style.overflow = ""
  })
}



================================================
FILE: app/javascript/helpers/navigator_helpers.js
================================================
export function isTouchDevice() {
  return "ontouchstart" in window && navigator.maxTouchPoints > 0
}



================================================
FILE: app/javascript/helpers/string_helpers.js
================================================
export function truncateString(string, length, omission = "…") {
  if (string.length <= length) {
    return string
  } else {
    return string.slice(0, length - omission.length) + omission
  }
}



================================================
FILE: app/javascript/helpers/timing_helpers.js
================================================
export function throttle(fn, delay = 1000) {
  let timeoutId = null

  return (...args) => {
    if (!timeoutId) {
      fn(...args)
      timeoutId = setTimeout(() => timeoutId = null, delay)
    }
  }
}

export function debounce(fn, delay = 1000) {
  let timeoutId = null

  return (...args) => {
    clearTimeout(timeoutId)
    timeoutId = setTimeout(() => fn.apply(this, args), delay)
  }
}

export function nextEventLoopTick() {
  return delay(0)
}

export function onNextEventLoopTick(callback) {
  setTimeout(callback, 0)
}

export function nextFrame() {
  return new Promise(requestAnimationFrame)
}

export function nextEventNamed(eventName, element = window) {
  return new Promise(resolve => element.addEventListener(eventName, resolve, { once: true }))
}

export function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms))
}



================================================
FILE: app/javascript/helpers/turbo_helpers.js
================================================
export function pageIsTurboPreview() {
  return document.documentElement.hasAttribute("data-turbo-preview")
}



================================================
FILE: app/javascript/initializers/autocomplete.js
================================================
import SuggestionSelectElement from "lib/autocomplete/custom_elements/suggestion_select"
import SuggestionOptionElement from "lib/autocomplete/custom_elements/suggestion_option"

customElements.define("suggestion-select", SuggestionSelectElement)
customElements.define("suggestion-option", SuggestionOptionElement)



================================================
FILE: app/javascript/initializers/current.js
================================================
class Current {
  get user() {
    const currentUserId = this.#extractContentFromMetaTag("current-user-id")

    if (currentUserId) {
      return { id: parseInt(currentUserId), name: this.#extractContentFromMetaTag("current-user-name") }
    }
  }

  get room() {
    const currentRoomId = this.#extractContentFromMetaTag("current-room-id")

    if (currentRoomId) {
      return { id: parseInt(currentRoomId) }
    }
  }

  #extractContentFromMetaTag(name) {
    return document.head.querySelector(`meta[name="${name}"]`)?.getAttribute("content")
  }
}

window.Current = new Current()



================================================
FILE: app/javascript/initializers/highlight.js
================================================
import hljs from "highlight.js"

import bash from "languages/bash"
import css from "languages/css"
import diff from "languages/diff"
import go from "languages/go"
import java from "languages/java"
import javascript from "languages/javascript"
import json from "languages/json"
import python from "languages/python"
import ruby from "languages/ruby"
import rust from "languages/rust"
import sql from "languages/sql"
import xml from "languages/xml"

hljs.registerLanguage("bash", bash)
hljs.registerLanguage("css", css)
hljs.registerLanguage("diff", diff)
hljs.registerLanguage("go", go)
hljs.registerLanguage("java", java)
hljs.registerLanguage("javascript", javascript)
hljs.registerLanguage("json", json)
hljs.registerLanguage("python", python)
hljs.registerLanguage("ruby", ruby)
hljs.registerLanguage("rust", rust)
hljs.registerLanguage("sql", sql)
hljs.registerLanguage("xml", xml)

window.hljs = hljs



================================================
FILE: app/javascript/initializers/index.js
================================================
import "initializers/autocomplete"
import "initializers/current"
import "initializers/rich_text"
import "initializers/highlight"



================================================
FILE: app/javascript/initializers/rich_text.js
================================================
import Unfurler from "lib/rich_text/unfurl/unfurler"

// Support a `cite` block for attribution links
Trix.config.blockAttributes.cite = {
  tagName: "cite",
  inheritable: false,
}

const unfurler = new Unfurler()
unfurler.install()



================================================
FILE: app/javascript/lib/cookie.js
================================================
export function getCookie(name) {
  const cookies = document.cookie ? document.cookie.split("; ") : []
  const prefix = `${encodeURIComponent(name)}=`
  const cookie = cookies.find(cookie => cookie.startsWith(prefix))

  if (cookie) {
    const value = cookie.split("=").slice(1).join("=")
    return value ? decodeURIComponent(value) : undefined
  }
}

const twentyYears = 20 * 365 * 24 * 60 * 60 * 1000

export function setCookie(name, value) {
  const body = [ name, value ].map(encodeURIComponent).join("=")
  const expires = new Date(Date.now() + twentyYears).toUTCString()
  const cookie = `${body}; path=/; expires=${expires}`
  document.cookie = cookie
}



================================================
FILE: app/javascript/lib/autocomplete/autocomplete_handler.js
================================================
import BaseAutocompleteHandler from "lib/autocomplete/base_autocomplete_handler"
import Selection from "lib/autocomplete/selection"

export default class extends BaseAutocompleteHandler {
  #selection

  constructor(element, select, url) {
    super(element, url)
    this.#selection = new Selection(select)
  }

  disconnect() {
    this.#selection.disconnect()
  }


  insertAutocompletable(autocompletable) {
    this.#selection.add(autocompletable.value, autocompletable.name, { avatarUrl: autocompletable.avatar_url })
    this.element.value = ""
  }

  get pattern() {
    return new RegExp(`^(.*?)$`)
  }

  remove(value) {
    this.#selection.remove(value)
  }

  removeLastSelection() {
    this.#selection.removeLast()
  }

  search(term) {
    super.updateWithContentAndPosition(term, 0)
  }

  setAutocompletables(autocompletables) {
    super.setAutocompletables(this.#filterSelectedAutocompletables(autocompletables))
  }

  #filterSelectedAutocompletables(autocompletables) {
    const selectedValues = this.#selection.values.concat(Current.user.id)
    return autocompletables.filter(autocompletable => !selectedValues.includes(autocompletable.value))
  }
}



================================================
FILE: app/javascript/lib/autocomplete/base_autocomplete_handler.js
================================================
import Collection from "lib/autocomplete/collection"
import SuggestionController from "lib/autocomplete/suggestion_controller"
import { generateUUID } from "lib/autocomplete/helpers"
import { Renderer } from "lib/autocomplete/renderer"

export default class BaseAutocompleteHandler {
  #autocompletables
  #url

  constructor(element, url) {
    this.element = element
    this.#url = url
    if (!this.element.id) { this.element.id = `autocomplete_${generateUUID()}` }
    this.suggestionController = new SuggestionController(this)
  }

  updateWithContentAndPosition(content, position) {
    if (this.suggestionController && this.shouldAutocompleteWithContentAndPosition(content, position)) {
      this.suggestionController.updateWithContentAndPosition(content, position)
    }
  }

  destroy() {
    this.#closeSuggestionController()
  }

  // Subclass methods

  get pattern() {
    return null
  }

  shouldAutocompleteWithContentAndPosition(content, position) {
    return true
  }

  getAutocompletable(value) {
    return this.#autocompletables.get(value)
  }

  autocompletablesMatchingQuery(query) {
    return this.#autocompletables.matchingQuery(query).toArray()
  }

  loadAutocompletables(query, callback) {
    const url = query ? this.#autocompletablesUrl(query) : this.#url

    this.#fetchAutocompletables(url).then((autocompletables) => {
      this.setAutocompletables(autocompletables)
      callback()
    })
  }

  setAutocompletables(autocompletables) {
    this.#autocompletables = new Collection(autocompletables)
  }

  // SuggestionController Delegate

  getSuggestionsIdentifier() {
    return `${this.element.id}_suggestions`
  }

  matchQueryAndTerminatorForWord(word) {
    if (!this.pattern) return

    const match = word.match(this.pattern)
    if (match) {
      return {
        query: match[1],
        terminator: match?.[2] || ""
      }
    }
  }

  getOffsetsAtPosition(position) {
    return this.element.getBoundingClientRect()
  }

  getResultsPlacement() {
    return this.#suggestionResultsPlacement
  }

  fetchResultsForQuery(query, callback) {
    this.loadAutocompletables(query, () => {
      const autocompletables = this.autocompletablesMatchingQuery(query)
      const html = new Renderer().renderAutocompletableSuggestions(autocompletables)
      callback(html)
    })
  }

  willCommitValueAtRangeWithTerminator(value, range, terminator) {
    const autocompletable = this.getAutocompletable(value)
    this.insertAutocompletable(autocompletable, range, terminator)
  }

  didShowResults(selectElement) {
    selectElement.classList.add("rich_text")
  }

  #autocompletablesUrl(query) {
    const separator = this.#url.includes('?') ? '&' : '?'
    return `${this.#url}${separator}query=${query}`
  }

  get #suggestionResultsPlacement() {
    return this.element.dataset.suggestionResultsPlacement
  }

  #closeSuggestionController() {
    if (!this.suggestionController) return

    if (this.suggestionController.active) {
      this.suggestionController.hideResults()
    } else {
      this.suggestionController.destroy()
      this.suggestionController = null
    }
  }

  #fetchAutocompletables(url) {
    if (url) {
      return fetch(url, { as: "json" }).then(response => response.json())
    } else {
      return Promise.resolve()
    }
  }
}



================================================
FILE: app/javascript/lib/autocomplete/collection.js
================================================
import { camelize, normalize, regexpForQuery, uniqueValues } from "lib/autocomplete/utils"

export default class AutocompletableCollection {
  #autocompletables
  #index

  constructor(autocompletables = [], options = {}) {
    this.#index = new Map()
    this.#autocompletables = new Array()

    Array.from(autocompletables).forEach((autocompletable) => {
      this.#index.set(this.#uniqueAutocompleteableKey(autocompletable), autocompletable)
    })

    this.#index.forEach(autocompletable => {
      this.#autocompletables.push(autocompletable)
    })

    if (options.sort !== false) {
      this.#autocompletables.sort(this.#compareAutocompletables)
    }
  }

  get(value) {
    return this.#index.get(value.toString())
  }

  has(value) {
    return this.#index.has(value.toString())
  }

  add(autocompletables = [], collectionOptions) {
    return new this.constructor(this.#autocompletables.concat(autocompletables), collectionOptions)
  }

  getValues() {
    return this.#autocompletables.map(autocompletable => autocompletable.value)
  }

  withValues(values = [], collectionOptions) {
    const autocompletables = values.map((value) => this.get(value)).filter(Boolean)
    return new this.constructor(autocompletables, collectionOptions)
  }

  withoutValues(values = [], collectionOptions) {
    const autocompletables = []
    this.#index.forEach(function(autocompletable, value) {
      const allGroupMembersAreAdded = autocompletable.type == "group" && autocompletable.value.split(",").every(id => values.includes(id))

      if (!values.includes(value) && !allGroupMembersAreAdded) {
        return autocompletables.push(autocompletable)
      }
    })
    return new this.constructor(autocompletables, collectionOptions)
  }

  filter(callback, collectionOptions) {
    if (!callback) { return this }

    const autocompletables = []
    this.#index.forEach(function(autocompletable, value) {
      if (callback(autocompletable)) {
        return autocompletables.push(autocompletable)
      }
    })

    return new this.constructor(autocompletables, collectionOptions)
  }

  matchingQuery(query) {
    if (!query) { return this }

    return new this.constructor(
      this.#matchAutocompletablesByNameOrDescription(this.#autocompletables, query),
      { sort: false }
    )
  }

  toArray() {
    return this.#autocompletables.slice(0)
  }

  toJSON() {
    return this.toArray()
  }

  isEqualTo(collection) {
    if (!collection || (this.#autocompletables.length !== collection.length)) {
      return false
    }

    return JSON.stringify(this) === JSON.stringify(collection)
  }

  #compareAutocompletables(autocompletable, otherAutocompletable) {
    return autocompletable.name.localeCompare(otherAutocompletable.name)
  }

  #matchAutocompletablesByNameOrDescription(autocompletables, query) {
    return uniqueValues([].concat(
      this.#matchAutocompletablesByNameAtHead(autocompletables, query),
      this.#matchAutocompletablesByRestOfName(autocompletables, query),
      this.#matchAutocompletablesByRestOfDescription(autocompletables, query))
    )
  }

  #matchAutocompletablesByNameAtHead(autocompletables, query) {
    return this.#matchAutocompletablesByRegExp(autocompletables, regexpForQuery(query, "^"))
  }

  #matchAutocompletablesByRestOfName(autocompletables, query) {
    return this.#matchAutocompletablesByRegExp(autocompletables, regexpForQuery(query, "\\s"))
  }

  #matchAutocompletablesByRestOfDescription(autocompletables, query) {
    return this.#matchAutocompletablesByRegExp(autocompletables, regexpForQuery("", query), "description")
  }

  #matchAutocompletablesByRegExp(autocompletables, regexp, propertyName = "name") {
    return autocompletables.filter(autocompletable => {
      const normalizedPropertyName = `normalized${camelize(propertyName)}`
      const property = autocompletable[propertyName]
  
      if (property) {
        if (!autocompletable[normalizedPropertyName]) autocompletable[normalizedPropertyName] = normalize(property)
        return regexp.test(autocompletable[normalizedPropertyName])
      }
    })
  }

  #uniqueAutocompleteableKey(autocompletable) {
    return autocompletable.value.toString()
  }
}



================================================
FILE: app/javascript/lib/autocomplete/constants.js
================================================
export const PUNCTUATION_PATTERN = /[\u0021-\u0023\u0025-\u002A\u002C-\u002F\u003A\u003B\u003F\u0040\u005B-\u005D\u005F\u007B\u007D\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u0AF0\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166D\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E3B\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]/



================================================
FILE: app/javascript/lib/autocomplete/helpers.js
================================================
export function generateUUID() {
  const template = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx"
  return template.replace(/[xy]/g, function(char) {
    const rand = (Math.random() * 16) | 0
    const value = char === "x" ? rand : ((rand & 0x3)|0x8)
    return value.toString(16)
  })
}

export function synchronize(fn) {
  const monitorCallbacks = new WeakMap
  return function(callback) {
    let callbacks = monitorCallbacks.get(this)
    if (!callbacks) {
      monitorCallbacks.set(this, (callbacks = []))
    }
    callbacks.push(callback)

    if (callbacks.length === 1) {
      return fn.call(this, () => {
        Array.from(callbacks).forEach((callback) => { callback?.() })
        return monitorCallbacks.delete(this)
      })
    }
  }
}

export function transitionElementWithClass(element, className, callback) {
  return applyClassAwaitingEvent(element, className, "transitionend", callback)
}

const applyClassAwaitingEvent = function(element, className, eventName, callback) {
  let timeout
  let uninstalled = false

  const uninstall = function() {
    if (!uninstalled) {
      uninstalled = true
      element.removeEventListener(eventName, uninstall)
      return requestAnimationFrame(function() {
        element.classList.remove(className)
        return callback?.()
      })
    }
  }

  element.addEventListener(eventName, uninstall)
  element.classList.add(className)

  // Failsafe: If we don't receive a {transition,animation}end event
  // for some reason, ensure that uninstall is still called.
  const duration = getDuration(element, eventName)
  if (duration) {
    timeout = duration + 50
  } else {
    timeout = 50
  }

  return setTimeout(uninstall, timeout)
}

const getDuration = function(element, eventName) {
  const type = eventName === "animationend" ? "animation" : "transition"
  const duration = getComputedStyle(element)[`${type}Duration`]

  if (duration) {
    if (/ms/.test(duration)) {
      return parseInt(duration, 10)
    } else {
      return parseFloat(duration) * 1000
    }
  }
}

export function getElementMargin(element) {
  const result = {}
  const style = window.getComputedStyle(element);

  ["Top", "Right", "Bottom", "Left"].forEach((side) => {
    result[side.toLowerCase()] = parseInt(style[`margin${side}`], 10)
  })

  return result
}

export function getAbsolutePositionForOffsets({ top, right, bottom, left }) {
  return {
    top:    top + window.scrollY,
    right:  right + window.scrollX,
    bottom: bottom + window.scrollY,
    left:   left + window.scrollX
  }
}


export function getViewportRect() {
  return {
    top:    window.scrollY,
    right:  window.scrollX + window.innerWidth,
    bottom: window.scrollY + window.innerHeight,
    left:   window.scrollX
  }
}



================================================
FILE: app/javascript/lib/autocomplete/mentions_autocomplete_handler.js
================================================
import BaseAutocompleteHandler from "lib/autocomplete/base_autocomplete_handler"
import { PUNCTUATION_PATTERN } from "lib/autocomplete/constants"

export default class extends BaseAutocompleteHandler {
  get pattern() {
    return new RegExp(`^@(.*?)(${PUNCTUATION_PATTERN.source}*)$`)
  }

  insertAutocompletable(autocompletable, range, terminator, options = {}) {
    const attachment = this.#createAttachmentForAutocompletable(autocompletable)
    this.#insertAttachmentAndTerminatorIntoEditorAtRange(attachment, terminator, range, options)
  }

  // Override to set selector's position relative to the cursor in the editor
  getOffsetsAtPosition(position) {
    return this.#getOffsetsFromEditorAtPosition(this.#editor, position)
  }

  #createAttachmentForAutocompletable(mentionable) {
    const mention = `
      <span class="mention" sgid=${mentionable.sgid}>
        <img src="${mentionable.avatar_url}" class="avatar" alt="${mentionable.name}">
        ${mentionable.name}
      </span>
    `

    return new Trix.Attachment({
      content: mention,
      contentType: "application/vnd.campfire.mention",
      sgid: mentionable.sgid
    })
  }

  #insertAttachmentAndTerminatorIntoEditorAtRange(attachment, terminator, range) {
    if (range) { this.#editor.setSelectedRange(range) }
    this.#editor.insertAttachment(attachment)
    this.#editor.insertString(terminator)
  }

  get #editor() {
    return this.element.editor
  }

  #getOffsetsFromEditorAtPosition(editor, position) {
    const rect = this.#editor.getClientRectAtPosition(position)
    return rect ? rect : {}
  }
}



================================================
FILE: app/javascript/lib/autocomplete/renderer.js
================================================
export class Renderer {
  renderAutocompletableSuggestions(autocompletables, options = {}) {
    const { selectedAutocompletable } = options
    let html = ""

    autocompletables.forEach((autocompletable) => {
      const isSelected = autocompletable === selectedAutocompletable
      const multipleAttr = autocompletable.type === "group" ? "multiple" : ""
      const selectedAriaSelectedAttrs = isSelected ? "selected aria-selected" : ""

      html += `
        <suggestion-option class="autocomplete__item flex align-center gap unpad" role="option" value="${autocompletable.value}" ${multipleAttr} ${selectedAriaSelectedAttrs}>
          ${
            autocompletable.pending
              ? `Add <strong>${autocompletable.name}…</strong>`
              : autocompletable.noResultsLabel
              ? `<span class="txt--disable-truncate">${autocompletable.noResultsLabel}</span>`
              : this.renderAutocompletable(autocompletable)
          }
        </suggestion-option>
      `
    })

    return html
  }

  renderAutocompletable(autocompletable) {
    const html = `
      <button class="autocomplete__btn btn btn--borderless btn--transparent min-width flex-item-grow justify-start" data-value="${autocompletable.value}">
        <span class="avatar">
          <img src="${autocompletable.avatar_url}" class="automcomplete__avatar" role="presentation" />
        </span>
        <span class="autocompletable__name">${autocompletable.name}</span>
        <a href="#" class="autocompletable__unselect" aria-label="Remove ${autocompletable.name}" data-behavior="unselect_autocompletable">×</a>
      </button>
    `

    return html
  }
}



================================================
FILE: app/javascript/lib/autocomplete/selection.js
================================================
import { memoize } from "lib/autocomplete/utils"

export default class Selection {
  #elements = []
  #element
  #observer

  constructor(element) {
    this.#element = element
    this.#observeMutations()
    this.#render()
  }

  disconnect() {
    this.#observer.disconnect()
    this.#render()
  }

  add(value, label, options = {}) {
    this.#element.append(this.#findOption(value) || this.#createOption(value, label, options))
  }

  remove(value) {
    this.#findOption(value)?.remove()
  }

  removeLast() {
    this.#lastOption?.remove()
  }

  get values() {
    return this.#options.map(option => parseInt(option.value))
  }

  #createOption(value, label, { avatarUrl }) {
    const option = new Option(label, value, true, true)
    option.dataset.avatarUrl = avatarUrl
    return option
  }

  #findOption(value) {
    return this.#options.find(option => option.value == value)
  }

  get #lastOption() {
    return this.#options.slice(-1)[0]
  }

  #observeMutations() {
    this.#observer = new MutationObserver(this.#optionsChanged)
    this.#observer.observe(this.#element, { childList: true })
  }

  #optionsChanged = () => {
    this.#render()
  }

  get #options() {
    return Array.from(this.#element.options)
  }

  #render() {
    for (const element of this.#elements) element.remove()
    this.#elements = this.#element.isConnected ? this.#options.map(this.#renderElementForOption) : []
   }

  #renderElementForOption = (option) => {
    const { value, label } = option
    const content = this.#template.content.cloneNode(true)
    content.querySelectorAll("[data-value]").forEach(element => element.dataset.value = value)
    content.querySelector("[data-content=label]").textContent = label
    content.querySelector("[data-content=label]").title = value
    content.querySelector("[data-content=screenReaderLabel]").textContent = label
    content.querySelector("[data-content=avatar]").src = option.dataset.avatarUrl
    return this.#template.insertAdjacentElement("beforebegin", content.firstElementChild)
  }

  get #template() {
    const id = this.#element.getAttribute("data-template-id")
    return memoize(this, "template", document.getElementById(id))
  }
}



================================================
FILE: app/javascript/lib/autocomplete/suggestion_context.js
================================================
export default class SuggestionContext {
  #content
  #position

  constructor(delegate, content, position) {
    this.#content = content
    this.#position = position

    const { matchQueryAndTerminatorForWord, characterMatchesWordBoundary } = delegate
    const bounds = this.#findWordBoundsFromStringAtPosition(characterMatchesWordBoundary)

    if (bounds) {
      [this.startPosition, this.endPosition] = Array.from(bounds)
      this.word = this.#content.slice(...Array.from(bounds || []))

      const match = matchQueryAndTerminatorForWord(this.word)
      if (match) {
        const {query, terminator} = match
        if (query.length) { this.query = query }
        if (terminator.length) { this.terminator = terminator }
        this.active = true
      }
    }
  }

  isActive() {
    return this.active
  }

  isTerminated() {
    return this.terminator?.length && (this.#position === this.endPosition)
  }

  isEqualTo(context) {
    return false
  }

  #findWordBoundsFromStringAtPosition(characterMatchesWordBoundary) {
    let char, index
    let start = (index = this.#position)

    while (--index >= 0) {
      char = this.#content.charAt(index)
      if (characterMatchesWordBoundary(char)) { break }
      start = index
    }
  
    let end = (index = this.#position)
    while (index < this.#content.length) {
      char = this.#content.charAt(index)
      if (characterMatchesWordBoundary(char)) { break }
      end = ++index
    }
  
    if (start !== end) {
      return [ start, end ]
    }
  }
}



================================================
FILE: app/javascript/lib/autocomplete/suggestion_controller.js
================================================
import SuggestionResultsController from "lib/autocomplete/suggestion_results_controller"
import SuggestionContext from "lib/autocomplete/suggestion_context"

export default class SuggestionController {
  #active     = false
  #canceled   = false
  #committing = false
  #context
  #resultsController

  constructor(delegate) {
    this.delegate = delegate
    this.commitSuggestion = this.commitSuggestion.bind(this)
    this.characterMatchesWordBoundary = this.characterMatchesWordBoundary.bind(this)
    this.matchQueryAndTerminatorForWord = this.matchQueryAndTerminatorForWord.bind(this)
    this.didPressKey = this.didPressKey.bind(this)
    this.didResizeWindow = this.didResizeWindow.bind(this)
    this.didScrollWindow = this.didScrollWindow.bind(this)
    this.#installKeyboardListener()
    this.#installResizeListeners()
  }

  updateWithContentAndPosition(content, position) {
    if (this.#committing) { return }
    const previousContext = this.#context
    this.#context = new SuggestionContext(this, content, position)

    if (!this.#context.isEqualTo(previousContext)) {
      if (this.#context.isTerminated()) {
        return this.commitSuggestion()
      } else if (this.#context.isActive()) {
        return this.#activateSuggestion()
      } else {
        return this.#deactivateSuggestion()
      }
    }
  }

  hideResults() {
    return this.#resultsController.hide()
  }

  destroy() {
    this.#uninstallResultsController()
    this.#uninstallResizeListeners()
    this.#uninstallKeyboardListener()
  }

  commitSuggestion({withTerminator} = {}) {
    if (this.#committing || this.#canceled || !this.#active) { return false }

    const values = this.selectedValues
    if (values.length == 0) { return false }

    const range = [this.#context.startPosition, this.#context.endPosition]
    const terminator = (withTerminator != null ? withTerminator : this.#context.terminator) || " "

    this.#committing = true
    this.#resultsController.flashSelection(() => {
      this.#committing = false
      this.#didCommitValuesAtRangeWithTerminator(values, range, terminator)
      this.#deactivateSuggestionWithAnimation()
    })

    if (values.length > 1) {
      this.#willCommitValuesAtRangeWithTerminator(values, range, terminator, { editor: this.delegate.editor })
    } else {
      this.delegate.willCommitValueAtRangeWithTerminator?.(values[0], range, terminator)
    }
    return true
  }

  get selectedValues() {
    const value = this.#resultsController.getSelectedValue()
    if (!value) { return [] }

    const valueOnlyHasCommaSeparatedNumbers = /^\d+(,\d+)*$/.test(value)
    return valueOnlyHasCommaSeparatedNumbers ? value.split(",") : [value]
  }

  isActive() {
    return this.#active
  }

  isCanceled() {
    return this.#canceled
  }

  #activateSuggestion() {
    if (!this.#canceled) {
      this.#active = true
      this.#installResultsController()
      return this.#updateResults(() => {
        if (this.#resultsController.hasResults()) {
          return this.#displayResults()
        } else {
          return this.hideResults()
        }
      })
    }
  }

  #deactivateSuggestionWithAnimation() {
    this.#hideResultsWithAnimation(() => {
      this.#deactivateSuggestion()
    })
  }

  #deactivateSuggestion() {
    this.#uninstallResultsController()
    this.#active = false
    this.#canceled = false
  }

  #cancelSuggestion() {
    if (this.#active) {
      this.#deactivateSuggestion()
      this.#canceled = true
    }
  }

  #resumeSuggestion() {
    if (this.#canceled) {
      this.#canceled = false
      return this.#activateSuggestion()
    }
  }

  #willCommitValuesAtRangeWithTerminator(values, range, terminator, { editor }) {
    editor?.setSelectedRange(range) && editor?.deleteInDirection("forward") // Delete user autocomplete input

    values.forEach((value) => {
      this.delegate.willCommitValueAtRangeWithTerminator?.(value, null, terminator)
      range = this.#advanceRangeForNextValue(range)
    })
  }

  #didCommitValuesAtRangeWithTerminator(values, range, terminator) {
    values.forEach((value) => {
      this.delegate.didCommitValueAtRangeWithTerminator?.(value, range, terminator)
      range = this.#advanceRangeForNextValue(range)
    })
  }

  #advanceRangeForNextValue(range) {
    const startPosition = range[1] + 1
    return Array(startPosition, startPosition + 1)
  }

  #displayResults() {
    if (this.#active) {
      const offsets = this.delegate.getOffsetsAtPosition(this.#context.startPosition)
      const placement = this.delegate.getResultsPlacement?.()
      return this.#resultsController.displayAtOffsets(offsets, {placement})
    }
  }

  #updateResults(callback) {
    const query = this.#context?.query
    return this.delegate.fetchResultsForQuery(query, results => {
      if ((this.#resultsController != null) && (query === this.#context?.query)) {
        this.#resultsController.updateResults(results)
        return callback?.()
      }
    })
  }

  #hideResultsWithAnimation(callback) {
    return this.#resultsController?.hideWithAnimation(callback)
  }

  // Suggestion context delegate

  characterMatchesWordBoundary(character) {
    if (this.delegate.characterMatchesWordBoundary != null) {
      return this.delegate.characterMatchesWordBoundary(character)
    } else {
      return /[\s\uFFFC]/.test(character)
    }
  }

  matchQueryAndTerminatorForWord(word) {
    return this.delegate.matchQueryAndTerminatorForWord(word)
  }

  // Results controller delegate

  didClickOption(option) {
    return setTimeout(this.commitSuggestion, 100)
  }

  didShowResults(element) {
    this.hidden = false
    return this.delegate.didShowResults?.(element)
  }

  didHideResults(element) {
    this.hidden = true
    return this.delegate.didHideResults?.(element)
  }

  // Keyboard events

  didPressKey(event) {
    if (this.#committing) { return }

    let result
    switch (event.keyCode) {
      case 9:
        result = this.#didPressTabKey()
        break
      case 10: case 13:
        result = this.#didPressReturnKey()
        break
      case 27:
        result = this.#didPressEscapeKey()
        break
      case 32:
        result = this.#didPressSpaceKey()
        break
      case 38:
        result = this.#didPressUpKey()
        break
      case 40:
        result = this.#didPressDownKey()
        break
      default:
        result = this.#didPressKeyWithValue(event.key)
    }

    if (result === false) {
      event.preventDefault()
      return event.stopPropagation()
    }
  }

  #didPressTabKey() {
    if (this.#active) {
      if (this.hidden) {
        this.#displayResults()
        return false
      } else if (!this.#committing) {
        if (this.commitSuggestion()) {
          return false
        }
      }
    } else if (this.#canceled) {
      this.#resumeSuggestion()
      return false
    }
  }

  #didPressReturnKey() {
    if (this.#active) {
      if (this.commitSuggestion()) {
        return false
      }
    }
  }

  #didPressEscapeKey() {
    if (this.#active) {
      this.#cancelSuggestion()
      return false
    }
  }

  #didPressSpaceKey() {
    if (this.#active && this.#spaceMatchesWordBoundary()) {
      if (this.commitSuggestion()) {
        return false
      }
    }
  }

  #didPressUpKey() {
    if (this.#active) {
      this.#resultsController.selectUp()
      return false
    }
  }

  #didPressDownKey() {
    if (this.#active) {
      this.#resultsController.selectDown()
      return false
    }
  }

  #didPressKeyWithValue(value) {
    if (this.#active && (value != null) && !this.hidden) {
      const result = this.matchQueryAndTerminatorForWord(value)
      if (result?.query === "") {
        this.#cancelSuggestion()
        return false
      }
    }
  }

  // Scroll and resize events

  didResizeWindow() {
    if (this.#active) {
      return this.hideResults()
    }
  }

  didScrollWindow(event) {
    if (this.#active && (event.target === document)) {
      return this.hideResults()
    }
  }

  // Private

  #installKeyboardListener() {
    window.addEventListener("keydown", this.didPressKey, true)
  }

  #uninstallKeyboardListener() {
    window.removeEventListener("keydown", this.didPressKey, true)
  }

  #installResizeListeners() {
    window.addEventListener("resize", this.didResizeWindow, true)
    window.addEventListener("scroll", this.didScrollWindow, true)
  }

  #uninstallResizeListeners() {
    window.removeEventListener("resize", this.didResizeWindow, true)
    window.removeEventListener("scroll", this.didScrollWindow, true)
  }

  #installResultsController() {
    if (!this.#resultsController) {
      this.#resultsController = new SuggestionResultsController({ id: this.delegate.getSuggestionsIdentifier() })
    }
    this.#resultsController.delegate = this
  }

  #uninstallResultsController() {
    this.#resultsController?.destroy()
    this.#resultsController = null
  }

  #spaceMatchesWordBoundary() {
    return this.characterMatchesWordBoundary(" ")
  }
}



================================================
FILE: app/javascript/lib/autocomplete/suggestion_results_controller.js
================================================
import { getAbsolutePositionForOffsets, getElementMargin, getViewportRect, synchronize, transitionElementWithClass } from "lib/autocomplete/helpers"

export default class SuggestionResultsController {
  constructor(options = {}) {
    this.revealOption = this.revealOption.bind(this)
    this.didMouseDown = this.didMouseDown.bind(this)
    this.flashSelection = synchronize(this.flashSelection)
    this.id = options.id || `suggestion_results_${generateUUID()}`

    this.#createSelectElement()
  }

  destroy() {
    this.hide()
    this.#removeSelectElement()
  }

  displayAtOffsets(offsets, {placement} = {}) {
    let availableMaxHeight, elementHeight, height, left, maxHeight, top
    this.show()

    this.selectElement.style.height = ""
    const style = getComputedStyle(this.selectElement)
    const margin = getElementMargin(this.selectElement)
    const position = getAbsolutePositionForOffsets(offsets)

    const elementRect = this.selectElement.getBoundingClientRect()
    const viewportRect = getViewportRect()

    const availableHeightAbove = position.top - viewportRect.top - margin.top
    const availableHeightBelow = viewportRect.bottom - position.bottom - margin.bottom
    const thresholdHeight = this.getOptionHeight() * 3

    if (availableHeightAbove > thresholdHeight && thresholdHeight > availableHeightBelow) {
      if (placement == null) { placement = "above" }
    } else {
      if (placement == null) { placement = "below" }
    }

    if (placement === "above") {
      availableMaxHeight = availableHeightAbove
    } else {
      availableMaxHeight = availableHeightBelow
    }

    if (style.maxHeight === "none") {
      maxHeight = availableMaxHeight
    } else {
      const requestedMaxHeight = parseInt(style.maxHeight, 10)
      maxHeight = Math.min(availableMaxHeight, requestedMaxHeight)
    }

    if (elementRect.height > maxHeight) {
      elementHeight = (height = maxHeight)
    } else {
      elementHeight = elementRect.height
    }

    if (placement === "above") {
      top = position.top - elementHeight - margin.top
    } else {
      top = position.bottom - margin.top
    }

    const elementRight = position.left + elementRect.width + margin.right

    if (elementRight > viewportRect.right) {
      left = position.left - (elementRight - viewportRect.right) - margin.right
    } else {
      left = position.left - margin.right
    }

    this.selectElement.style.top = `${top}px`
    this.selectElement.style.left = `${left}px`
    this.selectElement.style.height = height ? `${height}px` : "auto"
  }

  show() {
    if (!this.visible) {
      this.visible = true
      this.selectElement.setAttribute("aria-hidden", "false")
      this.selectElement.style.visibility = ""
      return this.delegate.didShowResults(this.selectElement)
    }
  }

  hide() {
    if (this.visible) {
      this.visible = false
      this.selectElement.style.visibility = "hidden"
      this.selectElement.setAttribute("aria-hidden", "true")
      return this.delegate.didHideResults(this.selectElement)
    }
  }

  hideWithAnimation = synchronize((callback) => {
    if (this.visible) {
      return transitionElementWithClass(this.selectElement, "hiding", () => {
        this.hide()
        return callback()
      })
    } else {
      return callback()
    }
  })

  selectUp() {
    this.selectElement.selectedIndex--
    return this.revealOption()
  }

  selectDown() {
    this.selectElement.selectedIndex++
    return this.revealOption()
  }

  revealOption() {
    const {
      selectedOption
    } = this.selectElement
    if (selectedOption) {
      const {scrollTop} = this.selectElement
      const selectHeight = this.selectElement.clientHeight
      const scrollBottom = scrollTop + selectHeight

      const optionTop = selectedOption.offsetTop
      const optionHeight = selectedOption.offsetHeight
      const optionBottom = optionTop + optionHeight

      if (optionTop < scrollTop) {
        this.selectElement.scrollTop = optionTop
      } else if (optionBottom > scrollBottom) {
        this.selectElement.scrollTop = scrollTop + (optionBottom - scrollBottom)
      }
    }
  }

  flashSelection(callback) {
    const { selectedOption } = this.selectElement
    if (selectedOption) {
      this.selectElement.classList.add("flashing")
      return selectedOption.flash(() => {
        this.selectElement.classList.remove("flashing")
        return callback()
      })
    } else {
      return callback()
    }
  }

  updateResults(results) {
    this.selectElement.innerHTML = results.toString().trim()
    if (this.selectElement.selectedIndex != null) {
      return requestAnimationFrame(this.revealOption)
    } else {
      this.selectElement.selectedIndex = 0
    }
  }

  hasResults() {
    return this.selectElement.innerHTML.length > 0
  }

  getSelectedValue() {
    return this.selectElement.value
  }

  getOptionHeight() {
    return this.selectElement.optionElements[0]?.offsetHeight != null ? this.selectElement.optionElements[0]?.offsetHeight : 0
  }

  didMouseDown(event) {
    const url = event.target.getAttribute("href")
    const option = event.target.closest("suggestion-option")

    if (url) {
      Turbo.visit(url)
    } else if (option) {
      option.selectElement.selectedOption = option
      this.delegate.didClickOption(option)
      this.#cancelEvent(event)
    }
  }

  #createSelectElement() {
    this.selectElement = document.createElement("suggestion-select")
    this.selectElement.setAttribute("class", "autocomplete__list shadow margin-none unpad")
    this.selectElement.addEventListener("mousedown", this.didMouseDown, true)
    this.selectElement.addEventListener("click", this.#cancelEvent)
    this.selectElement.setAttribute("id", this.id)
    this.selectElement.setAttribute("data-behavior", "scrollable_menu")
    this.selectElement.setAttribute("aria-live", "assertive")

    document.body.appendChild(this.selectElement)
  }

  #removeSelectElement() {
    this.selectElement.removeEventListener("mousedown", this.didMouseDown, true)
    this.selectElement.removeEventListener("click", this.#cancelEvent)

    return this.selectElement.remove()
  }

  #cancelEvent(event) {
    event.preventDefault()
    event.stopPropagation()
  }
}



================================================
FILE: app/javascript/lib/autocomplete/utils.js
================================================
export function camelize(dashString) {
  const element = document.createElement("span")
  element.setAttribute(`data-${dashString}`, "")
  return Object.keys(element.dataset)[0]
}

export function memoize(object, name, value) {
  Object.defineProperty(object, name, { value })
  return value
}

export function normalize(string) {
  return string.normalize("NFKD").replace(/\p{Diacritic}/gu, "")
}

export function regexpForQuery(query, prefix = "") {
  return new RegExp(prefix + patternForQuery(query), "i")
}

export function patternForQuery(query) {
  return normalize(query.toString()).split("").map(regexpEscape).join("(.*\\s)?").replace(/\(\.\*\\s\)\? /g, "[^ ]* ")
}


export function uniqueValues(array) {
  const set = new Set()
  Array.from(array).forEach(value => set.add(value))
  return Array.from(set)
}

export function regexpEscape(string) {
  return  string.toString().replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&")
}



================================================
FILE: app/javascript/lib/autocomplete/custom_elements/suggestion_option.js
================================================
import { generateUUID, synchronize } from "lib/autocomplete/helpers"

export default class extends HTMLElement {
  constructor() {
    super(...arguments)
    this.flash = synchronize(this.flash)
  }

  connectedCallback() {
    this.id ||= `option-${generateUUID()}`
  }

  get selectElement() {
    return this.closest("suggestion-select")
  }

  get index() {
    if (this.selectElement) {
      return Array.from(this.selectElement.optionElements).indexOf(this)
    } else {
      return null
    }
  }

  get selected() {
    return this.hasAttribute("selected")
  }

  set selected(value) {
    if (value) {
      this.setAttribute("selected", "")
    } else {
      this.removeAttribute("selected")
    }
  }

  get value() {
    return this.getAttribute("value")
  }

  flash(callback) {
    const drawFrame = (frame = 0) => {
      requestAnimationFrame(() => {
        if (frame == 0) {
          this.classList.add("flashing-off")
        } else if (frame == 4) {
          this.classList.remove("flashing-off")
        }

        if (frame == 7) {
          callback()
        } else {
          drawFrame(frame + 1)
        }
      })
    }
    drawFrame(0)
  }
}



================================================
FILE: app/javascript/lib/autocomplete/custom_elements/suggestion_select.js
================================================
export default class extends HTMLElement {
  connectedCallback() {
    if (!this.hasAttribute("role")) this.setAttribute("role", "listbox")
  }

  get optionElements() {
    return this.querySelectorAll("suggestion-option")
  }

  get selectedIndex() {
    const selected = this.querySelector("suggestion-option[selected]")
    return selected?.index
  }

  set selectedIndex(value) {
    const optionElements = this.optionElements
    const optionCount = optionElements.length

    if (!optionElements.length) return

    Array.from(optionElements).forEach(option => {
      option.selected = false
    })

    if (value === null || typeof value === "undefined") return

    const index = Math.max(0, Math.min(optionCount - 1, parseInt(value, 10)))
    optionElements[index].selected = true
  }

  get selectedOption() {
    return this.optionElements[this.selectedIndex]
  }

  set selectedOption(option) {
    if (option.selectElement === this) {
      this.selectedIndex = option.index
    }
  }

  get value() {
    return this.selectedOption?.value
  }
}



================================================
FILE: app/javascript/lib/rich_text/unfurl/unfurler.js
================================================
import OpengraphEmbedOperation from "lib/rich_text/unfurl/lib/opengraph_embed_operation"
import Paste from "lib/rich_text/unfurl/lib/paste"

const performOperation = (function() {
  let operation = null
  let requestId = null

  return function(operationToPerform) {
    operation?.abort()
    cancelAnimationFrame(requestId)

    requestId = requestAnimationFrame(function() {
      operation = operationToPerform
      operation.perform().then(() => operation = null)
    })
  }
})()

export default class Unfurler {
  install() {
    this.#addEventListeners()
  }

  #addEventListeners() {
    addEventListener("trix-initialize", function(event) {
      if (this.#editorElementPermitsAttribute(event.target, "href")) {
        return event.target.addEventListener("trix-paste", this.#didPaste.bind(this))
      }
    }.bind(this))
  }

  #didPaste(event) {
    const {range} = event.paste
    const {editor} = event.target

    if (range != null) {
      const paste = new Paste(range, editor).getSignificantPaste()

      if (paste.isURL()) {
        if (this.#editorElementPermitsOpengraphAttachment(event.target)) {
          performOperation(new OpengraphEmbedOperation(paste))
        }
      }
    }
  }

  #editorElementPermitsAttribute(element, attributeName) {
    if (element.hasAttribute("data-permitted-attributes")) {
      return Array.from(element.getAttribute("data-permitted-attributes").split(" ")).includes(attributeName)
    } else {
      return true
    }
  }

  #editorElementPermitsOpengraphAttachment(element) {
    const permittedAttachmentTypes = element.getAttribute("data-permitted-attachment-types")
    return permittedAttachmentTypes && permittedAttachmentTypes.includes("application/vnd.actiontext.opengraph-embed")
  }
}



================================================
FILE: app/javascript/lib/rich_text/unfurl/lib/opengraph_embed_operation.js
================================================
import { post } from "@rails/request.js"
import { truncateString } from "helpers/string_helpers"

const UNFURLED_TWITTER_AVATAR_CSS_CLASS = "cf-twitter-avatar"
const TWITTER_AVATAR_URL_PREFIX = "https://pbs.twimg.com/profile_images"

export default class OpengraphEmbedOperation {
  constructor(paste) {
    this.paste = paste
    this.editor = this.paste.editor
    this.url = this.paste.string

    this.abortController = new AbortController()
  }

  perform() {
    return this.#createOpenGraphMetadataRequest()
      .then(response => response.json)
      .then(this.#insertOpengraphAttachment.bind(this))
      .catch(() => null)
  }

  abort() {
    this.abortController.abort()
  }

  #createOpenGraphMetadataRequest() {
    return post("/unfurl_link", {
      body: { url: this.url },
      contentType: "application/json",
      signal: this.abortController.signal
    })
  }

  #insertOpengraphAttachment(response) {
    if (this.#shouldInsertOpengraphPreview) {
      const currentRange = this.editor.getSelectedRange()
      this.editor.setSelectedRange(this.editor.getSelectedRange())
      this.editor.recordUndoEntry("Insert Opengraph preview for Pasted URL")
      this.editor.insertAttachment(this.#createOpengraphAttachment(response))
      this.editor.setSelectedRange(currentRange)
    }
  }

  get #shouldInsertOpengraphPreview() {
    return this.editor.getDocument().toString().includes(this.url)
  }

  #createOpengraphAttachment(response) {
    const { title, url, image, description } = response
    const html = this.#generateOpengraphEmbedHTML({ title, url, image, description })

    return new Trix.Attachment({
      contentType: "application/vnd.actiontext.opengraph-embed",
      content: html,
      filename: title,
      href: url,
      url: image,
      caption: description
    })
  }

  #generateOpengraphEmbedHTML(embed) {
    return `<actiontext-opengraph-embed class="${this.#isTwitterAvatar(embed) ? UNFURLED_TWITTER_AVATAR_CSS_CLASS : ''}">
      <div class="og-embed">
        <div class="og-embed__content">
          <div class="og-embed__title">${truncateString(embed.title, 560)}</div>
          <div class="og-embed__description">${truncateString(embed.description, 560)}</div>
        </div>
        <div class="og-embed__image">
          <img src="${embed.image}" class="image" alt="" />
        </div>
      </div>
    </actiontext-opengraph-embed>`
  }

  #isTwitterAvatar(embed) {
    return embed.image.startsWith(TWITTER_AVATAR_URL_PREFIX)
  }
}



================================================
FILE: app/javascript/lib/rich_text/unfurl/lib/paste.js
================================================
export default class Paste {
  constructor(range, editor, document) {
    this.range = range
    this.editor = editor
    this.document = document
    if (this.document == null) { this.document = this.editor.getDocument() }
    this.string = this.document.getStringAtRange(this.range)
  }

  isURL() {
    return /^(?:[a-z0-9]+:\/\/|www\.)[^\s]+$/.test(this.string)
  }

  getPathname() {
    const a = document.createElement("a")
    a.href = this.string
    return a.pathname
  }

  isLinked() {
    const {href} = this.getCommonAttributes()
    return (href != null) && (href !== this.string)
  }

  getCommonAttributes() {
    return this.document.getCommonAttributesAtRange(this.range)
  }

  getSignificantPaste() {
    return new this.constructor(this.getSignificantRange(), this.editor, this.document)
  }

  getSignificantRange() {
    const significantString = this.string.trim()
    const startOffset = this.range[0] + this.string.indexOf(significantString)
    const endOffset = startOffset + significantString.length
    return [startOffset, endOffset]
  }
}



================================================
FILE: app/javascript/models/client_message.js
================================================
const EMOJI_MATCHER = /^(\p{Emoji_Presentation}|\p{Extended_Pictographic}|\uFE0F)+$/gu

const SOUND_NAMES = [ "56k", "ballmer", "bell", "bezos", "bueller", "butts", "clowntown", "cottoneyejoe", "crickets", "curb", "dadgummit", "dangerzone", "danielsan", "deeper", "donotwant", "drama", "flawless", "glados", "gogogo", "greatjob", "greyjoy", "guarantee", "heygirl", "honk", "horn", "horror", "inconceivable", "letitgo", "live", "loggins", "makeitso", "noooo", "nyan", "ohmy", "ohyeah", "pushit", "rimshot", "rollout", "rumble", "sax", "secret", "sexyback", "story", "tada", "tmyk", "totes", "trololo", "trombone", "unix", "vuvuzela", "what", "whoomp", "wups", "yay", "yeah", "yodel" ]

export default class ClientMessage {
  #template

  constructor(template) {
    this.#template = template
  }

  render(clientMessageId, node) {
    const now = new Date()
    const body = this.#contentFromNode(node)

    return this.#createFromTemplate({
      clientMessageId,
      body,
      messageTimestamp: Math.floor(now.getTime()),
      messageDatetime: now.toISOString(),
      messageClasses: this.#containsOnlyEmoji(node.textContent) ? "message--emoji" : "",
    })
  }

  update(clientMessageId, body) {
    const element = this.#findWithId(clientMessageId).querySelector(".message__body-content")

    if (element) {
      element.innerHTML = body
    }
  }

  failed(clientMessageId) {
    const element = this.#findWithId(clientMessageId)

    if (element) {
      element.classList.add("message--failed")
    }
  }

  #findWithId(clientMessageId) {
    return document.querySelector(`#message_${clientMessageId}`)
  }

  #contentFromNode(node) {
    if (this.#isPlayCommand(node)) {
      return `<span class="pending">Playing ${this.#matchPlayCommand(node)}…</span>`
    } else if (this.#isRichText(node)) {
      return this.#richTextContent(node)
    } else {
      return node
    }
  }


  #isPlayCommand(node) {
    return this.#matchPlayCommand(node)
  }

  #matchPlayCommand(node) {
    return this.#stripWrapperElement(node)?.match(new RegExp(`^/play (${SOUND_NAMES.join("|")})`))?.[1]
  }

  #stripWrapperElement(node) {
    return node.innerHTML?.replace(/<div>(?:<!--[\s\S]*?-->)*([\s\S]*?)<\/div>/i, '$1')
  }


  #isRichText(node) {
    return typeof(node) != "string"
  }

  #richTextContent(node) {
    return `<div class="trix-content">${node.innerHTML}</div>`
  }


  #createFromTemplate(data) {
    let html = this.#template.innerHTML

    for (const key in data) {
      html = html.replaceAll(`$${key}$`, data[key])
    }

    return html
  }

  #containsOnlyEmoji(text) {
    return text?.match(EMOJI_MATCHER)
  }
}



================================================
FILE: app/javascript/models/file_uploader.js
================================================
export default class FileUploader {
  constructor(file, url, clientMessageId, progressCallback) {
    this.file = file
    this.url = url
    this.clientMessageId = clientMessageId
    this.progressCallback = progressCallback
  }

  upload() {
    const formdata = new FormData()
    formdata.append("message[attachment]", this.file)
    formdata.append("message[client_message_id]", this.clientMessageId)

    const req = new XMLHttpRequest()
    req.open("POST", this.url)
    req.setRequestHeader("X-CSRF-Token", document.querySelector("meta[name=csrf-token]").content)
    req.upload.addEventListener("progress", this.#uploadProgress.bind(this))

    const result = new Promise((resolve, reject) => {
      req.addEventListener("readystatechange", () => {
        if (req.readyState === XMLHttpRequest.DONE) {
          if (req.status < 400) {
            resolve(req.response)
          } else {
            reject()
          }
        }
      })
    })

    req.send(formdata)
    return result
  }

  #uploadProgress(event) {
    if (event.lengthComputable) {
      const percent = Math.round((event.loaded / event.total) * 100)
      this.progressCallback(percent, this.clientMessageId, this.file)
    }
  }
}



================================================
FILE: app/javascript/models/message_formatter.js
================================================
import { onNextEventLoopTick } from "helpers/timing_helpers"

const THREADING_TIME_WINDOW_MILLISECONDS = 5 * 60 * 1000 // 5 minutes

export const ThreadStyle = {
  none: 0,
  thread: 1,
}

export default class MessageFormatter {
  #userId
  #classes
  #dateFormatter = new Intl.DateTimeFormat(undefined, { dateStyle: "short" })

  constructor(userId, classes) {
    this.#userId = userId
    this.#classes = classes
  }

  format(message, threadstyle) {
    this.#setMeClass(message)
    this.#highlightMentions(message)

    if (threadstyle != ThreadStyle.none) {
      this.#threadMessage(message)
      this.#setFirstOfDayClass(message)
    }

    this.#makeVisible(message)
  }

  formatBody(body) {
    this.#highlightCode(body)
  }

  #setMeClass(message) {
    const isMe = message.dataset.userId == this.#userId
    message.classList.toggle(this.#classes.me, isMe)
  }

  #makeVisible(message) {
    message.classList.add(this.#classes.formatted)
  }

  #setFirstOfDayClass(message) {
    let showSeparator = true

    if (message.dataset.messageTimestamp && message.previousElementSibling?.dataset?.messageTimestamp) {
      const prev = new Date(Number(message.previousElementSibling.dataset.messageTimestamp))
      const curr = new Date(Number(message.dataset.messageTimestamp))

      showSeparator = this.#dateFormatter.format(prev) !== this.#dateFormatter.format(curr)
    }

    message.classList.toggle(this.#classes.firstOfDay, showSeparator)
  }

  #threadMessage(message) {
    if (message.previousElementSibling) {
      const isSameUser = message.previousElementSibling.dataset.userId == message.dataset.userId
      const previousMessageIsRecent = this.#previousMessageIsRecent(message)

      message.classList.toggle(this.#classes.threaded, isSameUser && previousMessageIsRecent)
    }
  }

  #highlightMentions(message) {
    const mentionsCurrentUser = message.querySelector(this.#selectorForCurrentUser) !== null
    message.classList.toggle(this.#classes.mentioned, mentionsCurrentUser)
  }

  #highlightCode(body) {
    body.querySelectorAll("pre").forEach(block => {
      onNextEventLoopTick(() => this.#highlightCodeBlock(block))
    })
  }

  #highlightCodeBlock(block) {
    if (this.#isPlainText(block)) window.hljs.highlightElement(block)
  }

  #isPlainText(element) {
    return Array.from(element.childNodes).every(node => node.nodeType === Node.TEXT_NODE)
  }

  #previousMessageIsRecent(message) {
    const previousTimestamp = message.previousElementSibling.dataset.messageTimestamp
    const threadTimestamp = message.dataset.messageTimestamp
    return Math.abs(previousTimestamp - threadTimestamp) <= THREADING_TIME_WINDOW_MILLISECONDS
  }

  get #selectorForCurrentUser() {
    return `.mention img[src^="/users/${Current.user.id}/avatar"]`
  }
}



================================================
FILE: app/javascript/models/message_paginator.js
================================================
import { get } from "@rails/request.js"
import {
  insertHTMLFragment,
  parseHTMLFragment,
  keepScroll,
  trimChildren,
} from "helpers/dom_helpers"
import { ThreadStyle } from "models/message_formatter"

const MAX_MESSAGES = 300
const MAX_MESSAGES_LEEWAY = 20


class ScrollTracker {
  #container
  #callback
  #intersectionObserver
  #mutationObserver
  #firstChildWasHidden

  constructor(container, callback) {
    this.#container = container
    this.#callback = callback
    this.#intersectionObserver = new IntersectionObserver(this.#handleIntersection.bind(this), { root: container })
    this.#mutationObserver = new MutationObserver(this.#childrenChanged.bind(this))

    this.#mutationObserver.observe(container, { childList: true })
  }

  connect() {
    this.#childrenChanged()
  }

  disconnect() {
    this.#intersectionObserver.disconnect()
  }

  #childrenChanged() {
    this.disconnect()

    if (this.#container.firstElementChild) {
      this.#firstChildWasHidden = false

      this.#intersectionObserver.observe(this.#container.firstElementChild)
      this.#intersectionObserver.observe(this.#container.lastElementChild)
    }
  }

  #handleIntersection(entries) {
    for (const entry of entries) {
      // Don't callback when the first child is shown, unless it had previously
      // been hidden. This avoids the issue that adding new pages will always
      // fire the callback for the first item before the scroll position is
      // adjusted.
      //
      // We don't do this with the last item, because it's possible that
      // fetching a page could return less than a screenfull.
      const isFirst = entry.target === this.#container.firstElementChild
      const significantReveal = (isFirst && this.#firstChildWasHidden) || !isFirst

      if (entry.isIntersecting) {
        if (significantReveal) {
          this.#callback(entry.target)
        }
      } else {
        if (isFirst) {
          this.#firstChildWasHidden = true
        }
      }
    }
  }
}

export default class MessagePaginator {
  #container
  #url
  #messageFormatter
  #allContentViewedCallback
  #scrollTracker
  #upToDate = true

  constructor(container, url, messageFormatter, allContentViewedCallback) {
    this.#container = container
    this.#url = url
    this.#messageFormatter = messageFormatter
    this.#allContentViewedCallback = allContentViewedCallback
    this.#scrollTracker = new ScrollTracker(container, this.#messageBecameVisible.bind(this))
  }


  // API

  monitor() {
    this.#scrollTracker.connect()
  }

  disconnect() {
    this.#scrollTracker.disconnect()
  }

  get upToDate() {
    return this.#upToDate
  }

  set upToDate(value) {
    this.#upToDate = value
  }

  async resetToLastPage() {
    this.upToDate = true
    await this.#showLastPage()
  }

  async trimExcessMessages(top) {
    const overage = this.#container.children.length - MAX_MESSAGES
    if (overage > MAX_MESSAGES_LEEWAY) {
      trimChildren(overage, this.#container, top)
      if (!top) {
        this.upToDate = false
      }
    }
  }

  // Internal

  #messageBecameVisible(element) {
    const messageId = element.dataset.messageId
    const firstMesage = element === this.#container.firstElementChild
    const lastMessage = element === this.#container.lastElementChild

    if (messageId) {
      if (firstMesage) {
        this.#addPage({ before: messageId }, true)
      }
      if (lastMessage && !this.upToDate) {
        this.#addPage({ after: messageId }, false)
      }
      if (lastMessage && this.upToDate) {
        this.#allContentViewedCallback?.()
      }
    }
  }

  async #showLastPage() {
    const resp = await this.#fetchPage()
    if (resp.statusCode === 200) {
      const page = await this.#formatPage(resp)
      this.#container.replaceChildren(page)
    }
  }

  async #addPage(params, top) {
    const resp = await this.#fetchPage(params)

    if (resp.statusCode === 204 && !top) {
      this.upToDate = true
      this.#allContentViewedCallback?.()
    }

    if (resp.statusCode === 200) {
      const page = await this.#formatPage(resp)
      const lastNewElement = page.lastElementChild

      keepScroll(this.#container, top, () => {
        insertHTMLFragment(page, this.#container, top)

        // Ensure formatting is correct over page boundaries
        if (top && lastNewElement?.nextElementSibling) {
          this.#messageFormatter.format(lastNewElement.nextElementSibling, ThreadStyle.thread)
        }
      })

      this.trimExcessMessages(!top)
    }
  }

  async #fetchPage(params) {
    const url = new URL(this.#url)
    for (const param in params) {
      url.searchParams.set(param, params[param])
    }

    return await get(url)
  }

  async #formatPage(response) {
    const text = await response.html
    const fragment = parseHTMLFragment(text)

    for (const message of fragment.querySelectorAll(".message")) {
      this.#messageFormatter.format(message, ThreadStyle.thread)
    }

    return fragment
  }
}



================================================
FILE: app/javascript/models/scroll_manager.js
================================================
const AUTO_SCROLL_THRESHOLD = 100

export default class ScrollManager {
  static #pendingOperations = Promise.resolve()

  #container

  constructor(container) {
    this.#container = container
  }

  async autoscroll(forceScroll, render = () => {}) {
    return this.#appendOperation(async () => {
      const wasNearEnd = this.#scrolledNearEnd

      await render()

      if (wasNearEnd || forceScroll) {
        this.#container.scrollTop = this.#container.scrollHeight
        return true
      } else {
        return false
      }
    })
  }

  async keepScroll(top, render) {
    return this.#appendOperation(async () => {
      const scrollTop = this.#container.scrollTop
      const scrollHeight = this.#container.scrollHeight

      await render()

      if (top) {
        this.#container.scrollTop = scrollTop + (this.#container.scrollHeight - scrollHeight)
      } else {
        this.#container.scrollTop = scrollTop
      }
    })
  }

  // Private

  #appendOperation(operation) {
    ScrollManager.#pendingOperations =
      ScrollManager.#pendingOperations.then(operation)
    return ScrollManager.#pendingOperations
  }

  get #scrolledNearEnd() {
    return this.#distanceScrolledFromEnd <= AUTO_SCROLL_THRESHOLD
  }

  get #distanceScrolledFromEnd() {
    return this.#container.scrollHeight - this.#container.scrollTop - this.#container.clientHeight
  }
}



================================================
FILE: app/javascript/models/typing_tracker.js
================================================
const REFRESH_INTERVAL = 1000
const TYPING_TIMEOUT = 5000

export default class TypingTracker {
  constructor(callback) {
    this.callback = callback
    this.currentlyTyping = {}
    this.timer = setInterval(this.#refresh.bind(this), REFRESH_INTERVAL)
  }

  close() {
    clearInterval(this.timer)
  }

  add(name) {
    this.currentlyTyping[name] = Date.now()
    this.#refresh()
  }

  remove(name) {
    delete this.currentlyTyping[name]
    this.#refresh()
  }

  #refresh() {
    this.#purgeInactive()
    const names = Object.keys(this.currentlyTyping).sort()

    if (names.length > 0) {
      this.callback(`${names.join(", ")}`)
    } else {
      this.callback(null)
    }
  }

  #purgeInactive() {
    const cutoff = Date.now() - TYPING_TIMEOUT
    this.currentlyTyping = Object.fromEntries(
      Object.entries(this.currentlyTyping).filter(([_name, timestamp]) => timestamp > cutoff)
   )
  }
}



================================================
FILE: app/jobs/application_job.rb
================================================
class ApplicationJob < ActiveJob::Base
  # Automatically retry jobs that encountered a deadlock
  # retry_on ActiveRecord::Deadlocked

  # Most jobs are safe to ignore if the underlying records are no longer available
  # discard_on ActiveJob::DeserializationError
end



================================================
FILE: app/jobs/bot/webhook_job.rb
================================================
class Bot::WebhookJob < ApplicationJob
  def perform(bot, message)
    bot.deliver_webhook(message)
  end
end



================================================
FILE: app/jobs/room/push_message_job.rb
================================================
class Room::PushMessageJob < ApplicationJob
  def perform(room, message)
    Room::MessagePusher.new(room:, message:).push
  end
end



================================================
FILE: app/models/account.rb
================================================
class Account < ApplicationRecord
  include Joinable

  has_one_attached :logo
end



================================================
FILE: app/models/application_platform.rb
================================================
class ApplicationPlatform < PlatformAgent
  def ios?
    match? /iPhone|iPad/
  end

  def android?
    match? /Android/
  end

  def mac?
    match? /Macintosh/
  end

  def chrome?
    user_agent.browser.match? /Chrome/
  end

  def firefox?
    user_agent.browser.match? /Firefox|FxiOS/
  end

  def safari?
    user_agent.browser.match? /Safari/
  end

  def edge?
    user_agent.browser.match? /Edg/
  end

  def apple_messages?
    # Apple Messages pretends to be Facebook and Twitter bots via spoofed user agent.
    # We want to avoid showing "Unsupported browser" message when a Campfire link
    # is shared via Messages.
    match?(/facebookexternalhit/i) && match?(/Twitterbot/i)
  end

  def mobile?
    ios? || android?
  end

  def desktop?
    !mobile?
  end

  def windows?
    operating_system == "Windows"
  end

  def operating_system
    case user_agent.platform
    when /Android/   then "Android"
    when /iPad/      then "iPad"
    when /iPhone/    then "iPhone"
    when /Macintosh/ then "macOS"
    when /Windows/   then "Windows"
    when /CrOS/      then "ChromeOS"
    else
      os =~ /Linux/ ? "Linux" : os
    end
  end
end



================================================
FILE: app/models/application_record.rb
================================================
class ApplicationRecord < ActiveRecord::Base
  primary_abstract_class
end



================================================
FILE: app/models/boost.rb
================================================
class Boost < ApplicationRecord
  belongs_to :message, touch: true
  belongs_to :booster, class_name: "User", default: -> { Current.user }

  scope :ordered, -> { order(:created_at) }
end



================================================
FILE: app/models/current.rb
================================================
class Current < ActiveSupport::CurrentAttributes
  attribute :user, :request

  delegate :host, :protocol, to: :request, prefix: true, allow_nil: true

  def account
    Account.first
  end
end



================================================
FILE: app/models/first_run.rb
================================================
class FirstRun
  ACCOUNT_NAME = "Campfire"
  FIRST_ROOM_NAME = "All Talk"

  def self.create!(user_params)
    account = Account.create!(name: ACCOUNT_NAME)
    room    = Rooms::Open.new(name: FIRST_ROOM_NAME)

    administrator = room.creator = User.new(user_params.merge(role: :administrator))
    room.save!

    room.memberships.grant_to administrator

    administrator
  end
end



================================================
FILE: app/models/membership.rb
================================================
class Membership < ApplicationRecord
  include Connectable

  belongs_to :room
  belongs_to :user

  after_destroy_commit { user.reset_remote_connections }

  enum :involvement, %w[ invisible nothing mentions everything ].index_by(&:itself), prefix: :involved_in

  scope :with_ordered_room, -> { includes(:room).joins(:room).order("LOWER(rooms.name)") }
  scope :without_direct_rooms, -> { joins(:room).where.not(room: { type: "Rooms::Direct" }) }

  scope :visible, -> { where.not(involvement: :invisible) }
  scope :unread,  -> { where.not(unread_at: nil) }

  def read
    update!(unread_at: nil)
  end

  def unread?
    unread_at.present?
  end
end



================================================
FILE: app/models/message.rb
================================================
class Message < ApplicationRecord
  include Attachment, Broadcasts, Mentionee, Pagination, Searchable

  belongs_to :room, touch: true
  belongs_to :creator, class_name: "User", default: -> { Current.user }

  has_many :boosts, dependent: :destroy

  has_rich_text :body

  before_create -> { self.client_message_id ||= Random.uuid } # Bots don't care
  after_create_commit -> { room.receive(self) }

  scope :ordered, -> { order(:created_at) }
  scope :with_creator, -> { preload(creator: :avatar_attachment) }
  scope :with_attachment_details, -> {
    with_rich_text_body_and_embeds
    with_attached_attachment
      .includes(attachment_blob: :variant_records)
  }
  scope :with_boosts, -> { includes(boosts: :booster) }

  def plain_text_body
    body.to_plain_text.presence || attachment&.filename&.to_s || ""
  end

  def to_key
    [ client_message_id ]
  end

  def content_type
    case
    when attachment?    then "attachment"
    when sound.present? then "sound"
    else                     "text"
    end.inquiry
  end

  def sound
    plain_text_body.match(/\A\/play (?<name>\w+)\z/) do |match|
      Sound.find_by_name match[:name]
    end
  end
end



================================================
FILE: app/models/purchaser.rb
================================================
class Purchaser
  def initialize
    load_configuration
  end

  def registered?
    @purchased_by.present?
  end

  def name
    @purchased_by["name"] if registered?
  end

  private
    def load_configuration
      path = Rails.root.join("config/purchased_by.yml")
      @purchased_by = YAML.load_file(path) if path.exist?
    end
end



================================================
FILE: app/models/push.rb
================================================
module Push
  def self.table_name_prefix
    "push_"
  end
end



================================================
FILE: app/models/room.rb
================================================
class Room < ApplicationRecord
  has_many :memberships, dependent: :delete_all do
    def grant_to(users)
      room = proxy_association.owner
      Membership.insert_all(Array(users).collect { |user| { room_id: room.id, user_id: user.id, involvement: room.default_involvement } })
    end

    def revoke_from(users)
      destroy_by user: users
    end

    def revise(granted: [], revoked: [])
      transaction do
        grant_to(granted) if granted.present?
        revoke_from(revoked) if revoked.present?
      end
    end
  end

  has_many :users, through: :memberships
  has_many :messages, dependent: :destroy

  belongs_to :creator, class_name: "User", default: -> { Current.user }

  scope :opens,           -> { where(type: "Rooms::Open") }
  scope :closeds,         -> { where(type: "Rooms::Closed") }
  scope :directs,         -> { where(type: "Rooms::Direct") }
  scope :without_directs, -> { where.not(type: "Rooms::Direct") }

  scope :ordered, -> { order("LOWER(name)") }

  class << self
    def create_for(attributes, users:)
      transaction do
        create!(attributes).tap do |room|
          room.memberships.grant_to users
        end
      end
    end

    def original
      order(:created_at).first
    end
  end

  def receive(message)
    unread_memberships(message)
    push_later(message)
  end

  def open?
    is_a?(Rooms::Open)
  end

  def closed?
    is_a?(Rooms::Closed)
  end

  def direct?
    is_a?(Rooms::Direct)
  end

  def default_involvement
    "mentions"
  end

  private
    def unread_memberships(message)
      memberships.visible.disconnected.where.not(user: message.creator).update_all(unread_at: message.created_at, updated_at: Time.current)
    end

    def push_later(message)
      Room::PushMessageJob.perform_later(self, message)
    end
end



================================================
FILE: app/models/search.rb
================================================
class Search < ApplicationRecord
  belongs_to :user

  after_create :trim_recent_searches

  scope :ordered, -> { order(updated_at: :desc) }

  class << self
    def record(query)
      find_or_create_by(query: query).touch
    end
  end

  private
    def trim_recent_searches
      user.searches.excluding(user.searches.ordered.limit(10)).destroy_all
    end
end



================================================
FILE: app/models/session.rb
================================================
class Session < ApplicationRecord
  ACTIVITY_REFRESH_RATE = 1.hour

  has_secure_token

  belongs_to :user

  before_create { self.last_active_at ||= Time.now }

  def self.start!(user_agent:, ip_address:)
    create! user_agent: user_agent, ip_address: ip_address
  end

  def resume(user_agent:, ip_address:)
    if last_active_at.before?(ACTIVITY_REFRESH_RATE.ago)
      update! user_agent: user_agent, ip_address: ip_address, last_active_at: Time.now
    end
  end
end



================================================
FILE: app/models/sound.rb
================================================
class Sound
  class Image < Struct.new(:asset_path, :width, :height)
    def initialize(name:, width:, height:)
      super "sounds/#{name}", width, height
    end
  end

  def self.find_by_name(name)
    INDEX[name]
  end

  def self.names
    INDEX.keys.sort
  end

  attr_reader :name, :asset_path, :image, :text

  def initialize(name:, text: nil, image: nil)
    @name = name
    @asset_path = "#{name}.mp3"

    if image
      @image = Image.new(**image)
    else
      @text = text
    end
  end

  BUILTIN = [
    new(name: "56k", image: { name: "56k.webp", width: 79, height: 33 }),
    new(name: "bell", text: "🔔"),
    new(name: "bezos", text: "😆💭"),
    new(name: "bueller", text: "anyone?"),
    new(name: "butts", text: "👐 🚬"),
    new(name: "clowntown", image: { name: "clowntown.webp", width: 210, height: 150 }),
    new(name: "cottoneyejoe", text: "🎶🙉🎶 "),
    new(name: "crickets", text: "hears crickets chirping"),
    new(name: "curb", image: { name: "curb.webp", width: 150, height: 101 }),
    new(name: "dadgummit", text: "dad gummit!! 🎣"),
    new(name: "dangerzone", image: { name: "dangerzone.webp", width: 157, height: 32 }),
    new(name: "danielsan", text: "🎆 🏆 🎆"),
    new(name: "deeper", image: { name: "top.webp", width: 188, height: 80 }),
    new(name: "ballmer", text: "developers!"),
    new(name: "donotwant", image: { name: "donotwant.webp", width: 150, height: 150 }),
    new(name: "drama", image: { name: "drama.webp", width: 300, height: 16 }),
    new(name: "flawless", text: "#flawless"),
    new(name: "glados", text: "🤖💢"),
    new(name: "gogogo", text: "Go, go, go!"),
    new(name: "greatjob", image: { name: "greatjob.webp", width: 79, height: 16 }),
    new(name: "greyjoy", text: "😖🎺"),
    new(name: "guarantee", text: "guarantees it 👌"),
    new(name: "heygirl", text: "✨💁✨"),
    new(name: "honk", text: "HONK"),
    new(name: "horn", text: "🐶 ✂️ 🐱"),
    new(name: "horror", text: "💀 💀 💀 💀 💀 💀 💀"),
    new(name: "inconceivable", text: "doesn't think it means what you think it means…"),
    new(name: "letitgo", text: "❄️👩❄️⛄️❄️"),
    new(name: "live", text: "is DOING IT LIVE"),
    new(name: "loggins", image: { name: "loggins.webp", width: 200, height: 151 }),
    new(name: "makeitso", text: "make it so 👉"),
    new(name: "noooo", text: "👸💀😒"),
    new(name: "nyan", image: { name: "nyan.webp", width: 36, height: 15 }),
    new(name: "ohmy", text: "raises an eyebrow 😏"),
    new(name: "ohyeah", text: "isn't playing by the rules"),
    new(name: "pushit", image: { name: "pushit.webp", width: 104, height: 15 }),
    new(name: "rimshot", text: "plays a rimshot"),
    new(name: "rollout", text: "is rolling out 🚗"),
    new(name: "rumble", image: { name: "rumble.webp", width: 220, height: 150 }),
    new(name: "sax", text: "🌇🎷🎶"),
    new(name: "secret", text: "found a secret area 🔑"),
    new(name: "sexyback", text: "🔞"),
    new(name: "story", text: "and now you know…"),
    new(name: "tada", text: "plays a fanfare 🎏"),
    new(name: "tmyk", text: "✨ ⭐️ The More You Know ✨ ⭐️"),
    new(name: "totes", text: "😁👍"),
    new(name: "trololo", text: "трололо"),
    new(name: "trombone", text: "plays a sad trombone"),
    new(name: "unix", text: "knows this 💻"),
    new(name: "vuvuzela", text: "======<() ~ ♪ ~♫"),
    new(name: "what", image: { name: "what.webp", width: 100, height: 131 }),
    new(name: "whoomp", text: "👏‼️😎"),
    new(name: "wups", text: "wups!"),
    new(name: "yay", image: { name: "yay.webp", width: 103, height: 50 }),
    new(name: "yeah", image: { name: "yeah.webp", width: 104, height: 15 }),
    new(name: "yodel", text: "📣🗻🙉")
  ]

  INDEX = BUILTIN.index_by(&:name)
end



================================================
FILE: app/models/user.rb
================================================
class User < ApplicationRecord
  include Avatar, Bot, Mentionable, Role, Transferable

  has_many :memberships, dependent: :delete_all
  has_many :rooms, through: :memberships

  has_many :reachable_messages, through: :rooms, source: :messages
  has_many :messages, dependent: :destroy, foreign_key: :creator_id

  has_many :push_subscriptions, class_name: "Push::Subscription", dependent: :delete_all

  has_many :boosts, dependent: :destroy, foreign_key: :booster_id
  has_many :searches, dependent: :delete_all

  has_many :sessions, dependent: :destroy

  scope :active, -> { where(active: true) }

  has_secure_password validations: false

  after_create_commit :grant_membership_to_open_rooms

  scope :ordered, -> { order("LOWER(name)") }
  scope :filtered_by, ->(query) { where("name like ?", "%#{query}%") }

  def initials
    name.scan(/\b\w/).join
  end

  def title
    [ name, bio ].compact_blank.join(" – ")
  end

  def deactivate
    transaction do
      close_remote_connections

      memberships.without_direct_rooms.delete_all
      push_subscriptions.delete_all
      searches.delete_all
      sessions.delete_all

      update! active: false, email_address: deactived_email_address
    end
  end

  def deactivated?
    !active?
  end

  def reset_remote_connections
    close_remote_connections reconnect: true
  end

  private
    def grant_membership_to_open_rooms
      Membership.insert_all(Rooms::Open.pluck(:id).collect { |room_id| { room_id: room_id, user_id: id } })
    end

    def deactived_email_address
      email_address&.gsub(/@/, "-deactivated-#{SecureRandom.uuid}@")
    end

    def close_remote_connections(reconnect: false)
      ActionCable.server.remote_connections.where(current_user: self).disconnect reconnect: reconnect
    end
end



================================================
FILE: app/models/webhook.rb
================================================
require "net/http"
require "uri"

class Webhook < ApplicationRecord
  ENDPOINT_TIMEOUT = 7.seconds

  belongs_to :user

  def deliver(message)
    post(payload(message)).tap do |response|
      if text = extract_text_from(response)
        receive_text_reply_to(message.room, text: text)
      elsif attachment = extract_attachment_from(response)
        receive_attachment_reply_to(message.room, attachment: attachment)
      end
    end
  rescue Net::OpenTimeout, Net::ReadTimeout
    receive_text_reply_to message.room, text: "Failed to respond within #{ENDPOINT_TIMEOUT} seconds"
  end

  private
    def post(payload)
      http.request \
        Net::HTTP::Post.new(uri, "Content-Type" => "application/json").tap { |request| request.body = payload }
    end

    def http
      Net::HTTP.new(uri.host, uri.port).tap do |http|
        http.use_ssl = (uri.scheme == "https")
        http.open_timeout = ENDPOINT_TIMEOUT
        http.read_timeout = ENDPOINT_TIMEOUT
      end
    end

    def uri
      @uri ||= URI(url)
    end

    def payload(message)
      {
        user:    { id: message.creator.id, name: message.creator.name },
        room:    { id: message.room.id, name: message.room.name, path: room_bot_messages_path(message) },
        message: { id: message.id, body: { html: message.body.body, plain: without_recipient_mentions(message.plain_text_body) }, path: message_path(message) }
      }.to_json
    end

    def message_path(message)
      Rails.application.routes.url_helpers.room_at_message_path(message.room, message)
    end

    def room_bot_messages_path(message)
      Rails.application.routes.url_helpers.room_bot_messages_path(message.room, user.bot_key)
    end

    def extract_text_from(response)
      response.body.dup.force_encoding("UTF-8") if response.code == "200" && response.content_type.in?(%w[ text/html text/plain ])
    end

    def receive_text_reply_to(room, text:)
      room.messages.create!(body: text, creator: user).broadcast_create
    end

    def extract_attachment_from(response)
      if response.content_type && mime_type = Mime::Type.lookup(response.content_type)
        ActiveStorage::Blob.create_and_upload! \
          io: StringIO.new(response.body), filename: "attachment.#{mime_type.symbol}", content_type: mime_type.to_s
      end
    end

    def receive_attachment_reply_to(room, attachment:)
      room.messages.create_with_attachment!(attachment: attachment, creator: user).broadcast_create
    end

    def without_recipient_mentions(body)
      body \
        .gsub(user.attachable_plain_text_representation(nil), "") # Remove mentions of the recipient user
        .gsub(/\A\p{Space}+|\p{Space}+\z/, "") # Remove leading and trailing whitespace uncluding unicode spaces
    end
end



================================================
FILE: app/models/account/joinable.rb
================================================
module Account::Joinable
  extend ActiveSupport::Concern

  included do
    before_create { self.join_code = generate_join_code }
  end

  def reset_join_code
    update! join_code: generate_join_code
  end

  private
    def generate_join_code
      SecureRandom.alphanumeric(12).scan(/.{4}/).join("-")
    end
end



================================================
FILE: app/models/concerns/.keep
================================================
[Empty file]


================================================
FILE: app/models/membership/connectable.rb
================================================
module Membership::Connectable
  extend ActiveSupport::Concern

  CONNECTION_TTL = 60.seconds

  included do
    scope :connected,    -> { where(connected_at: CONNECTION_TTL.ago..) }
    scope :disconnected, -> { where(connected_at: [ nil, ...CONNECTION_TTL.ago ]) }
  end

  class_methods do
    def disconnect_all
      connected.update_all connected_at: nil, connections: 0, updated_at: Time.current
    end

    def connect(membership, connections)
      where(id: membership.id).update_all(connections: connections, connected_at: Time.current, unread_at: nil)
    end
  end

  def connected?
    connected_at? && connected_at >= CONNECTION_TTL.ago
  end

  def present
    self.class.connect(self, connected? ? connections + 1 : 1)
  end

  def connected
    increment_connections
    touch :connected_at
  end

  def disconnected
    decrement_connections
    update! connected_at: nil if connections < 1
  end

  def refresh_connection
    increment_connections unless connected?
    touch :connected_at
  end

  def increment_connections
    connected? ? increment!(:connections, touch: true) : update!(connections: 1)
  end

  def decrement_connections
    connected? ? decrement!(:connections, touch: true) : update!(connections: 0)
  end
end



================================================
FILE: app/models/message/attachment.rb
================================================
module Message::Attachment
  extend ActiveSupport::Concern

  THUMBNAIL_MAX_WIDTH = 1200
  THUMBNAIL_MAX_HEIGHT = 800

  included do
    has_one_attached :attachment do |attachable|
      attachable.variant :thumb, resize_to_limit: [ THUMBNAIL_MAX_WIDTH, THUMBNAIL_MAX_HEIGHT ]
    end
  end

  module ClassMethods
    def create_with_attachment!(attributes)
      create!(attributes).tap(&:process_attachment)
    end
  end

  def attachment?
    attachment.attached?
  end

  def process_attachment
    ensure_attachment_analyzed
    process_attachment_thumbnail
  end

  private
    def ensure_attachment_analyzed
      attachment&.analyze
    end

    def process_attachment_thumbnail
      case
      when attachment.video?
        attachment.preview(format: :webp).processed
      when attachment.representable?
        attachment.representation(:thumb).processed
      end
    end
end



================================================
FILE: app/models/message/broadcasts.rb
================================================
module Message::Broadcasts
  def broadcast_create
    broadcast_append_to room, :messages, target: [ room, :messages ]
    ActionCable.server.broadcast("unread_rooms", { roomId: room.id })
  end
end



================================================
FILE: app/models/message/mentionee.rb
================================================
module Message::Mentionee
  extend ActiveSupport::Concern

  def mentionees
    room.users.where(id: mentioned_users.map(&:id))
  end

  private
    def mentioned_users
      if body.body
        body.body.attachables.grep(User).uniq
      else
        []
      end
    end
end



================================================
FILE: app/models/message/pagination.rb
================================================
module Message::Pagination
  extend ActiveSupport::Concern

  PAGE_SIZE = 40

  included do
    scope :last_page, -> { ordered.last(PAGE_SIZE) }
    scope :first_page, -> { ordered.first(PAGE_SIZE) }

    scope :before, ->(message) { where("created_at < ?", message.created_at) }
    scope :after, ->(message) { where("created_at > ?", message.created_at) }

    scope :page_before, ->(message) { before(message).last_page }
    scope :page_after, ->(message) { after(message).first_page }

    scope :page_created_since, ->(time) { where("created_at > ?", time).first_page }
    scope :page_updated_since, ->(time) { where("updated_at > ?", time).last_page }
  end

  class_methods do
    def page_around(message)
      page_before(message) + [ message ] + page_after(message)
    end

    def paged?
      count > PAGE_SIZE
    end
  end
end



================================================
FILE: app/models/message/searchable.rb
================================================
module Message::Searchable
  extend ActiveSupport::Concern

  included do
    after_create_commit  :create_in_index
    after_update_commit  :update_in_index
    after_destroy_commit :remove_from_index

    scope :search, ->(query) { joins("join message_search_index idx on messages.id = idx.rowid").where("idx.body match ?", query).ordered }
  end

  private
    def create_in_index
      execute_sql_with_binds "insert into message_search_index(rowid, body) values (?, ?)", id, plain_text_body
    end

    def update_in_index
      execute_sql_with_binds "update message_search_index set body = ? where rowid = ?", plain_text_body, id
    end

    def remove_from_index
      execute_sql_with_binds "delete from message_search_index where rowid = ?", id
    end

    def execute_sql_with_binds(*statement)
      self.class.connection.execute self.class.sanitize_sql(statement)
    end
end



================================================
FILE: app/models/opengraph/document.rb
================================================
require "nokogiri"

class Opengraph::Document
  attr_accessor :html

  def initialize(html)
    @html = Nokogiri::HTML(html)
  end

  def opengraph_attributes
    @opengraph_attributes ||= extract_opengraph_attributes
  end

  private
    def extract_opengraph_attributes
      opengraph_tags = html.xpath("//*/meta[starts-with(@property, \"og:\") or starts-with(@name, \"og:\")]").map do |tag|
        key = tag.key?("property") ? "property" : "name"
        [ tag[key].gsub("og:", "").to_sym, sanitize_content(tag["content"]) ] if tag["content"].present?
      end

      Hash[opengraph_tags.compact].slice(*Opengraph::Metadata::ATTRIBUTES)
    end

    def sanitize_content(content)
      html.meta_encoding ? content : content.encode("UTF-8", "binary", invalid: :replace, undef: :replace, replace: "")
    end
end



================================================
FILE: app/models/opengraph/fetch.rb
================================================
require "net/http"
require "restricted_http/private_network_guard"

class Opengraph::Fetch
  ALLOWED_DOCUMENT_CONTENT_TYPE = "text/html"
  MAX_BODY_SIZE = 5.megabytes
  MAX_REDIRECTS = 10

  class TooManyRedirectsError < StandardError; end
  class RedirectDeniedError < StandardError; end

  def fetch_document(url, ip: RestrictedHTTP::PrivateNetworkGuard.resolve(url.host))
    request(url, Net::HTTP::Get, ip: ip) do |response|
      return body_if_acceptable(response)
    end
  end

  def fetch_content_type(url, ip: RestrictedHTTP::PrivateNetworkGuard.resolve(url.host))
    request(url, Net::HTTP::Head, ip: ip) do |response|
      return response["Content-Type"]
    end
  end

  private
    def request(url, request_class, ip:)
      MAX_REDIRECTS.times do
        Net::HTTP.start(url.host, url.port, ipaddr: ip, use_ssl: url.scheme == "https") do |http|
          http.request request_class.new(url) do |response|
            if response.is_a?(Net::HTTPRedirection)
              url, ip = resolve_redirect(response["location"])
            else
              yield response
            end
          end
        end
      end

      raise TooManyRedirectsError
    end

    def resolve_redirect(location)
      url = URI.parse(location)
      raise RedirectDeniedError unless url.is_a?(URI::HTTP)
      [ url, RestrictedHTTP::PrivateNetworkGuard.resolve(url.host) ]
    end

    def body_if_acceptable(response)
      size_restricted_body(response) if response_valid?(response)
    end

    def size_restricted_body(response)
      # We've already checked the Content-Length header, to try to avoid reading
      # the body of any large responses. But that header could be wrong or
      # missing. To be on the safe side, we'll read the body in chunks, and bail
      # if it runs over our size limit.
      StringIO.new.tap do |body|
        response.read_body do |chunk|
          return nil if body.string.bytesize + chunk.bytesize > MAX_BODY_SIZE
          body << chunk
        end
      end.string
    end

    def response_valid?(response)
      status_valid?(response) && content_type_valid?(response) && content_length_valid?(response)
    end

    def status_valid?(response)
      response.is_a?(Net::HTTPOK)
    end

    def content_type_valid?(response)
      response.content_type == ALLOWED_DOCUMENT_CONTENT_TYPE
    end

    def content_length_valid?(response)
      response.content_length.to_i <= MAX_BODY_SIZE
    end
end



================================================
FILE: app/models/opengraph/location.rb
================================================
require "restricted_http/private_network_guard"

class Opengraph::Location
  include ActiveModel::Validations

  attr_accessor :url, :parsed_url

  validate :validate_url, :validate_url_is_public

  def initialize(url)
    @url = url
  end

  def read_html
    fetch_html if valid? && !url.match(FILES_AND_MEDIA_URL_REGEX)
  end

  def fetch_content_type
    Opengraph::Fetch.new.fetch_content_type(parsed_url, ip: resolved_ip) if valid?
  rescue => e
    Rails.logger.warn "Failed to fetch #{parsed_url} at #{resolved_ip} (#{e})"
    nil
  end

  def resolved_ip
    return @resolved_ip if defined? @resolved_ip
    @resolved_ip = RestrictedHTTP::PrivateNetworkGuard.resolve(parsed_url.host) rescue nil
  end

  private
    FILES_AND_MEDIA_URL_REGEX = /\bhttps?:\/\/\S+\.(?:zip|tar|tar\.gz|tar\.bz2|tar\.xz|gz|bz2|rar|7z|dmg|exe|msi|pkg|deb|iso|jpg|jpeg|png|gif|bmp|mp4|mov|avi|mkv|wmv|flv|heic|heif|mp3|wav|ogg|aac|wma|webm|ogv|mpg|mpeg)\b/

    def validate_url
      errors.add :url, "is invalid" unless parsed_url.is_a?(URI::HTTP)
    end

    def validate_url_is_public
      errors.add :url, "is not public" unless resolved_ip
    end

    def parsed_url
      return @parsed_url if defined? @parsed_url
      @parsed_url = URI.parse(url) rescue nil
    end

    def fetch_html
      Opengraph::Fetch.new.fetch_document(parsed_url, ip: resolved_ip)
    rescue => e
      Rails.logger.warn "Failed to fetch #{parsed_url} at #{resolved_ip} (#{e})"
      nil
    end
end



================================================
FILE: app/models/opengraph/metadata.rb
================================================
class Opengraph::Metadata
  include ActiveModel::Model
  include ActiveModel::Validations::Callbacks
  include ActionView::Helpers::SanitizeHelper

  include Fetching

  ATTRIBUTES = %i[ title url image description ]
  attr_accessor *ATTRIBUTES

  before_validation :sanitize_fields

  validates_presence_of :title, :url, :description
  validate :ensure_valid_image_url

  private
    def sanitize_fields
      self.title = sanitize(strip_tags(title))
      self.description = sanitize(strip_tags(description))
    end

    def ensure_valid_image_url
      if image.present?
        errors.add :image, "url is invalid" unless Opengraph::Location.new(image).valid?
      end
    end
end



================================================
FILE: app/models/opengraph/metadata/fetching.rb
================================================
module Opengraph::Metadata::Fetching
  extend ActiveSupport::Concern

  module ClassMethods
    def from_url(url)
      document = fetch_document(url)
      attributes = document.opengraph_attributes
      new attributes.merge(url: valid_canonical_url(attributes[:url], url), image: valid_image_content_type(attributes[:image]))
    end

    private
      TWITTER_HOSTS = %w[ twitter.com www.twitter.com x.com www.x.com ]
      FX_TWITTER_HOST = "fxtwitter.com"
      ALLOWED_IMAGE_CONTENT_TYPES = %w[ image/jpeg image/png image/gif image/webp ]

      def fetch_document(untrusted_url)
        tweet_url?(untrusted_url) ? fetch_fxtwitter_document(untrusted_url) : fetch_non_fxtwitter_document(untrusted_url)
      end

      def fetch_fxtwitter_document(untrusted_url)
        fxtwitter_url = replace_twitter_domain_for_opengraph_support(untrusted_url)

        Opengraph::Location.new(fxtwitter_url).then do |location|
          # fxtwitter.com HTML response does not include character encoding, resulting in emojis and quotes not
          # being encoded properly.
          Opengraph::Document.new(location.read_html.force_encoding("UTF-8"))
        end
      end

      def fetch_non_fxtwitter_document(untrusted_url)
        Opengraph::Location.new(untrusted_url).then do |location|
          Opengraph::Document.new(location.read_html)
        end
      end

      def valid_canonical_url(url, fallback)
        Opengraph::Location.new(url).valid? ? url : fallback
      end

      def valid_image_content_type(image)
        return unless image.present?

        content_type = Opengraph::Location.new(URI.parse(image)).fetch_content_type&.downcase
        content_type.in?(ALLOWED_IMAGE_CONTENT_TYPES) ? image : nil
      rescue => e
        Rails.logger.warn "Failed to fetch image content tpye: #{image} (#{e})"
        nil
      end

      # Twitter.com and X.com do not support Opengraph at the moment.
      # Piggybacking on fxtwitter.com allows us to have twitter unfurling
      # without relying on fxtwitter.com's future availability.
      def replace_twitter_domain_for_opengraph_support(url)
        uri = URI.parse(url)
        uri.host = FX_TWITTER_HOST if uri.host.in?(TWITTER_HOSTS)
        uri.to_s
      rescue URI::InvalidURIError
        nil
      end

      def tweet_url?(url)
        uri = URI.parse(url)
        uri.host.in?(TWITTER_HOSTS) && uri.path.present? && uri.path != "/"
      rescue URI::InvalidURIError
        nil
      end
  end
end



================================================
FILE: app/models/push/subscription.rb
================================================
class Push::Subscription < ApplicationRecord
  belongs_to :user

  def notification(**params)
    WebPush::Notification.new(**params, badge: user.memberships.unread.count, endpoint: endpoint, p256dh_key: p256dh_key, auth_key: auth_key)
  end
end



================================================
FILE: app/models/room/message_pusher.rb
================================================
class Room::MessagePusher
  attr_reader :room, :message

  def initialize(room:, message:)
    @room, @message = room, message
  end

  def push
    build_payload.tap do |payload|
      push_to_users_involved_in_everything(payload)
      push_to_users_involved_in_mentions(payload)
    end
  end

  private
    def build_payload
      if room.direct?
        build_direct_payload
      else
        build_shared_payload
      end
    end

    def build_direct_payload
      {
        title: message.creator.name,
        body: message.plain_text_body,
        path: Rails.application.routes.url_helpers.room_path(room)
      }
    end

    def build_shared_payload
      {
        title: room.name,
        body: "#{message.creator.name}: #{message.plain_text_body}",
        path: Rails.application.routes.url_helpers.room_path(room)
      }
    end

    def push_to_users_involved_in_everything(payload)
      enqueue_payload_for_delivery payload, push_subscriptions_for_users_involved_in_everything
    end

    def push_to_users_involved_in_mentions(payload)
      enqueue_payload_for_delivery payload, push_subscriptions_for_mentionable_users(message.mentionees)
    end

    def push_subscriptions_for_users_involved_in_everything
      relevant_subscriptions.merge(Membership.involved_in_everything)
    end

    def push_subscriptions_for_mentionable_users(mentionees)
      relevant_subscriptions.merge(Membership.involved_in_mentions).where(user_id: mentionees.ids)
    end

    def relevant_subscriptions
      Push::Subscription
        .joins(user: :memberships)
        .merge(Membership.visible.disconnected.where(room: room).where.not(user: message.creator))
    end

    def enqueue_payload_for_delivery(payload, subscriptions)
      Rails.configuration.x.web_push_pool.queue(payload, subscriptions)
    end
end



================================================
FILE: app/models/rooms/closed.rb
================================================
# Rooms where only a subset of all users on the account have been explicited granted membership.
class Rooms::Closed < Room
end



================================================
FILE: app/models/rooms/direct.rb
================================================
# Rooms for direct message chats between users. These act as a singleton, so a single set of users will
# always refer to the same direct room.
class Rooms::Direct < Room
  class << self
    def find_or_create_for(users)
      find_for(users) || create_for({}, users: users)
    end

    private
      # FIXME: Find a more performant algorithm that won't be a problem on accounts with 10K+ direct rooms,
      # which could be to store the membership id list as a hash on the room, and use that for lookup.
      def find_for(users)
        all.joins(:users).detect do |room|
          Set.new(room.user_ids) == Set.new(users.pluck(:id))
        end
      end
  end

  def default_involvement
    "everything"
  end
end



================================================
FILE: app/models/rooms/open.rb
================================================
# Rooms open to all users on the account. When a new user is added to the account, they're automatically granted membership.
class Rooms::Open < Room
  after_save_commit :grant_access_to_all_users

  private
    def grant_access_to_all_users
      memberships.grant_to(User.active) if type_previously_changed?(to: "Rooms::Open")
    end
end



================================================
FILE: app/models/user/avatar.rb
================================================
module User::Avatar
  extend ActiveSupport::Concern

  included do
    has_one_attached :avatar
  end

  class_methods do
    def from_avatar_token(sid)
      find_signed!(sid, purpose: :avatar)
    end
  end

  def avatar_token
    signed_id(purpose: :avatar)
  end
end



================================================
FILE: app/models/user/bot.rb
================================================
module User::Bot
  extend ActiveSupport::Concern

  included do
    scope :active_bots, -> { active.where(role: :bot) }
    scope :without_bots, -> { where.not(role: :bot) }
    has_one :webhook, dependent: :delete
  end

  module ClassMethods
    def create_bot!(attributes)
      bot_token = generate_bot_token
      webhook_url = attributes.delete(:webhook_url)

      User.create!(**attributes, bot_token: bot_token, role: :bot).tap do |user|
        user.create_webhook!(url: webhook_url) if webhook_url
      end
    end

    def authenticate_bot(bot_key)
      bot_id, bot_token = bot_key.split("-")
      active_bots.find_by(id: bot_id, bot_token: bot_token)
    end

    def generate_bot_token
      SecureRandom.alphanumeric(12)
    end
  end

  def update_bot!(attributes)
    transaction do
      update_webhook_url!(attributes.delete(:webhook_url))
      update!(attributes)
    end
  end


  def bot_key
    "#{id}-#{bot_token}"
  end

  def reset_bot_key
    update! bot_token: self.class.generate_bot_token
  end


  def webhook_url
    webhook&.url
  end

  def deliver_webhook_later(message)
    Bot::WebhookJob.perform_later(self, message) if webhook
  end

  def deliver_webhook(message)
    webhook.deliver(message)
  end


  private
    def update_webhook_url!(url)
      if url.present?
        webhook&.update!(url: url) || create_webhook!(url: url)
      else
        webhook&.destroy
      end
    end
end



================================================
FILE: app/models/user/mentionable.rb
================================================
module User::Mentionable
  include ActionText::Attachable

  def to_attachable_partial_path
    "users/mention"
  end

  def to_trix_content_attachment_partial_path
    "users/mention"
  end

  def attachable_plain_text_representation(caption)
    "@#{name}"
  end
end



================================================
FILE: app/models/user/role.rb
================================================
module User::Role
  extend ActiveSupport::Concern

  included do
    enum :role, %i[ member administrator bot ]
  end

  def can_administer?(record = nil)
    administrator? || self == record&.creator || record&.new_record?
  end
end



================================================
FILE: app/models/user/transferable.rb
================================================
module User::Transferable
  extend ActiveSupport::Concern

  TRANSFER_LINK_EXPIRY_DURATION = 4.hours

  class_methods do
    def find_by_transfer_id(id)
      find_signed(id, purpose: :transfer)
    end
  end

  def transfer_id
    signed_id(purpose: :transfer, expires_in: TRANSFER_LINK_EXPIRY_DURATION)
  end
end



================================================
FILE: app/views/accounts/_help_contact.html.erb
================================================
<% if owner = User.administrator.first %>
  <div class="txt-align-center margin-block-double full-width">
    <%= link_to "mailto:\"#{owner.name}\" <#{owner.email_address}>", class: "btn center", title: "Email #{owner.name}" do %>
      <%= image_tag "lifebuoy.svg", aria: { hidden: "true" } %>
      <span><%= owner.email_address %></span>
    <% end %>

    <div class="txt-align-center center margin-block txt-subtle">Campfire&trade; version <%= version_badge %></div>
  </div>
<% end %>



================================================
FILE: app/views/accounts/_invite.html.erb
================================================
<div class="flex flex-column align-center gap">
  <% url = join_url(Current.account.join_code) %>

  <label class="flex flex-column gap full-width" style="--row-gap: 0.5em">
    <strong id="invite_label" class="invite-label">Share to invite more people</strong>
    <span class="flex align-center gap input input--actor fill-white">
      <%= image_tag "person-add.svg", aria: { hidden: "true" }, size: 20, class: "colorize--black" %>
      <input type="text" class="input" id="invite_url" value="<%= url %>" aria-labelledby="invite_label" readonly>
    </span>
  </label>

  <div class="flex align-center gap">
    <%= link_to_zoom_qr_code(url) do %>
      <span class="for-screen-reader">Show join link QR code</span>
      <%= image_tag "qr-code.svg", aria: { hidden: "true" }, size: 20, class: "colorize--black" %>
    <% end %>

    <%= button_to_copy_to_clipboard(url) do %>
      <span class="for-screen-reader">Copy join link</span>
      <%= image_tag "copy-paste.svg", aria: { hidden: "true" }, size: 20, class: "colorize--black" %>
    <% end %>

    <%= web_share_session_button(url, "Link to join Campfire", "Hit this link to join me in Campfire and start chatting.") do %>
      <span class="for-screen-reader">Share join link</span>
      <%= image_tag "share.svg", aria: { hidden: "true" }, size: 20, class: "colorize--black" %>
    <% end %>

    <% if Current.user.can_administer? %>
      <%= button_to account_join_code_path, class: "btn btn--regenerate" do %>
        <%= image_tag "refresh.svg", aria: { hidden: "true" }, size: 20, class: "colorize--black" %>
        <span class="for-screen-reader">Regenerate join link</span>
      <% end %>
    <% end %>
  </div>
</div>



================================================
FILE: app/views/accounts/edit.html.erb
================================================
<% @page_title = "Account settings" %>

<% content_for :nav do %>
  <div class="flex-item-justify-start">
    <%= link_back_to_last_room_visited %>
  </div>

  <% if Current.user.administrator? %>
    <div class="flex align-center gap flex-item-justify-end">
      <%= link_to account_bots_path, class: "btn", style: "view-transition-name: chat-bots" do %>
        <%= image_tag "bot.svg", aria: { hidden: "true" }, size: 20 %>
        <span class="for-screen-reader">Set up chat bots</span>
      <% end %>

      <%= link_to edit_account_custom_styles_path, class: "btn", style: "view-transition-name: custom-styles" do %>
        <%= image_tag "art.svg", size: 20, aria: { hidden: "true" } %>
        <span class="for-screen-reader">Custom styles</span>
      <% end %>
    </div>
  <% end %>
<% end %>

<section class="panel txt-align-center flex flex-column gap" style="view-transition-name: account-settings">
  <% if Current.user.can_administer? %>
    <div class="align-center center avatar__form gap" data-controller="upload-preview">
      <%= form_with model: @account, method: :patch, class: "txt--medium", data: { controller: "form" } do |form| %>
        <label class="btn input--file">
          <%= image_tag "camera.svg", aria: { hidden: "true" }, size: 20 %>
          <%= form.file_field :logo, class: "input", accept: "image/*",
                data: { action: "upload-preview#previewImage change->form#submit" } %>
          <span class="for-screen-reader">Upload logo</span>
        </label>
      <% end %>

      <%= form_with model: @account, method: :patch, data: { controller: "form" } do |form| %>
        <label class="btn avatar input--file account-logo txt-xx-large">
          <%= image_tag fresh_account_logo_path, role: "presentation", size: 48, data: { upload_preview_target: "image" } %>
          <%= form.file_field :logo, class: "input", accept: "image/*",
                data: { action: "upload-preview#previewImage change->form#submit" } %>
          <span class="for-screen-reader">Upload logo</span>
        </label>
      <% end %>

      <% if @account.logo.attached? %>
        <%= button_to fresh_account_logo_path, method: :delete, class: "btn btn--negative txt-small avatar__delete-btn" do %>
          <%= image_tag "minus.svg", aria: { hidden: "true" }, size: 20 %>
          <span class="for-screen-reader">Delete logo</span>
        <% end %>
      <% end %>
    </div>

    <%= form_with model: @account, data: { controller: "form" }, class: "flex flex-column gap" do |form| %>
      <div class="flex align-center gap">
        <%= translation_button(:account_name) %>

        <label class="flex align-center gap flex-item-grow">
          <%= form.text_field :name, class: "input txt-large", autocomplete: "off", placeholder: "Name this account", autofocus: true,
                data: { action: "keydown.enter->form#submit" } %>
        </label>

        <%= form.button class: "btn btn--reversed center", type: "submit" do %>
          <%= image_tag "check.svg", aria: { hidden: "true" }, size: 20 %>
          <span class="for-screen-reader">Save changes</span>
        <% end %>
      </div>
    <% end %>
  <% else %>
    <%= account_logo_tag style: "txt-xx-large center" %>
    <h1 class="flex-item-grow txt-x-large"><%= @account.name %></h1>
  <% end %>

  <div class="margin-block pad-inline pad-block-start fill-shade border-radius">
    <%= render "accounts/invite" %>

    <hr class="margin-block separator full-width" style="--border-style: solid">

    <menu class="flex flex-column gap margin-none pad">
      <turbo-frame id="account_users">
        <%= render partial: "accounts/users/user", collection: @page.records, as: :user %>
        <%= render "accounts/users/next_page_container", page: @page.next_param unless @page.last? %>
      </turbo-frame>
    </menu>
  </div>
</section>

<% content_for :footer do %>
  <div class="txt-align-center center margin-block-double txt-subtle">Campfire&trade; version <%= version_badge %></div>
<% end %>



================================================
FILE: app/views/accounts/bots/_bot.html.erb
================================================
<li class="flex flex-column gap flush fill-shade border-radius pad-block pad-inline-double">
  <div class="flex align-center gap">
    <figure class="avatar flex-item--no-shrink" style="--avatar-size: 2.65em;">
      <%= avatar_tag bot, loading: :lazy %>
    </figure>

    <div class="min-width">
      <div class="overflow-ellipsis txt-large"><strong><%= bot.name %></strong></div>
    </div>

    <%= link_to edit_account_bot_path(bot), class: "btn flex-item-justify-end", style: "view-transition-name: chat-bot-#{ bot.id }" do %>
      <%= image_tag "pencil.svg", aria: { hidden: "true" }, size: 20 %>
      <span class="for-screen-reader">Edit <%= bot.name %></span>
    <% end %>
  </div>

  <% bot.rooms.without_directs.ordered.each do |room| %>
    <fieldset class="gap max-width pad border border-radius">
      <legend class="min-width txt-align-start pad-inline">
        <strong class="overflow-ellipsis"><%= room_display_name(room) %></strong>
      </legend>

      <% curl_text_line = "curl -d 'Hello!' #{room_bot_messages_url(room, bot.bot_key)}" %>
      <div class="flex align-center gap">
        <%= image_tag "messages-outlined.svg", aria: { hidden: "true" }, size: 24, class: "colorize--black" %>

        <div class="flex-item-grow">
          <input type="text" class="input full-width fill-white" value="<%= curl_text_line %>" aria-label="curl command for posting messages" readonly>
        </div>

        <div class="txt-small">
          <%= button_to_copy_to_clipboard(curl_text_line) do %>
            <%= image_tag "copy-paste.svg", aria: { hidden: "true" }, size: 20 %>
            <span class="for-screen-reader">Copy message command</span>
          <% end %>
        </div>
      </div>

      <% curl_upload_line = %[curl -F "attachment=@/path/to/file" #{room_bot_messages_url(room, bot.bot_key)}] %>
      <div class="flex align-center gap">
        <%= image_tag "attachment.svg", aria: { hidden: "true" }, size: 24, class: "colorize--black" %>

        <div class="flex-item-grow">
          <input type="text" class="input full-width fill-white" value="<%= curl_upload_line %>" aria-label="curl command for posting attachments" readonly>
        </div>

        <div class="txt-small">
          <%= button_to_copy_to_clipboard(curl_upload_line) do %>
            <%= image_tag "copy-paste.svg", aria: { hidden: "true" }, size: 20 %>
            <span class="for-screen-reader">Copy attachment command</span>
          <% end %>
        </div>
      </div>
    </fieldset>
  <% end %>
</li>



================================================
FILE: app/views/accounts/bots/_form.html.erb
================================================
<h1 class="for-screen-reader">Chat Bot Setup</h1>
<label class="align-center center avatar__form gap" data-controller="upload-preview">
  <div class="btn input--file">
    <%= image_tag "camera.svg", aria: { hidden: "true" }, size: 20 %>
    <%= form.file_field :avatar, class: "input", accept: "image/*",
          data: { upload_preview_target: "input", action: "upload-preview#previewImage" } %>
    <span class="for-screen-reader">Upload bot avatar</span>
  </div>

  <div class="avatar input--file txt-xx-large" style="--avatar-size: var(--btn-size);">
    <%= image_tag bot.avatar.attached? ? bot.avatar : "default-bot-avatar.svg", alt: "Bot avatar", size: 48, data: { upload_preview_target: "image" } %>
  </div>
</label>

<div class="flex align-center gap">
  <%= translation_button(:bot_name) %>
  <label class="flex align-center gap flex-item-grow txt-large input input--actor">
    <%= form.text_field :name, class: "input", autocomplete: "name", placeholder: "Name the bot", autofocus: true, required: true,
          data: { "1p-ignore": true } %>
    <%= image_tag "bot.svg", aria: { hidden: "true" }, size: 24, class: "colorize--black" %>
  </label>
</div>

<div class="flex align-center gap">
  <%= translation_button(:webhook_url) %>
  <label class="flex align-center gap flex-item-grow txt-large input input--actor">
    <%= form.url_field :webhook_url, class: "input", placeholder: "Webhook URL" %>
    <%= image_tag "web.svg", aria: { hidden: "true" }, size: 24, class: "colorize--black" %>
  </label>
</div>

<%= profile_form_submit_button %>



================================================
FILE: app/views/accounts/bots/edit.html.erb
================================================
<% @page_title = "Edit bot" %>

<% content_for :nav do %>
  <div class="flex-item-justify-start">
    <%= link_back_to account_bots_path %>
  </div>
<% end %>

<section class="panel" style="view-transition-name: chat-bot-<%= @bot.id %>">
  <%= form_with model: @bot, url: account_bot_path(@bot), class: "flex flex-column gap" do |form| %>
    <%= render "accounts/bots/form", form: form, bot: @bot %>
  <% end %>

  <hr class="separator full-width margin-block-double">

  <div class="flex align-center gap justify-space-between">
    <%= button_to account_bot_path(@bot), method: :delete, class: "btn txt--small btn--negative", aria: { label: "Delete this chat bot" },
          data: { turbo_confirm: "Are you sure you want to permanently remove this bot from the account? This can’t be undone." } do %>
      <%= image_tag "trash.svg", aria: { hidden: "true" }, size: 20 %>
      <%= image_tag "bot.svg", aria: { hidden: "true" }, size: 20 %>
    <% end %>

    <%= button_to account_bot_key_path(@bot), method: :put, class: "btn full-width txt--small btn--negative", aria: { label: "Generate a new key" },
          data: { turbo_confirm: "Are you sure you want to change the bot key? All usage of this bot must be updated." } do %>
      <%= image_tag "refresh.svg", aria: { hidden: "true" }, size: 20 %>
      <%= image_tag "key.svg", aria: { hidden: "true" }, size: 20 %>
    <% end %>
  </div>
</section>



================================================
FILE: app/views/accounts/bots/index.html.erb
================================================
<% @page_title = "Chat bots" %>

<% content_for :nav do %>
  <div class="flex-item-justify-start">
    <%= link_back_to edit_account_path %>
  </div>
<% end %>

<section class="panel panel--wide txt-align-center flex flex-column position-relative" style="view-transition-name: chat-bots">
  <div class="flex align-center gap">
    <div class="panel__button">
      <%= translation_button(:chat_bots) %>
    </div>
    <div class="pad-inline-double center">
      <h1 class="margin-none">Chat bots</h1>
      <p class="margin-none-block-start">With Chat bots, other sites and services can post updates directly to Campfire.</p>

      <%= link_to new_account_bot_path, class: "btn btn--reversed txt-large", aria: { label: "Add a chat bot" } do %>
        <%= image_tag "bot.svg", aria: { hidden: "true" }, size: 20 %>
        <%= image_tag "add.svg", aria: { hidden: "true" }, size: 20 %>
      <% end %>
    </div>
  </div>

  <div class="pad-inline pad-block-start ">
    <menu class="flex flex-column gap margin-none pad">
      <%= render partial: "accounts/bots/bot", collection: @bots %>
    </menu>
  </div>
</section>



================================================
FILE: app/views/accounts/bots/new.html.erb
================================================
<% @page_title = "New chat bot" %>

<% content_for :nav do %>
  <div class="flex-item-justify-start">
    <%= link_back_to account_bots_path %>
  </div>
<% end %>

<section class="panel">
  <%= form_with model: @bot, url: account_bots_path, class: "flex flex-column gap" do |form| %>
    <%= render "accounts/bots/form", form: form, bot: @bot %>
  <% end %>
</section>



================================================
FILE: app/views/accounts/custom_styles/edit.html.erb
================================================
<% @page_title = "Custom styles" %>

<% content_for :nav do %>
  <div class="flex-item-justify-start">
    <%= link_back_to edit_account_path %>
  </div>
<% end %>

<section class="panel panel--wide txt-align-center flex flex-column position-relative" style="view-transition-name: custom-styles">
  <%= form_with model: @account, url: account_custom_styles_url, class: "flex flex-column gap",
      data: { controller: "form", action: "keydown.ctrl+enter->form#submit keydown.meta+enter->form#submit" } do |form| %>
    <div class="panel__button">
      <%= translation_button(:custom_styles) %>
    </div>

    <div class="pad-inline-double margin-inline">
      <h1 class="margin-none">Custom CSS</h1>
      <p class="flex flex-wrap align-center justify-center gap margin-none-block-start" style="--column-gap: 0.5ch; --row-gap: 0">
        <span>Add custom CSS styles.</span>
        <%= image_tag "alert.svg", class: "flex-inline colorize--black", size: 16, aria: { hidden: "true" } %>
        <span>Use Caution: you could break things.</span>
      </p>
    </div>

    <label class="flex align-start gap flex-item-grow">
      <%= form.text_area :custom_styles, class: "input input--code txt--small", placeholder: "Add CSS styles…",
            autocomplete: "off", spellcheck: "false", autocorrect: "off", autocapitalize: "off",
            rows: 16, required: false %>
    </label>

    <%= form.button class: "btn btn--reversed center txt-large", type: "submit" do %>
      <%= image_tag "check.svg", aria: { hidden: "true" }, size: 20 %>
      <span class="for-screen-reader">Save changes</span>
    <% end %>
  <% end %>
</section>



================================================
FILE: app/views/accounts/users/_next_page_container.html.erb
================================================
<%= turbo_frame_tag :next_page_container, loading: :lazy,
      src: account_users_path(page: page, format: :turbo_stream), class: "flex center" do %>
  <div class="spinner center"></div>
<% end %>



================================================
FILE: app/views/accounts/users/_user.html.erb
================================================
<li class="flex align-center gap margin-none">
  <figure class="avatar flex-item-no-shrink" style="--avatar-size: 3.75ch;">
    <%= avatar_tag user, loading: :lazy %>
  </figure>

  <div class="min-width">
    <div class="overflow-ellipsis fill-shade"><strong><%= user.name %></strong></div>
  </div>

  <hr class="separator" aria-hidden="true">

  <% if Current.user.can_administer? && user != Current.user %>
    <% unless user.bot? %>
      <%= form_with model: user, url: account_user_path(user), data: { controller: "form" }, method: :patch do | form | %>
        <label class="btn txt-small flex-item-no-shrink" for="<%= dom_id(user, :role) %>">
          <span class="for-screen-reader">Role: <%= user.administrator? ? "Administrator" : "Member" %></span>
          <%= image_tag "crown.svg", size: 20, aria: { hidden: "true" } %>
          <%= form.check_box :role, { data: { action: "form#submit" }, hidden: true, id: dom_id(user, :role) }, "administrator", "member" %>
        </label>
      <% end %>
    <% end %>

    <%= button_to account_user_path(user), method: :delete, class: "btn txt-small flex-item-no-shrink btn--negative", data: {
          turbo_confirm: "Are you sure you want to permanently remove this person from the account? This can’t be undone."} do %>
      <%= image_tag "minus.svg", size: 20, aria: { hidden: "true" } %>
      <span class="for-screen-reader">Delete <%= user.name %></span>
    <% end %>
  <% elsif user == Current.user %>
    <%= link_to user_profile_path, class: "btn txt-small flex-item-no-shrink", target: "_top" do %>
      <%= image_tag "pencil.svg", size: 20, aria: { hidden: "true" } %>
      <span class="for-screen-reader">My settings</span>
    <% end %>
  <% end %>
</li>



================================================
FILE: app/views/accounts/users/index.turbo_stream.erb
================================================
<%= turbo_stream.replace :next_page_container, partial: "accounts/users/user", collection: @page.records, as: :user %>

<% unless @page.last? %>
  <%= turbo_stream.append :account_users, partial: "accounts/users/next_page_container", locals: { page: @page.next_param } %>
<% end %>



================================================
FILE: app/views/action_text/attachables/_opengraph_embed.html.erb
================================================
<figure class="attachment attachment--content attachment--og">
  <actiontext-opengraph-embed>
    <div class="og-embed gap">
      <div class="og-embed__content">
        <div class="og-embed__title">
          <%= link_to truncate(opengraph_embed.filename, length: 280, omission: "…"), opengraph_embed.href, rel: "noreferrer", target: "_blank" %>
        </div>
        <div class="og-embed__description"><%= truncate(opengraph_embed.caption, length: 560, omission: "…").html_safe %></div>
      </div>
      <% if opengraph_embed.url %>
        <div class="og-embed__image">
          <%= tag.img src: opengraph_embed.url, class: "image center", alt: "" %>
        </div>
      <% end %>
    </div>
  </actiontext-opengraph-embed>
</figure>



================================================
FILE: app/views/autocompletable/users/_user.json.jbuilder
================================================
json.name       h(user.name)
json.value      user.id
json.avatar_url fresh_user_avatar_url(user)
json.sgid       user.attachable_sgid



================================================
FILE: app/views/autocompletable/users/index.json.jbuilder
================================================
json.partial! partial: "autocompletable/users/user", collection: @page.records, as: :user



================================================
FILE: app/views/first_runs/show.html.erb
================================================
<% @page_title = "Set up Campfire" %>
<% @body_class = "signup" %>

<%= form_with model: @user, url: first_run_path, class: "center max-width" do |form| %>
  <section class="nametag u-relative">
    <div class="flex justify-center align-center pad-block">
      <%= image_tag "lanyard.svg", class: "nametag__lanyard", aria: { hidden: "true" } %>
    </div>

    <div class="nametag__inner flex flex-column gap">
      <fieldset class="flex flex-column center-block">
        <legend class="txt-large txt-align-center"><strong><%= @page_title %></strong></legend>

        <label class="align-center center avatar__form gap" data-controller="upload-preview">
          <div class="btn input--file">
            <%= image_tag "camera.svg", aria: { hidden: "true" } %>
            <%= form.file_field :avatar, class: "input", accept: "image/*",
                  data: { upload_preview_target: "input", action: "upload-preview#previewImage" } %>
            <span class="for-screen-reader">Add your avatar</span>
          </div>

          <div class="btn avatar input--file txt-xx-large">
            <%= image_tag "default-avatar.svg", aria: { hidden: "true" }, data: { upload_preview_target: "image" }, alt: "Add your avatar" %>
            <span class="for-screen-reader">Avatar</span>
          </div>
        </label>
      </fieldset>

      <div class="flex align-center gap">
        <%= translation_button(:user_name) %>
        <label class="flex align-center gap flex-item-grow txt-large input input--actor">
          <%= form.text_field :name, class: "input", autocomplete: "name", placeholder: "Name", autofocus: true, required: true,
                data: { "1p-ignore": true } %>
          <%= image_tag "person.svg", aria: { hidden: "true" }, size: 24, class: "colorize--black" %>
        </label>
      </div>

      <div class="flex align-center gap">
        <%= translation_button(:email_address) %>
        <label class="flex align-center gap flex-item-grow txt-large input input--actor">
          <%= form.email_field :email_address, class: "input", autocomplete: "username", placeholder: "Email address", required: true %>
          <%= image_tag "email.svg", aria: { hidden: "true" }, size: 24, class: "colorize--black" %>
        </label>
      </div>

      <div class="flex align-center gap">
        <%= translation_button(:password) %>
        <label class="flex align-center gap flex-item-grow txt-large input input--actor">
          <%= form.password_field :password, class: "input", autocomplete: "new-password", placeholder: "Password", required: true, maxlength: 72 %>
          <%= image_tag "password.svg", aria: { hidden: "true" }, size: 24, class: "colorize--black" %>
        </label>
      </div>

      <%= form.button class: "btn btn--reversed center txt-large", type: "submit" do %>
        <%= image_tag "arrow-right.svg", aria: { hidden: "true" } %>
        <span class="for-screen-reader">Save</span>
      <% end %>
    </div>
  </section>
<% end %>



================================================
FILE: app/views/layouts/_lightbox.html.erb
================================================
<dialog class="lightbox" aria-label="Image Viewer (Press escape to close)" data-lightbox-target="dialog" data-action="close->lightbox#reset">
  <img src="" class="lightbox__image" data-lightbox-target="zoomedImage" />

  <form method="dialog" class="lightbox__btn">
    <button class="btn">
      <%= image_tag "remove.svg", aria: { hidden: "true" } %>
      <span class="for-screen-reader">Close image viewer</span>
    </button>
  </form>

  <a href="" class="lightbox__btn--download btn hide-in-ios-pwa" data-lightbox-target="download">
    <%= image_tag "download.svg", aria: { hidden: "true" } %>
    <span class="for-screen-reader">Download file</span>
  </a>

  <button class="lightbox__btn--share btn"
      data-controller="web-share"
      data-action="web-share#share"
      data-web-share-files-value=""
      data-lightbox-target="share">
    <%= image_tag "share.svg", aria: { hidden: "true" } %>
    <span class="for-screen-reader">Share file</span>
  </button>
</dialog>



================================================
FILE: app/views/layouts/application.html.erb
================================================
<!DOCTYPE html>
<html>
  <head>
    <%= page_title_tag %>

    <meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no, interactive-widget=resizes-content">
    <meta name="view-transition" content="same-origin">
    <meta name="color-scheme" content="light dark">
    <meta name="theme-color" content="#ffffff" media="(prefers-color-scheme: light)">
    <meta name="theme-color" content="#000000" media="(prefers-color-scheme: dark)">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>
    <%= current_user_meta_tags %>

    <%= tag.meta name: "vapid-public-key", content: Rails.configuration.x.vapid.public_key %>
    <%= tag.meta name: "turbo-prefetch", content: "true" %>

    <%= tag.link rel: "manifest", href: webmanifest_path(format: :json) %>
    <%= tag.link rel: "icon", href: fresh_account_logo_path, type: "image/png" %>
    <%= tag.link rel: "apple-touch-icon", href: fresh_account_logo_path %>

    <%= stylesheet_link_tag :all, "data-turbo-track": "reload" %>
    <%= custom_styles_tag %>

    <%= javascript_importmap_tags %>

    <%= yield :head %>
  </head>

  <body class="<%= body_classes %>" data-controller="local-time lightbox">
    <a href="#main-content" class="skip-navigation btn">Skip to main content</a>

    <nav id="nav">
      <%= yield :nav %>
    </nav>

    <% if notice = flash[:notice] || flash[:alert] %>
      <div class="flash" data-controller="element-removal" data-action="animationend->element-removal#remove">
        <div class="flash__inner shadow" style="<%= "--flash-background: var(--color-negative)" if flash[:alert] %>">
          <% if flash[:alert] %>
            <%= image_tag "alert.svg", aria: { hidden: true }, size: 24, class: "colorize--white" %></span>
          <% else %>
            <%= image_tag "check.svg", aria: { hidden: true }, size: 24, class: "colorize--white" %></span>
          <% end %>
        </div>
        <span class="for-screen-reader" role="alert" aria-atomic="true"><%= notice %></span>
      </div>
    <% end %>

    <main id="main-content">
      <%= yield %>

      <footer id="footer">
        <%= yield :footer %>
      </footer>
    </main>

    <aside id="sidebar" data-controller="toggle-class" data-toggle-class-toggle-class="open">
      <%= yield :sidebar %>
    </aside>

    <%= render "layouts/lightbox" %>

    <a href="https://once.com" id="app-logo" target="_blank" aria-label="Once software from 37signals home page">
      <%= image_tag "campfire-icon.png", alt: "Campfire logo", width: 256, height: 216 %>
    </a>
  </body>
</html>



================================================
FILE: app/views/layouts/mailer.html.erb
================================================
<!DOCTYPE html>
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <style>
      /* Email styles need to be inline */
    </style>
  </head>

  <body>
    <%= yield %>
  </body>
</html>



================================================
FILE: app/views/layouts/mailer.text.erb
================================================
<%= yield %>



================================================
FILE: app/views/layouts/action_text/contents/_content.html.erb
================================================
<div class="trix-content">
  <%= yield -%>
</div>



================================================
FILE: app/views/messages/_actions.html.erb
================================================
<%# Be sure to check/update messages/_template.html.erb when changing this file %>

<div class="message__actions" data-controller="soft-keyboard">
  <%= tag.details class: "position-relative",
      data: { controller: "popup", action: "keydown.esc->popup#close toggle->popup#toggle click@document->popup#closeOnClickOutside", popup_orientation_top_class: "popup-orientation-top" } do %>
    <summary class="btn message__action-btn message__options-btn">
      <%= image_tag "menu-dots-horizontal.svg", size: 20, class: "colorize--black", aria: { hidden: "true" } %>
      <span class="for-screen-reader">Message options</span>
    </summary>

    <div class="message__actions-menu border shadow" data-popup-target="menu">
      <div class="quick-boosts">
        <% EmojiHelper::REACTIONS.each do |character, title| %>
          <%= form_with model: [ message, Boost.new ], data: { turbo_frame: dom_id(message, :boosting), action: "popup#close"} do |form| %>
            <%= hidden_field_tag "boost[content]", character %>
            <%= form.button type: "submit", title: title, class: "btn message__action-btn", data: { emoji: character } do %>
              <figure class="margin-none boost-character"><%= character %></figure>
              <span class="for-screen-reader"><%= title %></span>
            <% end %>
          <% end %>
        <% end %>

        <%= link_to new_message_boost_path(message),
              class: "btn message__action-btn message__boost-btn",
              data: { turbo_frame: dom_id(message, :new_boost), action: "soft-keyboard#open popup#close" } do %>
          <%= image_tag "boost.svg", class: "colorize--black", size: 20, aria: { hidden: "true" } %>
          <span class="for-screen-reader">New boost</span>
        <% end %>
      </div>

      <div class="flex flex-wrap border-top margin-block-start-half pad-block-start-half message__actions-grid">
        <% if message.content_type.attachment? %>
          <%= link_to rails_blob_path(message.attachment, disposition: "attachment", only_path: true), class: "btn message__action-btn center full-width hide-in-ios-pwa", title: "Download", aria: { label: "Download" } do %>
            <%= image_tag "download.svg", class: "colorize--black", size: 20, aria: { hidden: "true" } %>
          <% end %>

          <%= tag.button class: "btn message__action-btn center full-width",
              data: { controller: "web-share", action: "web-share#share", web_share_files_value: rails_blob_path(message.attachment, only_path: true), web_share_title_value: message.attachment.filename.to_s }, title: "Share", aria: { label: "Share" } do %>
            <%= image_tag "share.svg", class: "colorize--black", size: 20, aria: { hidden: "true" } %>
          <% end %>
        <% else %>
          <%= tag.button class: "btn message__action-btn center full-width", data: { action: "reply#reply" }, title: "Reply", aria: { label: "Reply" } do %>
            <%= image_tag "reply.svg", class: "colorize--black", size: 20, aria: { hidden: "true" } %>
          <% end %>
        <% end %>

        <%= tag.button class: "btn message__action-btn center full-width", title: "Copy link", aria: { label: "Copy link" }, data: { controller: "copy-to-clipboard", action: "copy-to-clipboard#copy", copy_to_clipboard_success_class: "btn--success", copy_to_clipboard_content_value: url } do %>
          <%= image_tag "link.svg", class: "colorize--black", size: 20, aria: { hidden: "true" } %>
        <% end %>

        <%= link_to edit_room_message_path(message.room, message), class: "btn message__action-btn center full-width message__edit-btn",
              data: { turbo_frame: dom_id(message, :edit) }, title: "Edit", aria: { label: "Edit"} do %>
          <%= image_tag "pencil.svg", class: "colorize--black", size: 20, aria: { hidden: "true" } %>
        <% end %>
      </div>
    </div>
  <% end %>
</div>



================================================
FILE: app/views/messages/_message.html.erb
================================================
<%# Be sure to check/update messages/_template.html.erb when changing this file %>

<% cache message do %>
  <%= message_tag message do %>
    <h2 class="message__day-separator"><%= local_datetime_tag message.created_at, style: :date %></h2>

    <figure class="avatar message__avatar">
      <%= avatar_tag message.creator %>
    </figure>

    <turbo-frame id="<%= dom_id(message, :edit) %>">
      <div class="message__body">
        <div class="message__body-content">
          <div class="message__meta">
            <h3 class="message__heading">
              <span class="message__author" title="<%= message.creator.title %>">
                <strong data-reply-target="author"><%= message.creator.name %></strong>
              </span>
              <%= link_to message_timestamp(message, class: "message__timestamp"), room_at_message_path(message.room, message), target: "_top",
                    class: "message__permalink" %>
              <span class="message__room">
                <%= link_to room_display_name(message.room, for_user: nil), room_at_message_path(message.room, message), target: "_top", data: { reply_target: "link" } %>
              </span>
            </h3>
            <%= render "messages/actions", message: message, url: room_at_message_url(message.room, message) %>
          </div>
          <%= render "messages/presentation", message: message %>
          <%= render "messages/boosts/boosts", message: message %>
        </div>
      </div>
    </turbo-frame>
  <% end %>
<% end %>



================================================
FILE: app/views/messages/_presentation.html.erb
================================================
<div id="<%= dom_id(message, :presentation) %>" data-reply-target="body" data-messages-target="body">
  <%= message_presentation(message) %>
</div>



================================================
FILE: app/views/messages/_template.html.erb
================================================
<script type="text/template" data-messages-target="template">
  <div class="message message--me $messageClasses$"
      id="message_$clientMessageId$"
      data-format-message-target="message"
      data-user-id="<%= Current.user.id %>"
      data-message-timestamp="$messageTimestamp$"
      data-messages-target="message">
    <div class="message__day-separator"><time class="message__timestamp" datetime="$messageDatetime$" data-local-time-target="date"></time></div>

    <figure class="avatar message__avatar">
      <%= avatar_tag Current.user %>
    </figure>

    <div class="message__body">
      <div class="message__body-content">
        <div class="message__meta">
          <h3 class="message__heading">
            <span class="message__author"><strong><%= Current.user.name %></strong></span>
            <span class="message__permalink"><time class="message__timestamp" datetime="$messageDatetime$" data-local-time-target="time"></time></span>
          </h3>
          <div class="message__actions">
            <div class="position-relative">
              <span class="btn message__action-btn message__options-btn">
                <%= image_tag "menu-dots-horizontal.svg", class: "colorize--black", aria: { hidden: "true" } %>
                <span class="for-screen-reader">Message options</span>
              </span>
            </div class="position-relative">
          </div>
        </div>
        $body$
      </div>
    </div>
  </div>
</script>



================================================
FILE: app/views/messages/_unrenderable.html.erb
================================================
<div class="message message--formatted message--failed center">
  <div class="message__body">
    <div class="message__body-content txt-align-center">
      Failed to load message content
    </div>
  </div>
</div>



================================================
FILE: app/views/messages/create.turbo_stream.erb
================================================
<%= turbo_stream.append dom_id(@message.room, :messages), @message %>



================================================
FILE: app/views/messages/destroy.turbo_stream.erb
================================================
<%= turbo_stream.remove @message %>



================================================
FILE: app/views/messages/edit.html.erb
================================================
<turbo-frame id="<%= dom_id(@message, :edit) %>">
  <div class="message__body position-relative" data-controller="scroll-into-view">
    <div class="message__body-content message__body-content--editing gap">
      <% if @message.content_type.attachment? %>
        <%= message_attachment_presentation(@message) %>

        <div class="message__edit-btns flex align-center justify-space-between gap full-width pad-block-start-half">
          <%= button_tag class: "btn btn--negative center margin-block-end", type: "submit",
                form: dom_id(@message, :delete_form), data: { turbo_confirm: "Are you sure you want to delete this message?" } do %>
            <%= image_tag "trash.svg", aria: { hidden: "true" } %>
            <span class="for-screen-reader">Delete message</span>
          <% end %>
        </div>
      <% else %>
        <div class="composer--edit composer--rich-text">
          <%= form_with model: @message, url: room_message_path(@room, @message), id: dom_id(@message, :form), data: {
                controller: "form", action: "trix-file-accept->form#preventAttachment keydown.esc->form#cancel keydown.ctrl+enter->form#submit:prevent keydown.meta+enter->form#submit:prevent" } do |form| %>
            <div class="full-width input input--actor min-width fill-white">
              <%= form.rich_text_area :body,
                    rows: 1,
                    class: "input",
                    aria: { multiline: "true", label: "Edit message" },
                    autofocus: true,
                    data: {
                      controller: "rich-autocomplete",
                      action: rich_text_data_actions,
                      rich_autocomplete_url_value: autocompletable_users_path(room_id: @room.id) } %>
            </div>

            <%= link_to "Close editor and discard changes", room_message_path(@room, @message), data: { form_target: "cancel" }, hidden: true %>

            <div class="message__edit-btns flex align-center justify-space-between gap full-width pad-block-start-half">
              <%= button_tag type: "submit", class: "btn btn--reversed" do %>
                <%= image_tag "check.svg", aria: { hidden: "true" } %>
                <span class="for-screen-reader">Save changes</span>
              <% end %>

              <%= button_tag class: "btn btn--negative", type: "submit", form: dom_id(@message, :delete_form),
                      data: { turbo_confirm: "Are you sure you want to delete this message?" } do %>
                <%= image_tag "trash.svg", aria: { hidden: "true" } %>
                <span class="for-screen-reader">Delete message</span>
              <% end %>
            </div>
          <% end %>
        </div>
      <% end %>
    </div>

    <div class="message__actions flex flex-wrap">
      <%= link_to room_message_path(@room, @message), class: "message__action-btn message__edit-close-btn txt-small btn btn--borderless" do %>
        <%= image_tag "remove.svg", class: "colorize--black", aria: { hidden: "true" } %>
        <span class="for-screen-reader">Close editor and discard changes</span>
      <% end %>
    </div>

    <%= form_with url: room_message_path(@message.room, @message), method: :delete, id: dom_id(@message, :delete_form), data: { turbo_frame: dom_id(@message, :edit) } %>
  </div>
</turbo-frame>



================================================
FILE: app/views/messages/index.html.erb
================================================
<%= render partial: "messages/message", collection: @messages, cached: true %>



================================================
FILE: app/views/messages/room_not_found.html.erb
================================================
<turbo-frame id="composer-frame">
  <span class="composer__input input input--actor shake margin-block-end txt-negative txt-align-center" style="--input-border-color: var(--color-negative)">
      <span>This room was deleted.</span>
  </span>
</turbo-frame>



================================================
FILE: app/views/messages/show.html.erb
================================================
<%= render @message %>



================================================
FILE: app/views/messages/boosts/_boost.html.erb
================================================
<% cache boost do %>
  <div id="<%= dom_id(boost) %>"
      class="boost boost-item flex-inline postion--relative max-width align-center fill-white gap"
      data-controller="boost-delete" data-boost-delete-perform-class="boost--deleting" data-boost-delete-reveal-class="expanded" data-boost-delete-booster-id-value="<%= boost.booster.id %>">
    <figure class="avatar boost__avatar flex-item-no-shrink">
      <%= avatar_tag boost.booster, aria: { label: "#{boost.booster.name} boosted #{boost.content}" } %>
    </figure>

    <%= tag.span boost.content, role: "button",
          class: [ "txt-small", { "txt-medium": boost.content.all_emoji? } ],
          data: { action: "click->boost-delete#reveal keydown.enter->boost-delete#reveal:prevent", boost_delete_target: "content" } %>

    <%= button_to message_boost_path(boost.message, boost), method: :delete, data: { action: "boost-delete#perform", boost_delete_target: "button" },
          class: "btn btn--negative flex-item-justify-end boost__delete" do %>
      <%= image_tag "minus.svg", size: 20, aria: { hidden: "true" } %>
      <span class="for-screen-reader">Delete this boost</span>
    <% end %>
  </div>
  <span id="delete_boost_accessible_label" class="for-screen-reader">Press enter to delete this boost</span>
<% end %>



================================================
FILE: app/views/messages/boosts/_boosts.html.erb
================================================
<%= turbo_frame_tag message, :boosting do %>
  <div class="boosts flex flex-wrap align-center gap full-width" style="--column-gap: 0.4ch; --row-gap: 0"
      data-controller="turbo-streaming" data-action="turbo:submit-start->turbo-streaming#unsubscribe">
    <div class="flex-inline flex-wrap gap" id="<%= dom_id(message, :boosts) %>" data-turbo-streaming-target="container">
      <%= render partial: "messages/boosts/boost", collection: message.boosts.ordered, cached: true %>
    </div>

    <%= turbo_frame_tag message, :new_boost do %>
      <div class="flex-inline message__boost-inline" data-controller="soft-keyboard">
        <%= link_to new_message_boost_path(message), class: "boost__action txt-small btn", action: "soft-keyboard#open" do %>
          <%= image_tag "boost.svg", size: 20, aria: { hidden: "true" } %>
          <span class="for-screen-reader">Add a boost</span>
        <% end %>
      </div>
    <% end %>
  </div>
<% end %>



================================================
FILE: app/views/messages/boosts/index.html.erb
================================================
<%= render "messages/boosts/boosts", message: @message %>



================================================
FILE: app/views/messages/boosts/new.html.erb
================================================
<%= turbo_frame_tag dom_id(@message, :new_boost) do %>
  <div class="boost flex-inline postion--relative max-width fill-white" style="--column-gap: var(--inline-space-half)">
    <%= form_with model: [ @message, Boost.new ], class: "boost__form flex align-center gap expanded",
          data: { controller: "form scroll-into-view", turbo_frame: dom_id(@message, :boosting), action: "keydown.esc->form#cancel" } do |form| %>
      <label class="boost__form-label flex gap" style="--column-gap: 0.7ch;" role="button" tabindex="0" aria-label="Add a boost">
        <figure class="avatar boost__avatar flex-item-no-shrink">
          <%= avatar_tag Current.user %>
          <span class="for-screen-reader"><%= Current.user.name %></span>
        </figure>

        <%= form.text_field :content, id: nil, autofocus: true, autocomplete: "off", autocorrect: "off", maxlength: 16,
              required: true, pattern: /\S+.*/, data: { boost_form_target: "input" }, class: "input input--boost txt-small" %>
      </label>

      <%= form.button class: "btn btn--reversed", type: "submit" do %>
        <%= image_tag "check.svg", aria: { hidden: "true" } %>
        <span class="for-screen-reader">Submit</span>
      <% end %>

      <%= link_to message_boosts_path(@message), data: { turbo_frame: dom_id(@message, :boosts), form_target: "cancel" }, class: "btn btn--negative" do %>
        <%= image_tag "minus.svg", aria: { hidden: "true" } %>
        <span class="for-screen-reader">Cancel</span>
      <% end %>
    <% end %>
  </div>
<% end %>



================================================
FILE: app/views/pwa/_browser_settings.html.erb
================================================
<% unless (platform.safari? || platform.chrome?) && platform.ios? %>
  <details class="notifications-help" data-notifications-target="details">
    <summary class="btn">
      <%= image_tag "external/web.svg", aria: { hidden: "true" }, size: 20 %>
      <strong>Check your <%= platform.browser.capitalize %> settings</strong>
      <%= image_tag "disclosure.svg", aria: { hidden: "true" }, size: 10, class: "disclosure" %>
    </summary>

    <% case
      when platform.firefox? && platform.android? %>
        <ol>
          <li>Tap <em><%= image_tag "lock.svg", alt: "the View site information button", size: 20 %></em> in the address bar.</li>
          <li>Tap <em>Notification</em> to change to <em>Allowed</em>.</li>
        </ol>
      <% when platform.edge? && platform.desktop? %>
        <h2 class="txt-normal txt-medium margin-block-start">Turn on notifications for this website.</h2>
        <ol>
          <li>Click <em><%= image_tag "lock.svg", alt: "the View site information button", size: 20 %></em> left of the address bar.</li>
          <li>Under <em>Permissions for this site &gt; Notifications</em>, choose <em>Allow</em>.</li>
        </ol>
        <h2 class="txt-normal txt-medium margin-block-start">Turn on notifications for <%= platform.browser.capitalize %>.</h2>
        <ol>
          <% if platform.windows? %>
            <li>Click <em>Start</em>, then <em>Settings</em>.</li>
            <li>Go to <em>System &gt; Notification</em>.</li>
            <li>Click <em><%= image_tag "external/switch.svg", alt: "the switch", size: 22 %></em> <em>ON</em> for <%= platform.browser.capitalize %>.</li>
          <% else %>
            <li>Click <em aria-label="the Apple menu"></em> in the top left.</li>
            <li>Click <em>System Settings…</em>.</li>
            <li>Click <em>Notifications</em>.</li>
            <li>Click <em><%= platform.browser.capitalize %></em>.</li>
            <li>Click <em><%= image_tag "external/switch.svg", alt: "the switch", size: 22 %></em> to <em>Allow notifications</em>.</li>
          <% end %>
        </ol>
      <% when platform.firefox? && platform.desktop? %>
        <h2 class="txt-normal txt-medium margin-block-start">Turn on notifications for this website.</h2>
        <ol>
          <li>Click <em><%= platform.browser.capitalize %></em> in the top left.</li>
          <li>Click <em>Settings…</em>.</li>
          <li>Click <em>Privacy & Security</em> in the sidebar.</li>
          <li>Scroll down to <em>Permissions</em>.</li>
          <li>Click <em>Settings</em> next to <em>Notifications</em>.</li>
          <li>Select <em>Allow</em> next to <em><%= root_url %></em>.</li>
        </ol>

        <h2 class="txt-normal txt-medium margin-block-start">Turn on notifications for <%= platform.browser.capitalize %>.</h2>
        <ol>
          <% if platform.windows? %>
            <li>Click <em>Start</em>, then <em>Settings</em>.</li>
            <li>Go to <em>System &gt; Notification</em>.</li>
            <li>Click <em><%= image_tag "external/switch.svg", alt: "the toggle button", size: 22 %></em> <em>ON</em> for <%= platform.browser.capitalize %>.</li>
          <% else %>
            <li>Click <em aria-label="the Apple menu"></em> in the top left.</li>
            <li>Click <em>System Settings…</em>.</li>
            <li>Click <em>Notifications</em>.</li>
            <li>Click <em><%= platform.browser.capitalize %></em>.</li>
            <li>Click <em><%= image_tag "external/switch.svg", alt: "the switch", size: 22 %></em> to <em>Allow notifications</em>.</li>
          <% end %>
        </ol>
      <% when platform.chrome? && platform.desktop? %>
        <h2 class="txt-normal txt-medium margin-block-start">Turn on notifications for this website.</h2>
        <ol>
          <li>Click the <em><%= image_tag "external/sliders.svg", alt: "View site information", size: 20 %></em> icon in the address bar.</li>
          <li>Click <em>Site Settings</em>.</li>
          <li>Ensure notifications are <em>Allowed</em>.</li>
        </ol>

        <h2 class="txt-normal txt-medium margin-block-start">Turn on notifications for <%= platform.browser.capitalize %>.</h2>
        <ol>
          <% if platform.windows? %>
            <li>Click <em>Start</em>, then <em>Settings</em>.</li>
            <li>Go to <em>System &gt; Notification</em>.</li>
            <li>Click <em><%= image_tag "external/switch.svg", alt: "the switch", size: 22 %></em> <em>ON</em> for <%= platform.browser.capitalize %>.</li>
          <% else %>
            <li>Click <em aria-label="the Apple menu"></em> in the top left.</li>
            <li>Click <em>System Settings…</em>.</li>
            <li>Click <em>Notifications</em>.</li>
            <li>Click <em><%= platform.browser.capitalize %></em>.</li>
            <li>Click <em><%= image_tag "external/switch.svg", alt: "the switch", size: 22 %></em> to <em>Allow notifications</em>.</li>
          <% end %>
        </ol>
      <% when platform.chrome? && platform.android? %>
        <ol>
          <li>Tap the <em><%= image_tag "menu-dots-vertical.svg", alt: "More options", size: 16 %></em> menu button.</li>
          <li>Tap <em>Settings</em>.</li>
          <li>Tap <em>Notifications</em>.</li>
          <li>Tap <em><%= image_tag "external/switch.svg", alt: "the switch", size: 22 %></em> to <em>Allow <%= platform.browser.capitalize %> notifications</em>.</li>
          <li>Tap <em><%= image_tag "external/switch.svg", alt: "the switch", size: 22 %></em> next to <em>Web apps</em>.</li>
          <li>Tap <em><%= image_tag "notification-bell-alert.svg", alt: "the notification bell", size: 16 %></em> and select <em>Allow</em>.</li>
        </ol>
      <% when platform.safari? && platform.desktop? %>
        <ol>
          <li>Click <em><%= platform.browser.capitalize %></em> in the top left.</li>
          <li>Click <em>Settings…</em>.</li>
          <li>Click the <em>Websites</em> tab.</li>
          <li>Click <em>Notifications</em> in the sidebar.</li>
          <li>Click <em><%= root_url %></em> in the list.</li>
          <li>Select <em>Allow</em>.</li>
        </ol>
      <% else %>
        <p>Ensure notifications are enabled for <em><%= root_url %></em> in your web browser settings.</p>
    <% end %>
  </details>
<% end %>



================================================
FILE: app/views/pwa/_install_instructions.html.erb
================================================
<% unless platform.chrome? || (platform.firefox? && !platform.android?) %>
  <details class="notifications-help pwa__instructions hide-in-pwa" data-controller="pwa-install" data-pwa-install-prompting-class="pwa--can-install" data-notifications-target="details">
    <summary class="btn">
      <%= image_tag "external/install.svg", aria: { hidden: "true" }, size: 20 %>
      <strong>Install Campfire as a web app.</strong>
      <%= image_tag "disclosure.svg", aria: { hidden: "true" }, size: 10, class: "disclosure" %>
    </summary>

    <% case
      when platform.edge? %>
        <ol>
          <li>Click <em><%= image_tag "install-edge.svg", alt: "the app available - install Campfire chat button", size: 16 %></em>in the address bar.</li>
          <li>Click <em>Install</em>.</li>
        </ol>
      <% when platform.chrome? && platform.android? %>
        <ol>
          <li>Tap the <em><%= image_tag "menu-dots-vertical.svg", alt: "More options", size: 16 %></em> menu button.</li>
          <li>Tap <em>Install app</em> in the menu.</li>
        </ol>
      <% when platform.firefox? && platform.android? %>
        <ol>
          <li>Tap the <em><%= image_tag "menu-dots-vertical.svg", alt: "More options", size: 16 %></em> menu button.</li>
          <li>Tap <em>Install</em> in the menu.</li>
        </ol>
      <% when platform.safari? && platform.desktop? %>
        <ol>
          <li>Click <em>File</em> in the top left.</li>
          <li>Click <em>Add to Dock…</em>.</li>
        </ol>
      <% when (platform.safari? || platform.chrome?) && platform.ios? %>
        <p>To receive push notifications in <%= platform.browser.capitalize %> for <%= platform.operating_system %>, you must install Campfire as a web app.</p>
        <ol>
          <li>Tap <em><%= image_tag "external/share.svg", alt: "the share button", size: 20 %></em></li>
          <li>Tap <em>Add to Home Screen</em>.</li>
        </ol>
      <% else %>
        <p>Some platforms require you to install Campfire as a web app to receive push notifications.</p>
    <% end %>

    <div class="margin-block-start txt-align-center pwa__installer">
      <hr class="separator margin-block">
      <button class="btn btn--reversed center" data-action="pwa-install#promptInstall">
        <%= image_tag "external/install.svg", aria: { hidden: "true" } %>
        Install now
      </button>
    </div>
  </details>
<% end %>



================================================
FILE: app/views/pwa/_system_settings.html.erb
================================================
<details class="notifications-help hide-in-browser" data-notifications-target="details">
  <summary class="btn">
    <%= image_tag "external/gear.svg", aria: { hidden: "true" }, size: 20 %>
    <strong>Check your <%= platform.operating_system %> settings</strong>
    <%= image_tag "disclosure.svg", aria: { hidden: "true" }, size: 10, class: "disclosure" %>
  </summary>

  <% case
    when platform.firefox? && platform.android? %>
      <ol>
        <li>Tap the <em><%= image_tag "menu-dots-vertical.svg", alt: "More options", size: 16 %></em> menu button.</li>
        <li>Tap <em>Settings</em>.</li>
        <li>Tap <em>Notifications</em>.</li>
        <li>Tap <em><%= image_tag "external/switch.svg", alt: "the toggle button", size: 22 %></em> to <em>Allow <%= platform.browser.capitalize %> notifications</em>.</li>
      </ol>
    <% when platform.edge? && platform.desktop? %>
      <ol>
        <li>Click <em>Start</em>, then <em>Settings</em>.</li>
        <li>Go to <em>System &gt; Notification</em>.</li>
        <li>Click <em><%= image_tag "external/switch.svg", alt: "the toggle button", size: 22 %></em> <em>ON</em> for Campfire.</li>
      </ol>
    <% when (platform.firefox? || platform.chrome?) && platform.desktop? %>
      <ol>
        <% if platform.windows? %>
          <li>Click <em>Start</em>, then <em>Settings</em>.</li>
          <li>Go to <em>System &gt; Notification</em>.</li>
          <li>Click <em><%= image_tag "external/switch.svg", alt: "the toggle button", size: 22 %></em> <em>ON</em> for Campfire.</li>
        <% else %>
          <li>Click <em aria-label="the Apple menu"></em> in the top left.</li>
          <li>Click <em>System Settings…</em>.</li>
          <li>Click <em>Notifications</em>.</li>
          <li>Click <em>Campfire</em>.</li>
          <li>Click <em><%= image_tag "external/switch.svg", alt: "the allow notifications switch", size: 22 %></em> to <em>Allow notifications</em>.</li>
        <% end %>
      </ol>
    <% when platform.safari? && platform.desktop? %>
      <ol>
        <li>Click <em aria-label="the Apple menu"></em> in the top left.</li>
        <li>Click <em>System Settings…</em>.</li>
        <li>Click <em>Notifications</em>.</li>
        <li>Click <em>Campfire</em>.</li>
        <li>Click <em><%= image_tag "external/switch.svg", alt: "the allow notifications switch", size: 22 %></em> to <em>Allow notifications</em>.</li>
      </ol>
    <% when (platform.safari? || platform.chrome?) && platform.ios? %>
      <ol>
        <li>Open the <em><%= image_tag "external/gear.svg", aria: { hidden: "true" }, size: 20 %></em> Settings app.</li>
        <li>Scroll to and tap <em>Campfire</em>.</li>
        <li>Tap <em>Notifications</em>.</li>
        <li>Tap <em><%= image_tag "external/switch.svg", alt: "the allow notifications switch button", size: 22 %></em> to <em>Allow Notifications</em>.</li>
      </ol>
    <% when platform.chrome? && platform.android? %>
      <ol>
        <li>Open the <em><%= image_tag "external/gear.svg", aria: { hidden: "true" }, size: 20 %></em> Settings app.</li>
        <li>Tap <em>Notifications</em>.</li>
        <li>Tap <em>App notifications</em>.</li>
        <li>Scroll to <em>Campfire</em>.</li>
        <li>Tap <em><%= image_tag "external/switch.svg", alt: "the switch", size: 22 %></em> to <em>Allow Notifications</em>.</li>
      </ol>
    <% else %>
      <p>Ensure notifications are allowed for <%= platform.browser.capitalize %> in your system settings.</p>
  <% end %>
</details>



================================================
FILE: app/views/pwa/manifest.json.erb
================================================
{
  "name": "<%= Current.account&.name || "Campfire" %>",
  "icons": [
    {
      "src": "<%= fresh_account_logo_path(size: :small) %>",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "<%= fresh_account_logo_path %>",
      "type": "image/png",
      "sizes": "512x512"
    },
    {
      "src": "<%= fresh_account_logo_path %>",
      "type": "image/png",
      "sizes": "512x512",
      "purpose": "maskable"
    }
  ],
  "start_url": "/",
  "display": "standalone",
  "scope": "/",
  "description": "A chat app from the makers of Basecamp and HEY.",
  "categories": ["social", "business", "productivity"],
  "theme_color": "#ffffff",
  "background_color": "#ffffff",
  "shortcuts": [
    {
      "name": "New chat room",
      "description": "Open Campfire and start a new chat room",
      "url": "rooms/opens/new",
      "icons": [{ "src": "<%= image_url("add.svg") %>", "sizes": "any" }]
    },
    {
      "name": "My profile",
      "description": "Open Campfire and view your profile",
      "url": "/users/me/profile",
      "icons": [{ "src": "<%= image_url("person.svg") %>", "sizes": "any" }]
    }
  ],
  "screenshots": [
    {
      "src": "<%= image_url("screenshots/android-chat.png") %>",
      "sizes": "1080x2400",
      "form_factor": "narrow",
      "label": "Campfire is an installable, self-hosted group chat system."
    },
    {
      "src": "<%= image_url("screenshots/android-sidebar.png") %>",
      "sizes": "1080x2400",
      "form_factor": "narrow",
      "label": "Easily invite people. Make rooms. @mentions, DMs, and mobile support."
    },
    {
      "src": "<%= image_url("screenshots/android-dark-mode.png") %>",
      "sizes": "1080x2400",
      "form_factor": "narrow",
      "label": "Full support for dark mode, customizable to your brand."
    }
  ]
}



================================================
FILE: app/views/pwa/service_worker.js
================================================
self.addEventListener("push", async (event) => {
  const data = await event.data.json()
  event.waitUntil(Promise.all([ showNotification(data), updateBadgeCount(data.options) ]))
})

async function showNotification({ title, options }) {
  return self.registration.showNotification(title, options)
}

async function updateBadgeCount({ data: { badge } }) {
  return self.navigator.setAppBadge?.(badge || 0)
}

self.addEventListener("notificationclick", (event) => {
  event.notification.close()

  const url = new URL(event.notification.data.path, self.location.origin).href
  event.waitUntil(openURL(url))
})

async function openURL(url) {
  const clients = await self.clients.matchAll({ type: "window" })
  const focused = clients.find((client) => client.focused)

  if (focused) {
    await focused.navigate(url)
  } else {
    await self.clients.openWindow(url)
  }
}



================================================
FILE: app/views/rooms/show.html.erb
================================================
<% @page_title = room_display_name(@room) %>
<% @body_class = "sidebar" %>
<% content_for :head do %>
  <%= turbo_exempts_page_from_preview %>
  <meta name="current-room-id" content="<%= @room.id %>">
<% end %>

<%= render "rooms/show/nav", room: @room %>

<% content_for :sidebar, sidebar_turbo_frame_tag(src: user_sidebar_path) %>

<%= message_area_tag(@room) do %>
  <%= render "messages/template" %>

  <%= messages_tag(@room) do %>
    <%= render "rooms/show/invitation", room: @room %>
    <%= render partial: "messages/message", collection: @messages, cached: true %>
  <% end %>

  <%= turbo_stream_from @room, :messages %>
  <%= button_to_jump_to_newest_message %>
<% end %>

<%= render "rooms/show/composer", room: @room %>



================================================
FILE: app/views/rooms/closeds/_form.html.erb
================================================
<%= render layout: "rooms/layouts/form", locals: { room: room } do %>
  <%= user_filter_menu_tag do %>
    <% if Current.user.can_administer?(room) %>
      <li class="flex align-center gap margin-none">
        <figure class="avatar flex-item-no-shrink" style="--avatar-border-radius: 0; --avatar-size: 4ch;">
          <%= image_tag "everyone.svg", aria: { hidden: "true" }, class: "colorize--black", style: "background-color: transparent" %>
          <span class="for-screen-reader">Everyone</span>
        </figure>

        <div class="min-width">
          <div class="overflow-ellipsis fill-shade"><strong>Everyone</strong></div>
        </div>

        <hr class="separator" aria-hidden="true">

        <%= link_to type_change_path, class: "btn--faux flex-inline", tabindex: "-1", data: { turbo_action: "replace" } do %>
          <label for="room_type" class="switch">
            <input type="checkbox" id="room_type" class="switch__input">
            <span class="switch__btn round"></span>
            <span class="for-screen-reader">Give everyone access to this room</span>
          </label>
        <% end %>
      </li>

      <hr class="separator full-width" style="--border-style: solid">
    <% end %>

    <%= user_filter_search_tag if selected_users.count +  unselected_users.count > 20 %>

    <div data-filter-target="list" contents>
      <%= render partial: "rooms/closeds/user", collection: selected_users, locals: { room: room, selected: true } %>

      <% if selected_users.any? && unselected_users.any? %>
        <hr class="separator full-width" style="--border-style: solid">
      <% end %>

      <%= render partial: "rooms/closeds/user", collection: unselected_users, locals: { room: room, selected: false } %>
    </div>
  <% end %>
<% end %>



================================================
FILE: app/views/rooms/closeds/_user.html.erb
================================================
<li class="flex align-center gap margin-none" data-value="<%= user.name.downcase %>">
  <figure class="avatar flex-item-no-shrink" style="--avatar-size: 4ch;">
    <%= avatar_tag user, loading: :lazy %>
  </figure>

  <div class="min-width">
    <div class="overflow-ellipsis fill-shade"><strong><%= user.name %></strong></div>
  </div>

  <hr class="separator" aria-hidden="true">

  <% if Current.user.can_administer?(room) %>
    <% if user == Current.user && room.new_record? %>
      <%= hidden_field_tag "user_ids[]", user.id, id: nil %>
      <%= image_tag "check.svg", size: 20, class: "colorize--black flex-item-no-shrink", aria: { hidden: "true" } %>
    <% else %>
      <label class="switch flex-item-no-shrink">
        <%= check_box_tag "user_ids[]", user.id, selected, class: "switch__input", id: nil %>
        <span class="switch__btn round"></span>
        <span class="for-screen-reader">Give <%= user.name %> access to this room</span>
      </label>
    <% end %>
  <% end %>
</li>



================================================
FILE: app/views/rooms/closeds/edit.html.erb
================================================
<%= render layout: "rooms/layouts/edit", locals: { room: @room } do %>
  <%= render "rooms/closeds/form", 
        room: @room, selected_users: @selected_users, unselected_users: @unselected_users, type_change_path: edit_rooms_open_path(@room) %>
<% end %>



================================================
FILE: app/views/rooms/closeds/new.html.erb
================================================
<%= render layout: "rooms/layouts/new" do %>
  <%= render "rooms/closeds/form", room: @room, selected_users: [], unselected_users: @users, type_change_path: new_rooms_open_path %>
<% end %>



================================================
FILE: app/views/rooms/directs/edit.html.erb
================================================
<% @page_title = "Edit settings for #{room_display_name(@room)}" %>

<% content_for :nav do %>
  <div class="flex-item-justify-start">
    <%= link_back_to_last_room_visited %>
  </div>
<% end %>

<div class="panel txt-align-center">
  <section class="directs--edit margin-block-end">
    <% users = @room.users.many? ? @room.users.without(Current.user) : @room.users %>
    <% users.each do | user | %>
      <div class="member flex flex-column gap fill-shade pad border-radius">
        <figure class="avatar center" style="--avatar-border-radius: 10ch; --avatar-size: 10ch;" >
          <%= avatar_tag user, loading: :lazy %>
        </figure>

        <strong><%= user.name %></strong>
      </div>
    <% end %>
  </section>

  <%= button_to rooms_direct_url(@room), method: :delete, class: "btn btn--negative center", aria: { label: "Delete Ping" },
      data: { turbo_confirm: "Are you sure you want to delete this ping and all messages in it? This can’t be undone." } do %>
    <%= image_tag "trash.svg", aria: { hidden: "true" } %>
    Ping
  <% end %>
</div>



================================================
FILE: app/views/rooms/directs/new.html.erb
================================================
<turbo-frame id="direct_rooms_control" target="_top">
  <div class="directs directs--new flex flex-column gap">
    <%= form_with model: @room, class: "flex gap flex-item-grow", data: {
          controller: "form", action: "keydown.esc->form#cancel" } do |form| %>
      <%= link_to user_sidebar_path, class: "btn flex-item-no-shrink", data: { turbo_frame: "user_sidebar", form_target: "cancel" } do %>
        <%= image_tag "arrow-left.svg", aria: { hidden: "true" } %>
        <span class="for-screen-reader">Cancel changes</span>
      <% end %>

      <section class="autocomplete__container unpad input input--actor">
        <div class="autocomplete__input input flex flex-wrap position-relative flex-item-grow"
            data-controller="autocomplete" data-autocomplete-url-value="<%= autocompletable_users_path %>">
          <select name="user_ids[]" data-autocomplete-target="select" data-template-id="autocompletable-user" multiple="true" hidden required></select>

          <%= render "users/autocompletables/template" %>

          <%= form.text_field "user_ids_input",
                autocomplete: "off", autocorrect: "off", "data-1p-ignore": "true", class: "autocomplete__input input flex flex-wrap position-relative",
                data: { autocomplete_target: "input", action: "input->autocomplete#search keydown->autocomplete#didPressKey" } %>
        </div>
      </section>

      <%= button_tag class: "btn btn--reversed flex-item-no-shrink", type: "submit" do %>
        <%= image_tag "check.svg", aria: { hidden: "true" } %>
        <span class="for-screen-reader">Start Ping</span>
      <% end %>
    <% end %>

    <span class="txt-small translucent pad-inline-half center">Type names to ping someone…</span>
  </div>
</turbo-frame>



================================================
FILE: app/views/rooms/involvements/_bell.html.erb
================================================
<span>
  <span class="button_to_change_notifying"
      data-controller="notifications" data-notifications-subscriptions-url-value="<%= user_push_subscriptions_path %>" data-notifications-attention-class="btn--pulsing">
    <%= turbo_frame_tag dom_id(room, :involvement), data: {
          controller: "turbo-frame", action: "notifications:ready@window->turbo-frame#load", turbo_frame_url_param: room_involvement_path(room) } do %>
      <button class="btn" data-action="click->notifications#attemptToSubscribe" data-notifications-target="bell">
        <%= image_tag "notification-bell-loading.svg", size: 20, aria: { hidden: "true" } %>
        <%= image_tag "notification-bell-alert.svg", size: 20, aria: { hidden: "true" }, hidden: true %>
        <span class="for-screen-reader">Notification settings for this <%= room.direct? ? "Ping" : "room" %></span>
      </button>
    <% end %>

    <dialog data-notifications-target="notAllowedNotice" class="dialog pad center center-block border-radius border shadow" style="--inline-space: var(--block-space)">
      <div class="flex flex-column txt-align-center">
        <span class="btn btn--faux center txt-x-large">
          <%= image_tag "notification-bell-alert.svg", size: 48, aria: { hidden: "true" } %>
          <span class="for-screen-reader">Notifications alert</span>
        </span>

        <section>
          <h1 class="txt-large margin-none">Notifications aren’t allowed</h1>
          <div class="txt-align-start margin-block-start">
            <%= render partial: "pwa/browser_settings" %>
            <%= render partial: "pwa/system_settings" %>
            <%= render partial: "pwa/install_instructions" %>
          </div>
        </section>

        <form method="dialog" class="flex align-center gap center">
          <button class="btn dialog__close" autofocus="true">
            <span class="for-screen-reader">Close</span>
            <%= image_tag "remove.svg", size: 20, aria: { hidden: "true" } %>
          </button>
        </form>
      </div>
    </dialog>
  </span>
</span>



================================================
FILE: app/views/rooms/involvements/show.html.erb
================================================
<%= turbo_frame_for_involvement_tag @room do %>
  <%= button_to_change_involvement @room, @involvement %>
<% end %>



================================================
FILE: app/views/rooms/layouts/_edit.html.erb
================================================
<% @page_title = "Edit settings for #{room.name}" %>

<% content_for :nav do %>
  <div class="flex-item-justify-start">
    <%= link_back_to_last_room_visited %>
  </div>
<% end %>

<section class="panel txt-align-center" style="view-transition-name: edit-room-<%= room.id %>">
  <%= yield %>
</section>

<% if Current.user.can_administer?(@room) %>
  <section class="panel txt-align-center">
    <%= button_to_delete_room room %>
  </section>
<% end %>



================================================
FILE: app/views/rooms/layouts/_form.html.erb
================================================
<%= form_with model: room do |form| %>
  <div class="flex align-center gap">
    <% if Current.user.can_administer?(room) %>
      <%= translation_button(:room_name) %>

      <label class="flex-item-grow txt-large">
        <%= form.text_field :name, name: "room[name]", id: "room_name", class: "input full-width",
              required: true, autofocus: true, placeholder: "Name the room",
              data: { turbo_permanent: true, action: "keydown.enter->form#submit:prevent" } %>
        <span class="for-screen-reader">Name this room</span>
      </label>
    <% else %>
      <h1 class="flex-item-grow txt-x-large">
        <%= room.name %>
      </h1>
    <% end %>
  </div>

  <hr class="margin-block borderless">

  <section class="room-access margin-block pad-inline fill-shade border-radius">
    <%= yield %>
  </section>

  <%= submit_room_button_tag if Current.user.can_administer?(room) %>
<% end %>



================================================
FILE: app/views/rooms/layouts/_new.html.erb
================================================
<% @page_title = "New chat room" %>

<% content_for :nav do %>
  <div class="flex-item-justify-start">
    <%= link_back_to_last_room_visited %>
  </div>
<% end %>

<section class="panel txt-align-center" style="view-transition-name: <%= local_assigns[:view_transition_name] || "new-room" %>">
  <%= yield %>
</section>



================================================
FILE: app/views/rooms/opens/_form.html.erb
================================================
<%= render layout: "rooms/layouts/form", locals: { room: room } do %>
  <%= user_filter_menu_tag do %>
    <li class="flex align-center gap margin-none">
      <figure class="avatar flex-item-no-shrink" style="--avatar-border-radius: 0; --avatar-size: 4ch;">
        <%= image_tag "everyone.svg", aria: { hidden: "true" }, class: "colorize--black", style: "background-color: transparent" %>
        <span class="for-screen-reader">Everyone</span>
      </figure>

      <div class="min-width">
        <div class="overflow-ellipsis fill-shade"><strong>Everyone</strong></div>
      </div>

      <hr class="separator" aria-hidden="true">

      <% if Current.user.can_administer?(room) %>
        <%= link_to type_change_path, class: "btn--faux flex-inline", tabindex: "-1", data: { turbo_action: "replace" } do %>
          <label for="room_type" class="switch">
            <input type="checkbox" id="room_type" class="switch__input" checked="checked">
            <span class="switch__btn round"></span>
            <span class="for-screen-reader">Give only some access to this room</span>
          </label>
        <% end %>
      <% end %>
    </li>

    <hr class="separator full-width" style="--border-style: solid">

    <%= user_filter_search_tag if users.count > 20 %>

    <div data-filter-target="list" contents>
      <%= render partial: "rooms/opens/user", collection: users, locals: { room: room } %>
    </div>
  <% end %>
<% end %>



================================================
FILE: app/views/rooms/opens/_user.html.erb
================================================
<li class="flex align-center gap margin-none" data-value="<%= user.name.downcase %>">
  <figure class="avatar flex-item-no-shrink" style="--avatar-size: 4ch;">
    <%= avatar_tag user, loading: :lazy %>
  </figure>

  <div class="min-width">
    <div class="overflow-ellipsis fill-shade"><strong><%= user.name %></strong></div>
  </div>

  <hr class="separator" aria-hidden="true">

  <% if Current.user.can_administer?(room) %>
    <%= image_tag "check.svg", size: 20, class: "colorize--black flex-item-no-shrink", aria: { hidden: "true" } %>
  <% end %>
</li>



================================================
FILE: app/views/rooms/opens/edit.html.erb
================================================
<%= render layout: "rooms/layouts/edit", locals: { room: @room } do %>
  <%= render "rooms/opens/form", room: @room, users: @users, type_change_path: edit_rooms_closed_path(@room) %>
<% end %>



================================================
FILE: app/views/rooms/opens/new.html.erb
================================================
<%= render layout: "rooms/layouts/new" do %>
  <%= render "rooms/opens/form", room: @room, users: @users, type_change_path: new_rooms_closed_path %>
<% end %>



================================================
FILE: app/views/rooms/refreshes/show.turbo_stream.erb
================================================
<%= turbo_stream.append dom_id(@room, :messages) do %>
  <%= render partial: "messages/message", collection: @new_messages, cached: true %>
<% end if @new_messages.any? %>

<% @updated_messages.each do |message| %>
  <%= turbo_stream.replace dom_id(message), partial: "messages/message", locals: { message: message } %>
<% end %>



================================================
FILE: app/views/rooms/show/_composer.html.erb
================================================
<% content_for :footer do %>
  <div class="composer flex align-end gap position-relative"
      data-controller="typing-notifications" data-typing-notifications-active-class="typing-indicator--active">
    <%= link_to searches_path, class: "btn flex-item-no-shrink margin-block-end composer__context-btn", style: "view-transition-name: input-switcher" do %>
      <%= image_tag "search.svg", size: 20, aria: { hidden: "true" } %>
      <span class="for-screen-reader">Search</span>
    <% end %>

    <turbo-frame id="composer-frame">
      <%= composer_form_tag(room) do |form| %>
        <fieldset data-composer-target="fields" contents>
          <div class="flex flex-column">
            <div class="composer__filelist flex flex--align-center gap flex-wrap" data-composer-target="fileList"></div>

            <div class="flex composer__input input input--actor fill-white min-width" style="--input-border-radius: 1.3rem">
              <div class="flex align-end gap full-width">
                <%= image_tag "messages-outlined.svg", size: 22, aria: { hidden: "true" }, class: "composer__input-hint colorize--black", style: "view-transition-name: input-btn;" %>

                <div class="flex flex-column flex-item-grow min-width gap">
                  <%= form.rich_text_area :body,
                        rows: 1,
                        class: "input",
                        style: "order: -1",
                        aria: { multiline: "true", label: "Write a message" },
                        data: {
                          controller: "rich-autocomplete",
                          action: rich_text_data_actions,
                          rich_autocomplete_url_value: autocompletable_users_path(room_id: room.id),
                          permitted_attachment_types: "application/vnd.actiontext.opengraph-embed",
                          composer_target: "text" } %>
                </div>

                <label class="btn btn--borderless txt-small flex-item-no-shrink composer__attachment-btn input--file">
                  <%= image_tag "attachment.svg", size: 22, class: "colorize--black", aria: { hidden: "true" } %>
                  <input type="file" data-action="composer#filePicked" multiple />
                  <span class="for-screen-reader">Attach a file</span>
                </label>

                <button class="btn btn--borderless txt-small flex-item-no-shrink composer__rich-text-btn" type="button" data-action="composer#toggleToolbar">
                  <%= image_tag "text-options.svg", size: 20, class: "colorize--black", aria: { hidden: "true" } %>
                  <span class="for-screen-reader">Rich text</span>
                </button>

                <%= form.button name: "send", type: "submit", data: { action: "composer#submit" },
                      class: "btn btn--reversed flex-item-no-shrink txt-small" do %>
                  <%= image_tag "arrow-up.svg", size: 20, aria: { hidden: "true" } %>
                  <span class="for-screen-reader">Send Message</span>
                <% end %>
              </div>
            </div>
          </div>
        </fieldset>

        <div class="typing-indicator gap txt-small align-center flex-inline" data-typing-notifications-target="indicator">
          <div class="typing-indicator__author spinner" data-typing-notifications-target="author"></div>
        </div>

        <%= form.hidden_field :client_message_id, data: { composer_target: "clientid" } %>
      <% end %>
    </turbo-frame>
  </div>
<% end %>



================================================
FILE: app/views/rooms/show/_invitation.html.erb
================================================
<% if @room == Room.original && !@room.messages.paged? %>
  <div id="system_welcome" class="message message--formatted txt-align-center center">
    <div class="message__body center">
      <div class="message__body-content position-relative">
        <%= account_logo_tag style: "center margin-block-end txt-large" %>
        <div class="flex align-center gap">
          <div class="system-welcome--translation">
            <%= translation_button(:invite_message) %>
          </div>
          <p>
            <strong>Welcome to Campfire</strong><br>
            To invite people to chat, share the join link below.
          </p>
        </div>
        <%= render "accounts/invite" %>
      </div>
    </div>
  </div>
<% end %>



================================================
FILE: app/views/rooms/show/_nav.html.erb
================================================
<% content_for :nav do %>
  <%= account_logo_tag if Current.account.logo.attached? %>

  <%= tag.span class: "btn btn--reversed btn--faux room--current" do %>
    <h1 class="room__contents txt-medium overflow-ellipsis">
      <% if room.direct? %>
        <span class="for-screen-reader">Ping with</span>
      <% end %>

      <%= room_display_name(room) %>
    </h1>
  <% end %>

  <%= link_to_edit_room(room) do %>
    <%= image_tag "menu-dots-horizontal.svg", size: 20, aria: { hidden: "true" } %>
    <span class="for-screen-reader">Settings for this <%= room.direct? ? "Ping" : "room" %></span>
  <% end %>

  <%= render "rooms/involvements/bell", room: room %>
<% end %>



================================================
FILE: app/views/searches/index.html.erb
================================================
<% @page_title = "Search" %>
<% @body_class = "sidebar searches" %>

<% content_for :nav do %>
  <% if @query %>
    <div class="searches__query flex align-center gap pad-block-start-half">
      <%= tag.div class: "btn btn--reversed btn--faux align-center gap txt-nowrap" do %>
        <span class="overflow-ellipsis">“<%= @query %>”</span>
        <span class="flex-item-no-shrink"><%= @messages.count %></span>
      <% end %>
    </div>
  <% end %>

  <div class="searches__recents align-center gap pad-block-half overflow-y overflow-hide-scrollbar">
    <% @recent_searches.each do |search| %>
      <%= link_to searches_path(q: search.query), class: "align-center gap room btn txt-nowrap" do %>
        <span class="overflow-ellipsis">“<%= search.query %>”</span>
      <% end %>
    <% end %>

    <% if @recent_searches.any? %>
      <%= button_to clear_searches_url, method: :delete, class: "btn searches__btn",
              data: { turbo_confirm: "Are you sure you want to clear your recent searches?" } do %>
        <%= image_tag "broom.svg", aria: { hidden: "true" } %>
        <span class="for-screen-reader">Clear recent searches</span>
      <% end %>
    <% end %>
  </div>
<% end %>

<% content_for :sidebar do %>
  <div class="rooms position-relative flex flex-column gap overflow-y overflow-hide-scrollbar">
    <% @recent_searches.each do |search| %>
      <%= link_to searches_path(q: search.query), class: "align-center gap room btn txt-nowrap" do %>
        <span class="overflow-ellipsis">“<%= search.query %>”</span>
      <% end %>
    <% end %>

    <% if @recent_searches.any? %>
      <%= button_to clear_searches_url, method: :delete, class: "btn searches__btn",
              data: { turbo_confirm: "Are you sure you want to clear your recent searches?" } do %>
        <%= image_tag "broom.svg", aria: { hidden: "true" } %>
        <span class="for-screen-reader">Clear recent searches</span>
      <% end %>
    <% end %>
  </div>
<% end %>

<div id="message-area" class="message-area">
  <div class="message-area--empty min-width center">
    <figure class="center pad">
      <%= image_tag "search.svg", aria: { hidden: "true" }, class: "colorize--black translucent" %>
    </figure>
  </div>

  <%= search_results_tag do %>
    <%= render @messages %>
  <% end %>
</div>

<% content_for :footer do %>
  <div class="composer flex align-end gap">
    <%= link_to room_path(@return_to_room),
            class: "btn flex-item-no-shrink margin-block-end", style: "view-transition-name: input-switcher; --btn-border-radius: 0.5em" do %>
      <%= image_tag "arrow-left.svg", aria: { hidden: "true" } %>
      <span class="for-screen-reader">Exit search </span>
    <% end %>

    <%= form_with url: searches_path, class: "margin-block flex-item-grow contain flex align-center gap",
          data: { controller: "form", action: "keydown.esc->form#cancel" } do |form| %>
      <div class="composer__input flex align-center flex-item-grow gap full-width input input--actor min-width">
        <%= image_tag "search.svg", size: 20, aria: { hidden: "true" }, class: "composer__input-hint colorize--black", style: "view-transition-name: input-btn;" %>

        <%= form.text_field :q, value: params[:q], class: "searches__input input flex-item-grow", role: "searchbox", aria: { label: "search" }, autofocus: true, required: true %>

        <%= link_to searches_path, data: { form_target: "cancel" }, role: "button", class: "searches__reset" do %>
          <%= image_tag "remove.svg", aria: { hidden: "true" }, size: 14, class: "colorize--black" %>
          <span class="for-screen-reader">Clear search field</span>
        <% end %>

        <%= form.button type: "submit", class: "btn btn--reversed flex-item-no-shrink txt-small", style: "--btn-border-radius: 0.5em" do %>
          <%= image_tag "arrow-up.svg", aria: { hidden: "true" } %>
          <span class="for-screen-reader">Search</span>
        <% end %>
      </div>
    <% end %>
  </div>
<% end %>



================================================
FILE: app/views/sessions/incompatible_browser.html.erb
================================================
<% @page_title = platform.apple_messages? ? "Campfire" : "Unsupported browser" %>

<div class="panel center">
  <header>
    <h1 class="txt-x-large txt-tight-lines txt-align-center margin-none-block-start margin-block-end">
      Upgrade to a supported web browser
    </h1>
    <div class="flex align-start gap">
      <%= translation_button(:incompatible_browser_messsage) %>
      <p class="margin-none-block-start">Campfire requires a modern web browser. Please use one of the browsers listed below and make sure auto-updates are enabled.</p>
    </div>
  </header>

  <div class="browser-list flex align-center flex-wrap gap justify-center margin-block">
    <% AllowBrowser::VERSIONS.each do |browser, version| %>
      <% next unless version %>

      <div class="browser flex flex-column">
        <%= image_tag "browsers/#{browser}.svg", aria: { hidden: "true" }, class: "center" %>
        <div class="flex flex-column align-center margin-block-start-half">
          <strong><%= browser.capitalize %></strong>
          <span> <%= version %>+</span>
        </div>
      </div>
    <% end %>
  </div>
</div>



================================================
FILE: app/views/sessions/new.html.erb
================================================
<% @page_title = "Sign in" %>
<% turbo_page_requires_reload %>

<section class="txt-align-center">
  <div class="panel <%= "shake" if flash[:alert] %>">
    <%= account_logo_tag style: "center margin-block-end txt-xx-large" %>

    <%= form_with url: session_url, class: "flex flex-column gap" do |form| %>
      <fieldset class="flex flex-column gap center-block upad">
        <legend class="txt-large txt-align-center"><strong><%= Current.account.name %></strong></legend>

        <div class="flex align-center gap">
          <%= translation_button(:email_address) %>
          <label class="flex align-center gap input input--actor txt-large">
            <%= form.email_field :email_address, required: true, class: "input", autofocus: true, autocomplete: "username", placeholder: "Enter your email address", value: params[:email_address] %>
            <%= image_tag "email.svg", aria: { hidden: "true" }, size: 24, class: "colorize--black" %>
          </label>
        </div>

        <div class="flex align-center gap">
          <%= translation_button(:password) %>
          <label class="flex align-center gap input input--actor txt-large">
            <%= form.password_field :password, required: true, class: "input", autocomplete: "current-password", placeholder: "Enter your password", maxlength: 72 %>
            <%= image_tag "password.svg", aria: { hidden: "true" }, size: 24, class: "colorize--black" %>
          </label>
        </div>

        <%= form.button class: "btn btn--reversed center txt-large", type: "submit", name: "log_in" do %>
          <%= image_tag "arrow-right.svg", aria: { hidden: "true" } %>
          <span class="for-screen-reader">Go</span>
        <% end %>
      </fieldset>
    <% end %>
  </div>

  <%= render "accounts/help_contact" %>
</section>



================================================
FILE: app/views/sessions/transfers/show.html.erb
================================================
<%= auto_submit_form_with method: :put %>



================================================
FILE: app/views/users/_mention.html.erb
================================================
<div class="mention" sgid="<%= user.attachable_sgid %>">
  <%= avatar_tag user %>
  <%= user.name %>
</div>



================================================
FILE: app/views/users/new.html.erb
================================================
<% @page_title = "Sign up" %>
<% @body_class = "signup" %>

<% content_for :nav do %>
  <div class="flex-item-justify-end">
    <%= link_to new_session_path, class: "btn flex-item-justify-end" do %>
      <%= image_tag "login-keys.svg", aria: { hidden: "true" } %>
      <span class="for-screen-reader">Sign in</span>
    <% end %>
  </div>
<% end %>

<%= form_with model: @user, url: join_path(params[:join_code]), class: "center" do |form| %>
  <section class="nametag u-relative">
    <div class="flex justify-center align-center pad-block">
      <%= image_tag "lanyard.svg", class: "nametag__lanyard", aria: { hidden: "true" } %>
    </div>

    <div class="nametag__inner flex flex-column gap">
      <fieldset class="flex flex-column center-block">
        <legend class="txt-align-center flex gap">
          <%= account_logo_tag %>
          <strong class="txt-large"><%= Current.account.name %></strong>
        </legend>

        <label class="align-center center avatar__form gap" data-controller="upload-preview">
          <div class="btn input--file">
            <%= image_tag "camera.svg", aria: { hidden: "true" } %>
            <%= form.file_field :avatar, class: "input", accept: "image/*",
                  data: { upload_preview_target: "input", action: "upload-preview#previewImage" } %>
            <span class="for-screen-reader">Upload avatar</span>
          </div>

          <div class="btn avatar input--file txt-xx-large">
            <%= image_tag @user.avatar.attached? ? @user.avatar : "default-avatar.svg", aria: { hidden: "true" }, data: { upload_preview_target: "image" } %>
            <span class="for-screen-reader">Avatar</span>
          </div>
        </label>
      </fieldset>

      <div class="flex align-center gap">
        <%= translation_button(:user_name) %>
        <label class="flex align-center gap flex-item-grow txt-large input input--actor">
          <%= form.text_field :name, class: "input", autocomplete: "name", placeholder: "Name", autofocus: true, required: true,
                data: { "1p-ignore": true } %>
          <%= image_tag "person.svg", aria: { hidden: "true" }, size: 24, class: "colorize--black" %>
        </label>
      </div>

      <div class="flex align-center gap">
        <%= translation_button(:email_address) %>
        <label class="flex align-center gap flex-item-grow txt-large input input--actor">
          <%= form.email_field :email_address, class: "input", autocomplete: "username", placeholder: "Email address", required: true %>
          <%= image_tag "email.svg", aria: { hidden: "true" }, size: 24, class: "colorize--black" %>
        </label>
      </div>

      <div class="flex align-center gap">
        <%= translation_button(:password) %>
        <label class="flex align-center gap flex-item-grow txt-large input input--actor">
          <%= form.password_field :password, class: "input", autocomplete: "new-password", placeholder: "Password", required: true, maxlength: 72 %>
          <%= image_tag "password.svg", aria: { hidden: "true" }, size: 24, class: "colorize--black" %>
        </label>
      </div>

      <%= form.button class: "btn btn--reversed center txt-large", type: "submit" do %>
        <%= image_tag "check.svg", aria: { hidden: "true" } %>
        <span class="for-screen-reader">Save</span>
      <% end %>
    </div>
  </section>
<% end %>

<%= render "accounts/help_contact" %>



================================================
FILE: app/views/users/show.html.erb
================================================
<% @page_title = @user.name %>

<% content_for :nav do %>
  <div class="flex-item-justify-start">
    <%= link_back %>
  </div>

  <div class="flex align-center gap flex-item-justify-end">
    <% if Current.user == @user %>
      <%= link_to user_profile_path, class: "btn" do %>
        <%= image_tag "pencil.svg", aria: { hidden: "true" } %>
        <span class="for-screen-reader">Edit my profile</span>
      <% end %>
    <% end %>
  </div>
<% end %>

<section class="panel txt-align-center">
  <div class="flex flex-column gap">
    <div class="avatar txt-xx-large center" style="background: white">
      <%= image_tag fresh_user_avatar_path(@user), alt: "Profile avatar", class: "avatar" %>
    </div>

    <% if @user.bot? %>
      <div class="pad-double--inline push--inline push--block-start">
        <% if @user.active? %>
          <%= button_to_direct_room_with @user%>
        <% else %>
          <div><%= @user.name %> is no longer on this account</div>
        <% end %>
      </div>
    <% else %>
      <% if @user.active? %>
        <div class="flex flex-column gap" style="--row-gap: calc(var(--block-space) / 3)">
          <h1 class="txt-x-large txt-tight-lines margin-none"><%= @user.name %></h1>
          <% if Current.user.can_administer? %>
            <div><%= mail_to @user.email_address %></div>
          <% end %>
          <div><%= @user.bio %></div>
        </div>

        <div class="pad-inline-double margin-inline margin-block-start">
          <%= button_to rooms_directs_path(user_ids: [ @user.id ]), class: "btn btn--reversed full-width txt-large" do %>
            <%= image_tag "messages.svg", aria: { hidden: "true", label: "Ping #{@user.name}" } %>
          <% end %>
        </div>

        <% if Current.user.can_administer? %>
          <hr class="margin-block-start borderless">

          <%= render "users/profiles/transfer", user: @user %>
        <% end %>
      <% else %>
        <div>
          <h1 class="txt-x-large margin-none"><%= @user.name %></h1>
          <div><%= @user.name %> is no longer on this account</div>
        </div>
      <% end %>
    <% end %>
  </div>
</section>



================================================
FILE: app/views/users/autocompletables/_template.html.erb
================================================
<template id="autocompletable-user">
  <div class="autocomplete__pill max-width" data-value="" tabindex="0">
    <img class="avatar flex-item-no-shrink" data-content="avatar" src="" />
    <span class="autocomplete-field__selected-value-text overflow-ellipsis flex-item-grow" data-content="label"></span>

    <button type="button" data-action="autocomplete#remove:prevent" data-value="" tabindex="-1" class="btn btn--plain txt-small translucent flex-item-no-shrink">
      <%= image_tag "remove-circle.svg", aria: { hidden: "true" }, class: "colorize--black" %>
      <span class="for-screen-reader">Remove <span data-content="screenReaderLabel"></span></span>
    </button>
  </div>
</template>



================================================
FILE: app/views/users/avatars/show.svg.erb
================================================
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
  viewBox="0 0 512 512" class="avatar" aria-hidden="true">
  <defs>
    <clipPath id="porthole">
      <circle cx="50%" cy="50%" r="50%" />
    </clipPath>
  </defs>

  <g>
    <rect width="100%" height="100%" rx="50" fill="<%= avatar_background_color(@user) %>" />

    <text x="50%" y="50%" fill="#FFFFFF"
      text-anchor="middle" dy="0.35em"
      <%=raw 'textLength="85%" lengthAdjust="spacingAndGlyphs"' if @user.initials.size >= 3 %>
      font-family="-apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica, Arial, sans-serif"
      font-size="230"
      font-weight="800"
      letter-spacing="-5">
      <%= @user.initials %>
    </text>
  </g>
</svg>



================================================
FILE: app/views/users/profiles/_membership.html.erb
================================================
<li class="flex align-center gap margin-none min-width membership-item">
  <%= link_to room_path(membership.room), class: "overflow-ellipsis fill-shade txt-primary txt-undecorated" do %>
    <strong><%= room_display_name(membership.room) %></strong>
  <% end %>

  <hr class="separator" aria-hidden="true">

  <span class="txt-small">
    <%= turbo_frame_tag dom_id(membership.room, :involvement) do %>
      <%= button_to_change_involvement(membership.room, membership.involvement) %>
    <% end %>
  </span>
</li>



================================================
FILE: app/views/users/profiles/_transfer.html.erb
================================================
<% url = session_transfer_url(user.transfer_id) %>

<fieldset>
  <legend class="gap">
    <%= image_tag "laptop.svg", aria: { hidden: "true" }, size: 36, class: "colorize--black" %>
    <%= image_tag "transfer.svg", aria: { hidden: "true" }, size: 36, class: "colorize--black" %>
    <%= image_tag "mobile-phone.svg", aria: { hidden: "true" }, size: 36, class: "colorize--black" %>
  </legend>


  <div class="flex flex-column gap">
    <% if Current.user != user %>
      <div class="flex align-center gap justify-center">
        <%= image_tag "crown.svg", size: 16, aria: { hidden: "true" }, class: "flex-item-no-shrink colorize--black" %>
        <label for="session_transfer_url">Share to get them back into their account</label>
      </div>
    <% else %>
      <label for="session_transfer_url" class="for-screen-reader">Use this link to login automatically on another device</label>
    <% end %>

    <input type="text" class="input" value="<%= url %>" id="session_transfer_url" readonly>

    <div class="flex align-center center gap">
      <%= link_to_zoom_qr_code(url) do %>
        <span class="for-screen-reader">Show auto-login QR code</span>
        <%= image_tag "qr-code.svg", aria: { hidden: "true" }, size: 20, class: "colorize--black" %>
      <% end %>

      <%= button_to_copy_to_clipboard(url) do %>
        <span class="for-screen-reader">Copy auto-login link</span>
        <%= image_tag "copy-paste.svg", aria: { hidden: "true" }, size: 20, class: "flex-item-no-shrink colorize--black" %>
      <% end %>

      <%= web_share_session_button(url, "Your sign-in link", "This is your own private sign-in URL, DO NOT SHARE IT. Use it to sign-in on another device or if you get locked out.") do %>
        <span class="for-screen-reader">Share auto-login link</span>
        <%= image_tag "share.svg", aria: { hidden: "true" }, size: 20, class: "flex-item-no-shrink colorize--black" %>
      <% end %>
    </div>
  </div>
</fieldset>



================================================
FILE: app/views/users/profiles/show.html.erb
================================================
<% @page_title = @user.name %>

<% content_for :nav do %>
  <div class="flex-item-justify-start">
    <%= link_back %>
  </div>

  <div class="flex-item-justify-end">
    <%= form_with url: session_path, method: :delete, data: { controller: "sessions" } do %>
      <%= hidden_field_tag :push_subscription_endpoint, nil, data: { sessions_target: "pushSubscriptionEndpoint" } %>

      <button class="btn" data-action="sessions#logout:prevent">
        <%= image_tag "logout.svg", aria: { hidden: "true" } %>
        <span class="for-screen-reader">Log out</span>
      </button>
    <% end %>
  </div>
<% end %>

<section class="panel flex flex-column gap" style="view-transition-name: avatar-<%= @user.id %>">
  <%= render partial: "pwa/install_instructions" %>

  <div class="align-center center avatar__form gap" data-controller="upload-preview">
    <%= profile_form_with @user, class:"txt-medium" do |form| %>
      <label class="btn input--file">
        <%= image_tag "camera.svg", aria: { hidden: "true" }, size: 20 %>
        <%= form.file_field :avatar, id: "file", class: "input", accept: "image/*",
            data: { upload_preview_target: "input", action: "upload-preview#previewImage change->form#submit" } %>
        <span class="for-screen-reader">Upload avatar</span>
      </label>
    <% end %>

    <%= profile_form_with @user do |form| %>
      <label class="btn avatar input--file txt-xx-large">
        <%= image_tag fresh_user_avatar_path(@user), aria: { hidden: "true" }, size: 300, data: { upload_preview_target: "image" } %>
        <%= form.file_field :avatar, id: "file", class: "input", accept: "image/*",
            data: { upload_preview_target: "input", action: "upload-preview#previewImage change->form#submit" } %>
        <span class="for-screen-reader">Avatar</span>
      </label>
    <% end %>

    <% if @user.avatar.attached? %>
      <%= button_to user_avatar_path(@user), method: :delete, class: "btn btn--negative txt-small avatar__delete-btn" do %>
        <%= image_tag "minus.svg", aria: { hidden: "true" }, size: 20 %>
        <span class="for-screen-reader">Delete avatar</span>
      <% end %>
    <% end %>
  </div>

  <%= profile_form_with @user do |form| %>
    <div class="flex flex-column gap">
      <div class="flex align-center gap">
        <%= translation_button(:user_name) %>

        <label class="flex align-center gap flex-item-grow input input--actor">
          <%= form.text_field :name, class: "input txt-large ", autocomplete: "name", placeholder: "Enter your name",
                autofocus: true, required: true,  data: { "1p-ignore": true } %>
          <%= image_tag "person.svg", aria: { hidden: "true" }, size: 24, class: "colorize--black" %>
        </label>
      </div>

      <div class="flex align-center gap">
        <%= translation_button(:email_address) %>

        <label class="flex align-center gap flex-item-grow input input--actor">
          <%= form.email_field :email_address, class: "input txt-large", value: @user.email_address, autocomplete: "username",
                placeholder: "Enter your email address", required: false %>
          <%= image_tag "email.svg", aria: { hidden: "true" }, size: 24, class: "colorize--black" %>
        </label>
      </div>

      <div class="flex align-center gap">
        <%= translation_button(:update_password) %>

        <label class="flex align-center gap flex-item-grow input input--actor">
          <%= form.password_field :password, class: "input txt-large", autocomplete: "new-password", placeholder: "Change password",
                required: false, maxlength: 72 %>
          <%= image_tag "password.svg", aria: { hidden: "true" }, size: 24, class: "colorize--black" %>
        </label>
      </div>

      <div class="flex align-start gap">
        <%= translation_button(:bio) %>

        <label class="flex align--center gap flex-item--grow input input--actor">
          <%= form.text_area :bio, class: "input txt-large", placeholder: "A few words about yourself…", maxlength: 200,
                rows: 3, required: false %>
          <%= image_tag "bio.svg", aria: { hidden: "true" }, size: 24, class: "colorize--black" %>
        </label>
      </div>

      <%= profile_form_submit_button %>
    </div>
  <% end %>

  <div class="margin-block pad-inline pad-block fill-shade border-radius">
    <menu class="flex flex-column gap margin-none pad">
      <%= render partial: "users/profiles/membership", collection: @shared_memberships %>

      <% if @direct_memberships.any? && @shared_memberships.any? %>
        <hr class="separator full-width" style="--border-style: solid">
      <% end %>

      <%= render partial: "users/profiles/membership", collection: @direct_memberships %>
    </menu>
  </div>

  <%= render "users/profiles/transfer", user: @user %>

  <% if Rails.env.development? %>
    <fieldset>
      <legend>
        <%= image_tag "key.svg", aria: { hidden: "true" }, size: 36, class: "colorize--black" %>
      </legend>
      <%= link_to "Push Notifications Dev Mode", user_push_subscriptions_url, class: "btn txt-small center" %>
    </fieldset>
  <% end %>
</section>



================================================
FILE: app/views/users/push_subscriptions/_push_subscription.html.erb
================================================
<li class="flex flex-column margin-none membership-item">
  <span class="overflow-ellipsis txt-primary txt-undecorated">
    <% agent = UserAgent.parse(push_subscription.user_agent) %>
    <strong><%= agent.browser %> <%= agent.version %> on <%= agent.platform %></strong><br>
  </span>

  <span class="flex align-start gap txt-small">
    <span><%= push_subscription.endpoint %></span>

    <span class="flex align-center gap">
      <%= button_to user_push_subscription_test_notifications_path(push_subscription), class: "btn btn--reversed" do %>
        <%= image_tag "notification-bell-everything.svg", aria: { hidden: "true" }, size: 20 %>
        <span class="for-screen-reader">Send test notification</span>
      <% end %>

      <%= button_to user_push_subscription_path(push_subscription), method: :delete, class: "btn btn--negative" do %>
        <%= image_tag "minus.svg", aria: { hidden: "true" }, size: 20 %>
        <span class="for-screen-reader">Delete subscription</span>
      <% end %>
    </span>
  </span>
</li>



================================================
FILE: app/views/users/push_subscriptions/index.html.erb
================================================
<% @page_title = "Push notification subscriptions" %>

<% content_for :nav do %>
  <div class="flex-item-justify-start">
    <%= link_back_to_last_room_visited %>
  </div>
<% end %>

<section class="panel panel--wide flex flex-column gap">
  <h1 class="txt-align-center txt-large margin-none">Push Notification Subscriptions</h1>
  <div class="pad-inline fill-shade border-radius" id="push_subscriptions">
    <menu class="pad flex flex-column gap">
      <%= render partial: "users/push_subscriptions/push_subscription", collection: @push_subscriptions %>
    </menu>
  </div>
</section>



================================================
FILE: app/views/users/sidebars/show.html.erb
================================================
<%= sidebar_turbo_frame_tag do %>
  <%= turbo_stream_from :rooms %>
  <%= turbo_stream_from Current.user, :rooms %>

  <div class="sidebar__container overflow-y overflow-hide-scrollbar"
      data-controller="badge-dot"
      data-badge-dot-unread-class="unread"
      data-action="rooms-list:unread@window->badge-dot#update rooms-list:read@window->badge-dot#update turbo:submit-start->turbo-frame#unpermanize">
    <turbo-frame id="direct_rooms_control" target="_top">
      <div class="directs gap overflow-x overflow-hide-scrollbar">
        <%= link_to new_rooms_direct_path, class: "direct direct__new", data: { turbo_frame: "_self" } do %>
          <span class="avatar avatar--icon">
            <%= image_tag "messages-add.svg", size: 20, aria: { hidden: "true" }, class: "colorize--black" %>
          </span>

          <span class="direct__author flex max-width min-width border-radius pad-inline-half">
            <span class="for-screen-reader">New</span>
            <span class="txt-small overflow-clip">Ping</span>
          </span>
        <% end %>

        <div id="direct_rooms" contents data-controller="sorted-list" data-action="rooms-list:unread@window->sorted-list#updateItem">
          <%= render partial: "users/sidebars/rooms/direct", collection: @direct_memberships, as: :membership, cached: true %>
        </div>

        <div contents>
          <%= render partial: "users/sidebars/rooms/direct_placeholder", collection: @direct_placeholder_users, as: :user %>
        </div>
      </div>
    </turbo-frame>

    <div class="rooms position-relative flex flex-column gap">
      <div id="shared_rooms" contents data-controller="sorted-list">
        <% @other_memberships.each do |membership| %>
          <%= render "users/sidebars/rooms/shared", room: membership.room, unread: membership.unread? %>
        <% end %>
      </div>

      <%= link_to new_rooms_open_path, class: "rooms__new-btn btn room align-center gap txt-reversed", aria: { label: "New Chat Room" } do %>
        <%= image_tag "add.svg", size: 20, aria: { hidden: "true" }, style: "view-transition-name: new-room" %>
      <% end %>
    </div>

    <button class="btn sidebar__toggle" data-action="toggle-class#toggle">
      <%= image_tag "menu.svg", size: 20, aria: { hidden: "true" } %>
      <span class="for-screen-reader">Open menu</span>
    </button>
  </div>

  <div class="flex align-end sidebar__tools gap justify-end">
    <%= link_to user_profile_path, class: "btn avatar flex-item-no-shrink sidebar__tool" do %>
      <%= image_tag fresh_user_avatar_path(Current.user), size: 48, aria: { hidden: "true" }, style: "view-transition-name: avatar-#{Current.user.id}" %>
      <span class="for-screen-reader">My Settings</span>
    <% end %>

    <%= link_to edit_account_path, class: "btn align-center gap txt-reversed sidebar__tool" do %>
      <%= image_tag "settings.svg", size: 20, aria: { hidden: "true" }, style: "view-transition-name: account-settings" %>
      <span class="for-screen-reader">Account Settings</span>
    <% end %>
  </div>
<% end %>



================================================
FILE: app/views/users/sidebars/rooms/_direct.html.erb
================================================
<% cache membership do %>
  <% members = membership.room.users.without(membership.user).presence || [ membership.user ] %>

  <%= link_to_room membership.room, class: [ "direct", "unread": membership.unread? ], id: dom_id(membership.room, :list),
        data: { sorted_list_number: membership.room.updated_at.to_fs(:epoch) } do %>
    <% if members.many? %>
      <div class="avatar__group">
        <% members.first(4).each do |member| %>
          <span class="avatar">
            <%= image_tag fresh_user_avatar_path(member), size: 20, aria: { hidden: "true" } %>
          </span>
        <% end %>
      </div>
    <% else %>
      <span class="avatar">
        <%= image_tag fresh_user_avatar_path(members.first), size: 48, aria: { hidden: "true" } %>
      </span>
    <% end %>

    <span class="direct__author flex align-center gap max-width min-width border-radius txt-small">
      <span class="txt-nowrap overflow-ellipsis">
        <span class="for-screen-reader">Ping with</span>
        <% if members.many? %>
          <%= members.map { |member| member.name.split(' ')[0, 3].map { |str| str[0].capitalize }.join }.to_sentence(two_words_connector: '+') %>
        <% else %>
          <%= members.first.name.split(' ')[0] %>
        <% end %>
      </span>
    </span>
  <% end %>
<% end %>



================================================
FILE: app/views/users/sidebars/rooms/_direct_placeholder.html.erb
================================================
<%= button_to rooms_directs_path(user_ids: [ user.id ]), class: "direct borderless fill-transparent unpad" do %>
  <span class="avatar">
    <%= image_tag fresh_user_avatar_path(user), aria: { hidden: "true" } %>
  </span>

  <span class="direct__author flex align-center gap max-width min-width border-radius txt-small">
    <span class="txt-nowrap overflow-ellipsis">
      <span class="for-screen-reader">Start a ping with</span>
      <%= user.name.split(' ')[0] %>
    </span>
  </span>
<% end %>



================================================
FILE: app/views/users/sidebars/rooms/_shared.html.erb
================================================
<%= link_to_room room,
      id: dom_id(room, :list), data: { sorted_list_name: room.name },
      style: "--column-gap: 0.5em", class: [ "align-center gap room btn txt-nowrap", "unread": local_assigns[:unread] ] do %>
  <span class="overflow-ellipsis"><%= room.name %></span>
<% end %>



================================================
FILE: app/views/welcome/show.html.erb
================================================
<% @page_title = "No rooms yet" %>
<% @body_class = "sidebar" %>

<% content_for :sidebar, sidebar_turbo_frame_tag(src: user_sidebar_path) %>

<div id="message-area" class="message-area">
  <div class="message-area--empty min-width center">
    <figure class="center pad">
      <%= image_tag "messages-empty.svg", aria: { hidden: "true" }, class: "colorize--black translucent" %>
      <span class="for-screen-reader"><%= Current.user.name %></span>
    </figure>
  </div>
</div>



================================================
FILE: config/application.rb
================================================
require_relative "boot"

require "rails/all"

Bundler.require(*Rails.groups)

module Campfire
  class Application < Rails::Application
    # Initialize configuration defaults for originally generated Rails version.
    config.load_defaults 8.1

    # Please, add to the `ignore` list any other `lib` subdirectories that do
    # not contain `.rb` files, or that should not be reloaded or eager loaded.
    # Common ones are `templates`, `generators`, or `middleware`, for example.
    config.autoload_lib(ignore: %w[assets tasks rails_ext])

    # Fallback to English if translation key is missing
    config.i18n.fallbacks = true

    # Use SQL schema format to include search-related objects
    config.active_record.schema_format = :sql
  end
end



================================================
FILE: config/boot.rb
================================================
ENV["BUNDLE_GEMFILE"] ||= File.expand_path("../Gemfile", __dir__)

require "bundler/setup" # Set up gems listed in the Gemfile.



================================================
FILE: config/brakeman.ignore
================================================
{
  "ignored_warnings": [
    {
      "warning_type": "Dynamic Render Path",
      "warning_code": 15,
      "fingerprint": "58c19ad06ce51511be9d6d9e5828f4a0ed96ab52c963ff37b4b4a606620ab66b",
      "check_name": "Render",
      "message": "Render path contains parameter value",
      "file": "app/views/messages/show.html.erb",
      "line": 1,
      "link": "https://brakemanscanner.org/docs/warning_types/dynamic_render_path/",
      "code": "render(action => @room.messages.find(params[:id]), { :locals => ({ :brakemanunresolvedmodel => @room.messages.find(params[:id]) }) })",
      "render_path": [
        {
          "type": "controller",
          "class": "MessagesController",
          "method": "show",
          "line": 31,
          "file": "app/controllers/messages_controller.rb",
          "rendered": {
            "name": "messages/show",
            "file": "app/views/messages/show.html.erb"
          }
        }
      ],
      "location": {
        "type": "template",
        "template": "messages/show"
      },
      "user_input": "params[:id]",
      "confidence": "Weak",
      "cwe_id": [
        22
      ],
      "note": ""
    }
  ],
  "brakeman_version": "7.1.0"
}



================================================
FILE: config/bundler-audit.yml
================================================
# Audit all gems listed in the Gemfile for known security problems by running bin/bundler-audit.
# CVEs that are not relevant to the application can be enumerated on the ignore list below.

ignore:
  - CVE-THAT-DOES-NOT-APPLY



================================================
FILE: config/cable.yml
================================================
default: &default
  adapter: redis
  url: redis://localhost:6379

development:
  <<: *default
  channel_prefix: campfire_development

test:
  adapter: test

performance:
  <<: *default
  channel_prefix: campfire_performance

production:
  <<: *default
  channel_prefix: campfire_production



================================================
FILE: config/ci.rb
================================================
# Run using bin/ci

CI.run do
  step "Setup", "bin/setup --skip-server"

  step "Style: Ruby", "bin/rubocop"

  step "Security: Gem audit", "bin/bundler-audit"
  step "Security: Importmap vulnerability audit", "bin/importmap audit"
  step "Security: Brakeman code analysis", "bin/brakeman --quiet --no-pager --exit-on-warn --exit-on-error"

  step "Tests: Rails", "bin/rails test"
  step "Tests: System", "bin/rails test:system"
  step "Tests: Seeds", "env RAILS_ENV=test bin/rails db:seed:replant"

  if success?
    step "Signoff: All systems go. Ready for merge and deploy.", "gh signoff"
  else
    failure "Signoff: CI failed. Do not merge or deploy.", "Fix the issues and try again."
  end
end



================================================
FILE: config/database.yml
================================================
# SQLite. Versions 3.8.0 and up are supported.
#   gem install sqlite3
#
#   Ensure the SQLite 3 gem is defined in your Gemfile
#   gem "sqlite3"
#
default: &default
  adapter: sqlite3
  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 10 } %>
  timeout: 5000
  default_transaction_mode: immediate

development:
  primary:
    <<: *default
    database: storage/db/development.sqlite3

# Warning: The database defined as "test" will be erased and
# re-generated from your development database when you run "rake".
# Do not set this db to the same as development or production.
test:
  primary:
    <<: *default
    database: storage/db/test.sqlite3

performance:
  primary:
    <<: *default
    database: storage/db/performance.sqlite3

production:
  primary:
    <<: *default
    database: storage/db/production.sqlite3



================================================
FILE: config/environment.rb
================================================
# Load the Rails application.
require_relative "application"

# Initialize the Rails application.
Rails.application.initialize!



================================================
FILE: config/importmap.rb
================================================
pin "application"

pin "@hotwired/stimulus", to: "stimulus.min.js"
pin "@hotwired/stimulus-loading", to: "stimulus-loading.js"
pin "@hotwired/turbo-rails", to: "turbo.js"
pin "@rails/actioncable", to: "actioncable.esm.js"
pin "@rails/request.js", to: "@rails--request.js" # @0.0.8
pin "trix", to: "trix.esm.min.js" # @2.0.10
pin "@rails/actiontext", to: "actiontext.js"
pin "highlight.js", to: "highlight.js/core.js"

pin_all_from "app/javascript/initializers", under: "initializers"
pin_all_from "app/javascript/lib", under: "lib"
pin_all_from "app/javascript/channels", under: "channels"
pin_all_from "app/javascript/controllers", under: "controllers"
pin_all_from "app/javascript/helpers", under: "helpers"
pin_all_from "app/javascript/models", under: "models"
pin_all_from "vendor/javascript/languages", under: "languages"



================================================
FILE: config/puma.rb
================================================
require File.expand_path("../config/environment", File.dirname(__FILE__))

# Puma can serve each request in a thread from an internal thread pool.
# The `threads` method setting takes two numbers: a minimum and maximum.
# Any libraries that use thread pools should be configured to match
# the maximum value specified for Puma. Default is set to 5 threads for minimum
# and maximum; this matches the default thread size of Active Record.
#
max_threads_count = ENV.fetch("RAILS_MAX_THREADS") { 5 }
min_threads_count = ENV.fetch("RAILS_MIN_THREADS") { max_threads_count }
threads min_threads_count, max_threads_count

# Specifies the `worker_timeout` threshold that Puma will use to wait before
# terminating a worker in development environments.
#
worker_timeout 3600 if ENV.fetch("RAILS_ENV", "development") == "development"

# Bind http listener.
PORT=ENV.fetch("PORT", 3000)
bind "tcp://0.0.0.0:#{PORT}"

# Specifies the `environment` that Puma will run in.
#
environment ENV.fetch("RAILS_ENV") { "development" }

# Specifies the `pidfile` that Puma will use.
pidfile ENV.fetch("PIDFILE") { "tmp/pids/server.pid" }

# Specifies the number of `workers` to boot in clustered mode.
# Workers are forked web server processes. If using threads and workers together
# the concurrency of the application would be max `threads` * `workers`.
# Workers do not work on JRuby or Windows (both of which do not support
# processes).
#
worker_count = (Concurrent.processor_count * 0.666).ceil
workers ENV.fetch("WEB_CONCURRENCY") { worker_count }

ENV["JOB_CONCURRENCY"] ||= worker_count.to_s

# Use the `preload_app!` method when specifying a `workers` number.
# This directive tells Puma to first boot the application and load code
# before forking the application. This takes advantage of Copy On Write
# process behavior so workers use less memory.
#
# preload_app!

# Allow puma to be restarted by `bin/rails restart` command.
plugin :tmp_restart

# Reset all membership connections
Membership.disconnect_all

Signal.trap :SIGPROF do
  Thread.list.each do |t|
    puts t
    puts t.backtrace
    puts
  end
end



================================================
FILE: config/puma_dev.rb
================================================
require File.expand_path("../config/environment", File.dirname(__FILE__))

Signal.trap :SIGPROF do
  Thread.list.each do |t|
    puts t
    puts t.backtrace
    puts
  end
end



================================================
FILE: config/redis.conf
================================================
port 6379
daemonize no
appendonly no
save ""



================================================
FILE: config/resque-pool.yml
================================================
default: <%= (Concurrent.processor_count * 0.5).ceil %>



================================================
FILE: config/routes.rb
================================================
Rails.application.routes.draw do
  root "welcome#show"

  resource :first_run

  resource :session do
    scope module: "sessions" do
      resources :transfers, only: %i[ show update ]
    end
  end

  resource :account do
    scope module: "accounts" do
      resources :users

      resources :bots do
        scope module: "bots" do
          resource :key, only: :update
        end
      end

      resource :join_code, only: :create
      resource :logo, only: %i[ show destroy ]
      resource :custom_styles, only: %i[ edit update ]
    end
  end

  direct :fresh_account_logo do |options|
    route_for :account_logo, v: Current.account&.updated_at&.to_fs(:number), size: options[:size]
  end

  get "join/:join_code", to: "users#new", as: :join
  post "join/:join_code", to: "users#create"

  resources :qr_code, only: :show

  resources :users, only: :show do
    scope module: "users" do
      resource :avatar, only: %i[ show destroy ]

      scope defaults: { user_id: "me" } do
        resource :sidebar, only: :show
        resource :profile
        resources :push_subscriptions do
          scope module: "push_subscriptions" do
            resources :test_notifications, only: :create
          end
        end
      end
    end
  end

  namespace :autocompletable do
    resources :users, only: :index
  end

  direct :fresh_user_avatar do |user, options|
    route_for :user_avatar, user.avatar_token, v: user.updated_at.to_fs(:number)
  end

  resources :rooms do
    resources :messages

    post ":bot_key/messages", to: "messages/by_bots#create", as: :bot_messages

    scope module: "rooms" do
      resource :refresh, only: :show
      resource :settings, only: :show
      resource :involvement, only: %i[ show update ]
    end

    get "@:message_id", to: "rooms#show", as: :at_message
  end

  namespace :rooms do
    resources :opens
    resources :closeds
    resources :directs
  end

  resources :messages do
    scope module: "messages" do
      resources :boosts
    end
  end

  resources :searches, only: %i[ index create ] do
    delete :clear, on: :collection
  end

  resource :unfurl_link, only: :create

  get "webmanifest"    => "pwa#manifest"
  get "service-worker" => "pwa#service_worker"

  get "up" => "rails/health#show", as: :rails_health_check
end



================================================
FILE: config/storage.yml
================================================
test:
  service: Disk
  root: <%= Rails.root.join("tmp/storage") %>

local:
  service: Disk
  root: <%= Rails.root.join("storage", "files") %>

# Use bin/rails credentials:edit to set the AWS secrets (as aws:access_key_id|secret_access_key)
# amazon:
#   service: S3
#   access_key_id: <%= Rails.application.credentials.dig(:aws, :access_key_id) %>
#   secret_access_key: <%= Rails.application.credentials.dig(:aws, :secret_access_key) %>
#   region: us-east-1
#   bucket: your_own_bucket-<%= Rails.env %>

# Remember not to checkin your GCS keyfile to a repository
# google:
#   service: GCS
#   project: your_project
#   credentials: <%= Rails.root.join("path/to/gcs.keyfile") %>
#   bucket: your_own_bucket-<%= Rails.env %>

# Use bin/rails credentials:edit to set the Azure Storage secret (as azure_storage:storage_access_key)
# microsoft:
#   service: AzureStorage
#   storage_account_name: your_account_name
#   storage_access_key: <%= Rails.application.credentials.dig(:azure_storage, :storage_access_key) %>
#   container: your_container_name-<%= Rails.env %>

# mirror:
#   service: Mirror
#   primary: local
#   mirrors: [ amazon, google, microsoft ]



================================================
FILE: config/environments/development.rb
================================================
require "active_support/core_ext/integer/time"

Rails.application.configure do
  # Settings specified here will take precedence over those in config/application.rb.

  # Make code changes take effect immediately without server restart.
  config.enable_reloading = true

  # Do not eager load code on boot.
  config.eager_load = false

  # Show full error reports.
  config.consider_all_requests_local = true

  # Enable server timing.
  config.server_timing = true

  # Enable/disable Action Controller caching. By default Action Controller caching is disabled.
  # Run rails dev:cache to toggle Action Controller caching.
  if Rails.root.join("tmp/caching-dev.txt").exist?
    config.action_controller.perform_caching = true
    config.action_controller.enable_fragment_cache_logging = true

    config.cache_store = :redis_cache_store
    config.public_file_server.headers = {
      "cache-control" => "public, max-age=#{2.days.to_i}"
    }
  else
    config.action_controller.perform_caching = false

    config.cache_store = :null_store
  end

  # Store uploaded files on the local file system (see config/storage.yml for options).
  config.active_storage.service = :local

  # Print deprecation notices to the Rails logger.
  config.active_support.deprecation = :log

  # Raise exceptions for disallowed deprecations.
  config.active_support.disallowed_deprecation = :raise

  # Tell Active Support which deprecation messages to disallow.
  config.active_support.disallowed_deprecation_warnings = []

  # Raise an error on page load if there are pending migrations.
  config.active_record.migration_error = :page_load

  # Highlight code that triggered database queries in logs.
  config.active_record.verbose_query_logs = true

  # Append comments with runtime information tags to SQL queries in logs.
  config.active_record.query_log_tags_enabled = true

  # Allow the app to be served from any host.
  config.hosts = []

  # Raises error for missing translations.
  # config.i18n.raise_on_missing_translations = true

  # Annotate rendered view with file names.
  # config.action_view.annotate_rendered_view_with_filenames = true

  # Uncomment if you wish to allow Action Cable access from any origin.
  # config.action_cable.disable_request_forgery_protection = true

  # Uncomment to test with production class job queue
  # config.active_job.queue_adapter = :resque

  # Highlight code that enqueued background job in logs.
  config.active_job.verbose_enqueue_logs = true

  # Suppress logger output for asset requests.
  config.assets.quiet = true

  # Annotate rendered view with file names.
  config.action_view.annotate_rendered_view_with_filenames = true

  # Raise error when a before_action's only/except options reference missing actions.
  config.action_controller.raise_on_missing_callback_actions = true

  # Visit /rails/locks to see the locks
  config.middleware.insert_before Rack::Sendfile, ActionDispatch::DebugLocks
end



================================================
FILE: config/environments/performance.rb
================================================
require_relative "production"

Rails.application.configure do
  config.assume_ssl = false
  config.force_ssl  = false
  config.action_cable.disable_request_forgery_protection = true

  config.after_initialize do
    if defined?(Rails::Server) && User.none?
      Account.create!(name: "Campfire")

      password_digest = User.new(password: "password").password_digest
      users = (1..10000).map do |i|
        {
          name: "User #{i}",
          role: i == 1 ? :administrator : :member,
          email_address: "user#{i}@example.com",
          password_digest: password_digest
        }
      end
      User.insert_all(users)

      sessions = User.all.map do |user|
        {
          user_id: user.id,
          user_agent: "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 " \
                      "(KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36",
          ip_address: "127.0.0.1",
          last_active_at: Time.now,
          token: "a" * 19 + user.id.to_s.rjust(5, "0")
        }
      end
      Session.insert_all(sessions)

      creator_id = User.first.id

      rooms = (0..200).map { |i| { name: "Room #{i}", creator_id: creator_id, type: "Rooms::Closed" } }
      Room.insert_all(rooms)

      Room.all.each_with_index do |room, index|
        user_ids = User.where("MOD(#{index}, id) = 0").ids
        memberships = user_ids.map { |user_id| { room_id: room.id, user_id: user_id } }
        Membership.insert_all(memberships)
      end
    end
  end
end



================================================
FILE: config/environments/production.rb
================================================
require "active_support/core_ext/integer/time"
require "active_support/core_ext/numeric/bytes"

Rails.application.configure do
  # Settings specified here will take precedence over those in config/application.rb.

  # Code is not reloaded between requests.
  config.enable_reloading = false

  # Eager load code on boot for better performance and memory savings (ignored by Rake tasks).
  config.eager_load = true

  # Full error reports are disabled and caching is turned on.
  config.consider_all_requests_local       = false
  config.action_controller.perform_caching = true

  # Cache digest stamped assets for far-future expiry.
  # Short cache for others: robots.txt, sitemap.xml, 404.html, etc.
  config.public_file_server.headers = {
    "cache-control" => lambda do |path, _|
      if path.start_with?("/assets/")
        # Files in /assets/ are expected to be fully immutable.
        # If the content change the URL too.
        "public, immutable, max-age=#{1.year.to_i}"
      else
        # For anything else we cache for 1 minute.
        "public, max-age=#{1.minute.to_i}, stale-while-revalidate=#{5.minutes.to_i}"
      end
    end
  }

  # Ensures that a master key has been made available in either ENV["RAILS_MASTER_KEY"]
  # or in config/master.key. This key is used to decrypt credentials (and other encrypted files).
  # config.require_master_key = true

  # Enable serving of images, stylesheets, and JavaScripts from an asset server.
  # config.asset_host = "http://assets.example.com"

  # Store uploaded files on the local file system (see config/storage.yml for options).
  config.active_storage.service = :local

  # Assume all access to the app is happening through a SSL-terminating reverse proxy.
  # config.assume_ssl = true

  # Force all access to the app over SSL, use Strict-Transport-Security, and use secure cookies.
  # config.force_ssl = true

  # Skip http-to-https redirect for the default health check endpoint.
  # config.ssl_options = { redirect: { exclude: ->(request) { request.path == "/up" } } }

  # Log to STDOUT by default
  config.logger = ActiveSupport::Logger.new(STDOUT)
    .tap  { |logger| logger.formatter = ::Logger::Formatter.new }
    .then { |logger| ActiveSupport::TaggedLogging.new(logger) }

  # Prepend all log lines with the following tags.
  config.log_tags = [ :request_id ]

  # Info include generic and useful information about system operation, but avoids logging too much
  # information to avoid inadvertent exposure of personally identifiable information (PII). Use "debug"
  # for everything.
  config.log_level = ENV.fetch("RAILS_LOG_LEVEL", "info")

  # Prevent health checks from clogging up the logs.
  config.silence_healthcheck_path = "/up"

  # Don't log any deprecations.
  config.active_support.report_deprecations = false

  # Cache in memory for now
  config.cache_store = :redis_cache_store

  # Assets are cacheable
  config.public_file_server.headers = {
    "Cache-Control" => "public, max-age=#{30.days.to_i}"
  }

  # Enable locale fallbacks for I18n (makes lookups for any locale fall back to
  # the I18n.default_locale when a translation cannot be found).
  config.i18n.fallbacks = true

  # Always be SSL'ing (unless told not to)
  config.assume_ssl = ENV["DISABLE_SSL"].blank?
  config.force_ssl  = ENV["DISABLE_SSL"].blank?

  # Don't log any deprecations.
  config.active_support.report_deprecations = false

  # Do not dump schema after migrations.
  config.active_record.dump_schema_after_migration = false

  # Only use :id for inspections in production.
  config.active_record.attributes_for_inspect = [ :id ]

  config.active_job.queue_adapter = :resque
end



================================================
FILE: config/environments/test.rb
================================================
require "active_support/core_ext/integer/time"

# The test environment is used exclusively to run your application's
# test suite. You never need to work with it otherwise. Remember that
# your test database is "scratch space" for the test suite and is wiped
# and recreated between test runs. Don't rely on the data there!

Rails.application.configure do
  # Settings specified here will take precedence over those in config/application.rb.

  # While tests run files are not watched, reloading is not necessary.
  config.enable_reloading = false

  # Eager loading loads your entire application. When running a single test locally,
  # this is usually not necessary, and can slow down your test suite. However, it's
  # recommended that you enable it in continuous integration systems to ensure eager
  # loading is working properly before deploying your code.
  config.eager_load = ENV["CI"].present?

  # Configure public file server for tests with Cache-Control for performance.
  config.public_file_server.enabled = true
  config.public_file_server.headers = {
    "cache-control" => "public, max-age=#{1.hour.to_i}"
  }

  # Show full error reports and disable caching.
  config.consider_all_requests_local       = true
  config.action_controller.perform_caching = false
  config.cache_store = :null_store

  # Raise exceptions instead of rendering exception templates.
  config.action_dispatch.show_exceptions = :none

  # Disable request forgery protection in test environment.
  config.action_controller.allow_forgery_protection = false

  # Store uploaded files on the local file system in a temporary directory.
  config.active_storage.service = :test

  # Print deprecation notices to the stderr.
  config.active_support.deprecation = :stderr

  # Raise exceptions for disallowed deprecations.
  config.active_support.disallowed_deprecation = :raise

  # Tell Active Support which deprecation messages to disallow.
  config.active_support.disallowed_deprecation_warnings = []

  # Raise error when a before_action's only/except options reference missing actions.
  config.action_controller.raise_on_missing_callback_actions = true

  # Raises error for missing translations.
  # config.i18n.raise_on_missing_translations = true

  # Annotate rendered view with file names.
  # config.action_view.annotate_rendered_view_with_filenames = true

  # Load test helpers
  config.autoload_paths += %w[ test/test_helpers ]
end



================================================
FILE: config/initializers/active_storage.rb
================================================
ActiveSupport.on_load(:active_storage_blob) do
  ActiveStorage::DiskController.after_action only: :show do
    response.set_header("Cache-Control", "max-age=3600, public")
  end
end



================================================
FILE: config/initializers/assets.rb
================================================
# Be sure to restart your server when you modify this file.

# Version of your assets, change this if you want to expire all your assets.
Rails.application.config.assets.version = "1.0"



================================================
FILE: config/initializers/content_security_policy.rb
================================================
# Be sure to restart your server when you modify this file.

# Define an application-wide content security policy.
# See the Securing Rails Applications Guide for more information:
# https://guides.rubyonrails.org/security.html#content-security-policy-header

# Rails.application.configure do
#   config.content_security_policy do |policy|
#     policy.default_src :self, :https
#     policy.font_src    :self, :https, :data
#     policy.img_src     :self, :https, :data
#     policy.object_src  :none
#     policy.script_src  :self, :https
#     policy.style_src   :self, :https
#     # Specify URI for violation reports
#     # policy.report_uri "/csp-violation-report-endpoint"
#   end
#
#   # Generate session nonces for permitted importmap and inline scripts
#   config.content_security_policy_nonce_generator = ->(request) { request.session.id.to_s }
#   config.content_security_policy_nonce_directives = %w(script-src)
#
#   # Report violations without enforcing the policy.
#   # config.content_security_policy_report_only = true
# end



================================================
FILE: config/initializers/extensions.rb
================================================
%w[ rails_ext ].each do |extensions_dir|
  Dir["#{Rails.root}/lib/#{extensions_dir}/*"].each { |path| require "#{extensions_dir}/#{File.basename(path)}" }
end



================================================
FILE: config/initializers/filter_parameter_logging.rb
================================================
# Be sure to restart your server when you modify this file.

# Configure parameters to be filtered from the log file. Use this to limit dissemination of
# sensitive information. See the ActiveSupport::ParameterFilter documentation for supported
# notations and behaviors.
Rails.application.config.filter_parameters += [
  :passw, :email, :secret, :token, :_key, :crypt, :salt, :certificate, :otp, :ssn, :cvv, :cvc, :endpoint, "message.body"
]



================================================
FILE: config/initializers/inflections.rb
================================================
# Be sure to restart your server when you modify this file.

# Add new inflection rules using the following format. Inflections
# are locale specific, and you may define rules for as many different
# locales as you wish. All of these examples are active by default:
# ActiveSupport::Inflector.inflections(:en) do |inflect|
#   inflect.plural /^(ox)$/i, "\\1en"
#   inflect.singular /^(ox)en/i, "\\1"
#   inflect.irregular "person", "people"
#   inflect.uncountable %w( fish sheep )
# end

# These inflection rules are supported but not enabled by default:
ActiveSupport::Inflector.inflections(:en) do |inflect|
  inflect.acronym "HTTP"
end



================================================
FILE: config/initializers/permissions_policy.rb
================================================
# Define an application-wide HTTP permissions policy. For further
# information see https://developers.google.com/web/updates/2018/06/feature-policy
#
# Rails.application.config.permissions_policy do |f|
#   f.camera      :none
#   f.gyroscope   :none
#   f.microphone  :none
#   f.usb         :none
#   f.fullscreen  :self
#   f.payment     :self, "https://secure.example.com"
# end



================================================
FILE: config/initializers/sentry.rb
================================================
if Rails.env.production? && ENV["SKIP_TELEMETRY"].blank?
  Sentry.init do |config|
    config.dsn = ENV["SENTRY_DSN"]
    config.breadcrumbs_logger = [ :active_support_logger, :http_logger ]
    config.send_default_pii = false
    config.release = ENV["GIT_REVISION"]
  end
end



================================================
FILE: config/initializers/session_store.rb
================================================
Rails.application.config.session_store :cookie_store,
  key: "_campfire_session",
  # Persist session cookie as permament so re-opened browser windows maintain a CSRF token
  expire_after: 20.years



================================================
FILE: config/initializers/storage_paths.rb
================================================
Rails.application.config.after_initialize do
  %w[ db files ].each do |dir|
    Rails.root.join("storage", dir).mkpath
  end
end



================================================
FILE: config/initializers/time_formats.rb
================================================
# Used to match JavaScripts (new Date).getTime() for sorting
Time::DATE_FORMATS[:epoch] = ->(time) { (time.to_f * 1000).to_i }



================================================
FILE: config/initializers/vapid.rb
================================================
Rails.application.configure do
  config.x.vapid.private_key = ENV.fetch("VAPID_PRIVATE_KEY", Rails.application.credentials.dig(:vapid, :private_key))
  config.x.vapid.public_key = ENV.fetch("VAPID_PUBLIC_KEY", Rails.application.credentials.dig(:vapid, :public_key))
end



================================================
FILE: config/initializers/version.rb
================================================
Rails.application.config.app_version = ENV.fetch("APP_VERSION", "0")
Rails.application.config.git_revision = ENV["GIT_REVISION"]



================================================
FILE: config/initializers/web_push.rb
================================================
require "web-push"
require "web_push/pool"
require "web_push/notification"

Rails.application.configure do
  config.x.web_push_pool = WebPush::Pool.new(
    invalid_subscription_handler: ->(subscription_id) do
      Rails.application.executor.wrap do
        Rails.logger.info "Destroying push subscription: #{subscription_id}"
        Push::Subscription.find_by(id: subscription_id)&.destroy
      end
    end
  )

  at_exit { config.x.web_push_pool.shutdown }
end

module WebPush::PersistentRequest
  def perform
    if @options[:connection]
      http = @options[:connection]
    else
      http = Net::HTTP.new(uri.host, uri.port, *proxy_options)
      http.use_ssl = true
      http.ssl_timeout = @options[:ssl_timeout] unless @options[:ssl_timeout].nil?
      http.open_timeout = @options[:open_timeout] unless @options[:open_timeout].nil?
      http.read_timeout = @options[:read_timeout] unless @options[:read_timeout].nil?
    end

    req = Net::HTTP::Post.new(uri.request_uri, headers)
    req.body = body

    if http.is_a?(Net::HTTP::Persistent)
      response = http.request uri, req
    else
      resp = http.request(req)
      verify_response(resp)
    end

    resp
  end
end

WebPush::Request.prepend WebPush::PersistentRequest



================================================
FILE: config/locales/en.yml
================================================
# Files in the config/locales directory are used for internationalization
# and are automatically loaded by Rails. If you want to use locales other
# than English, add the necessary files in this directory.
#
# To use the locales, use `I18n.t`:
#
#     I18n.t "hello"
#
# In views, this is aliased to just `t`:
#
#     <%= t("hello") %>
#
# To use a different locale, set it with `I18n.locale`:
#
#     I18n.locale = :es
#
# This would use the information in config/locales/es.yml.
#
# The following keys must be escaped otherwise they will not be retrieved by
# the default I18n backend:
#
# true, false, on, off, yes, no
#
# Instead, surround them with single quotes.
#
# en:
#   "true": "foo"
#
# To learn more, please read the Rails Internationalization guide
# available at https://guides.rubyonrails.org/i18n.html.

en:



================================================
FILE: db/structure.sql
================================================
CREATE TABLE IF NOT EXISTS "schema_migrations" ("version" varchar NOT NULL PRIMARY KEY);
CREATE TABLE IF NOT EXISTS "ar_internal_metadata" ("key" varchar NOT NULL PRIMARY KEY, "value" varchar, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL);
CREATE TABLE IF NOT EXISTS "push_subscriptions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "user_id" integer NOT NULL, "endpoint" varchar, "p256dh_key" varchar, "auth_key" varchar, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "user_agent" varchar, CONSTRAINT "fk_rails_43d43720fc"
FOREIGN KEY ("user_id")
  REFERENCES "users" ("id")
);
CREATE INDEX "index_push_subscriptions_on_user_id" ON "push_subscriptions" ("user_id");
CREATE INDEX "idx_on_endpoint_p256dh_key_auth_key_7553014576" ON "push_subscriptions" ("endpoint", "p256dh_key", "auth_key");
CREATE TABLE IF NOT EXISTS "active_storage_attachments" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "name" varchar NOT NULL, "record_type" varchar NOT NULL, "record_id" bigint NOT NULL, "blob_id" bigint NOT NULL, "created_at" datetime(6) NOT NULL, CONSTRAINT "fk_rails_c3b3935057"
FOREIGN KEY ("blob_id")
  REFERENCES "active_storage_blobs" ("id")
);
CREATE INDEX "index_active_storage_attachments_on_blob_id" ON "active_storage_attachments" ("blob_id");
CREATE UNIQUE INDEX "index_active_storage_attachments_uniqueness" ON "active_storage_attachments" ("record_type", "record_id", "name", "blob_id");
CREATE TABLE IF NOT EXISTS "active_storage_variant_records" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "blob_id" bigint NOT NULL, "variation_digest" varchar NOT NULL, CONSTRAINT "fk_rails_993965df05"
FOREIGN KEY ("blob_id")
  REFERENCES "active_storage_blobs" ("id")
);
CREATE UNIQUE INDEX "index_active_storage_variant_records_uniqueness" ON "active_storage_variant_records" ("blob_id", "variation_digest");
CREATE VIRTUAL TABLE message_search_index using fts5(body, tokenize=porter)
/* message_search_index(body) */;
CREATE TABLE IF NOT EXISTS 'message_search_index_data'(id INTEGER PRIMARY KEY, block BLOB);
CREATE TABLE IF NOT EXISTS 'message_search_index_idx'(segid, term, pgno, PRIMARY KEY(segid, term)) WITHOUT ROWID;
CREATE TABLE IF NOT EXISTS 'message_search_index_content'(id INTEGER PRIMARY KEY, c0);
CREATE TABLE IF NOT EXISTS 'message_search_index_docsize'(id INTEGER PRIMARY KEY, sz BLOB);
CREATE TABLE IF NOT EXISTS 'message_search_index_config'(k PRIMARY KEY, v) WITHOUT ROWID;
CREATE TABLE IF NOT EXISTS "accounts" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "name" varchar NOT NULL, "join_code" varchar NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "custom_styles" text);
CREATE TABLE IF NOT EXISTS "action_text_rich_texts" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "name" varchar NOT NULL, "body" text, "record_type" varchar NOT NULL, "record_id" bigint NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL);
CREATE UNIQUE INDEX "index_action_text_rich_texts_uniqueness" ON "action_text_rich_texts" ("record_type", "record_id", "name");
CREATE TABLE IF NOT EXISTS "messages" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "room_id" integer NOT NULL, "creator_id" integer NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "client_message_id" varchar NOT NULL, CONSTRAINT "fk_rails_761a2f12b3"
FOREIGN KEY ("creator_id")
  REFERENCES "users" ("id")
, CONSTRAINT "fk_rails_a8db0fb63a"
FOREIGN KEY ("room_id")
  REFERENCES "rooms" ("id")
);
CREATE INDEX "index_messages_on_room_id" ON "messages" ("room_id");
CREATE INDEX "index_messages_on_creator_id" ON "messages" ("creator_id");
CREATE TABLE IF NOT EXISTS "boosts" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "message_id" integer NOT NULL, "booster_id" integer NOT NULL, "content" varchar(16) NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, CONSTRAINT "fk_rails_3539c52d73"
FOREIGN KEY ("message_id")
  REFERENCES "messages" ("id")
);
CREATE INDEX "index_boosts_on_message_id" ON "boosts" ("message_id");
CREATE INDEX "index_boosts_on_booster_id" ON "boosts" ("booster_id");
CREATE TABLE IF NOT EXISTS "searches" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "user_id" integer NOT NULL, "query" varchar NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, CONSTRAINT "fk_rails_e192b86393"
FOREIGN KEY ("user_id")
  REFERENCES "users" ("id")
);
CREATE INDEX "index_searches_on_user_id" ON "searches" ("user_id");
CREATE TABLE IF NOT EXISTS "rooms" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "name" varchar DEFAULT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "type" varchar NOT NULL, "creator_id" bigint NOT NULL);
CREATE TABLE IF NOT EXISTS "memberships" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "room_id" integer NOT NULL, "user_id" integer NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "unread_at" datetime(6) DEFAULT NULL, "involvement" varchar DEFAULT 'mentions', "connections" integer DEFAULT 0 NOT NULL, "connected_at" datetime(6) DEFAULT NULL);
CREATE INDEX "index_memberships_on_room_id" ON "memberships" ("room_id");
CREATE INDEX "index_memberships_on_user_id" ON "memberships" ("user_id");
CREATE INDEX "index_memberships_on_room_id_and_created_at" ON "memberships" ("room_id", "created_at");
CREATE UNIQUE INDEX "index_memberships_on_room_id_and_user_id" ON "memberships" ("room_id", "user_id");
CREATE TABLE IF NOT EXISTS "sessions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "user_id" integer NOT NULL, "token" varchar NOT NULL, "ip_address" varchar, "user_agent" varchar, "last_active_at" datetime(6) NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, CONSTRAINT "fk_rails_758836b4f0"
FOREIGN KEY ("user_id")
  REFERENCES "users" ("id")
);
CREATE INDEX "index_sessions_on_user_id" ON "sessions" ("user_id");
CREATE UNIQUE INDEX "index_sessions_on_token" ON "sessions" ("token");
CREATE TABLE IF NOT EXISTS "webhooks" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "user_id" integer NOT NULL, "url" varchar, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, CONSTRAINT "fk_rails_51bf96d3bc"
FOREIGN KEY ("user_id")
  REFERENCES "users" ("id")
);
CREATE INDEX "index_webhooks_on_user_id" ON "webhooks" ("user_id");
CREATE TABLE IF NOT EXISTS "users" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "name" varchar NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "role" integer DEFAULT 0 NOT NULL, "email_address" varchar DEFAULT NULL, "password_digest" varchar DEFAULT NULL, "active" boolean DEFAULT 1, "bio" text DEFAULT NULL, "bot_token" varchar DEFAULT NULL);
CREATE UNIQUE INDEX "index_users_on_email_address" ON "users" ("email_address");
CREATE UNIQUE INDEX "index_users_on_bot_token" ON "users" ("bot_token");
CREATE TABLE IF NOT EXISTS "active_storage_blobs" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "key" varchar NOT NULL, "filename" varchar NOT NULL, "content_type" varchar, "metadata" text, "service_name" varchar NOT NULL, "byte_size" bigint NOT NULL, "checksum" varchar, "created_at" datetime(6) NOT NULL);
CREATE UNIQUE INDEX "index_active_storage_blobs_on_key" ON "active_storage_blobs" ("key") /*application='Campfire'*/;
INSERT INTO "schema_migrations" (version) VALUES
('20250825100959'),
('20250825100958'),
('20250825100957'),
('20240209110503'),
('20240131105830'),
('20240130213001'),
('20240130003150'),
('20240115124901'),
('20240110071740'),
('20231220143106'),
('20231215043540'),
('20231214195401'),
('20231213193944'),
('20231211162954'),
('20231205194643'),
('20231204234657'),
('20231204195302'),
('20231203230519'),
('20231203230140'),
('20231203181128'),
('20231203020307'),
('20231129205116'),
('20231128225451'),
('20231127103708'),
('20231116114233'),
('20231115175300'),
('20231113103004'),
('20231031091442'),
('20231020093252'),
('20231011155822'),
('20231011155708'),
('20231002121723'),
('20230930070541'),
('20230929190610'),
('20230928012127'),
('20230928004135'),
('20230928002516'),
('20230927202350'),
('20230901135127'),
('20230817084502'),
('20230816150813'),
('20230815121033'),
('20230802130519'),
('20230726135144'),
('20230711120929'),
('20230704101753'),
('20230629205414'),
('20230622090619'),
('20230620092849'),
('20230613125232'),
('20230608122228'),
('20230607131322'),
('20230530141826'),
('20230530133902'),
('20230526132438'),
('20230525142056'),
('20230516102736'),
('20230509112001'),
('20230509111756'),
('20230509110753'),
('20230509110019'),
('20230504103837'),
('20230425145239'),
('20230425130330'),
('20230425104254'),
('20230425104237'),
('20230425104133');




================================================
FILE: db/migrate/20231215043540_create_initial_schema.rb
================================================
class CreateInitialSchema < ActiveRecord::Migration[7.2]
  def change
    create_table "accounts", force: :cascade do |t|
      t.string "name", null: false
      t.string "join_code", null: false
      t.datetime "created_at", null: false
      t.datetime "updated_at", null: false
    end

    create_table "action_text_rich_texts", force: :cascade do |t|
      t.string "name", null: false
      t.text "body"
      t.string "record_type", null: false
      t.bigint "record_id", null: false
      t.datetime "created_at", null: false
      t.datetime "updated_at", null: false
      t.index [ "record_type", "record_id", "name" ], name: "index_action_text_rich_texts_uniqueness", unique: true
    end

    create_table "active_storage_attachments", force: :cascade do |t|
      t.string "name", null: false
      t.string "record_type", null: false
      t.bigint "record_id", null: false
      t.bigint "blob_id", null: false
      t.datetime "created_at", null: false
      t.index [ "blob_id" ], name: "index_active_storage_attachments_on_blob_id"
      t.index [ "record_type", "record_id", "name", "blob_id" ], name: "index_active_storage_attachments_uniqueness", unique: true
    end

    create_table "active_storage_blobs", force: :cascade do |t|
      t.string "key", null: false
      t.string "filename", null: false
      t.string "content_type"
      t.text "metadata"
      t.string "service_name", null: false
      t.bigint "byte_size", null: false
      t.string "checksum"
      t.datetime "created_at", null: false
      t.index [ "key" ], name: "index_active_storage_blobs_on_key", unique: true
    end

    create_table "active_storage_variant_records", force: :cascade do |t|
      t.bigint "blob_id", null: false
      t.string "variation_digest", null: false
      t.index [ "blob_id", "variation_digest" ], name: "index_active_storage_variant_records_uniqueness", unique: true
    end

    create_table "boosts", force: :cascade do |t|
      t.integer "message_id", null: false
      t.integer "booster_id", null: false
      t.string "content", limit: 16, null: false
      t.datetime "created_at", null: false
      t.datetime "updated_at", null: false
      t.index [ "booster_id" ], name: "index_boosts_on_booster_id"
      t.index [ "message_id" ], name: "index_boosts_on_message_id"
    end

    create_table "memberships", force: :cascade do |t|
      t.integer "room_id", null: false
      t.integer "user_id", null: false
      t.datetime "created_at", null: false
      t.datetime "updated_at", null: false
      t.datetime "unread_at"
      t.string "involvement", default: "mentions"
      t.integer "connections", default: 0, null: false
      t.datetime "connected_at"
      t.index [ "room_id", "created_at" ], name: "index_memberships_on_room_id_and_created_at"
      t.index [ "room_id", "user_id" ], name: "index_memberships_on_room_id_and_user_id", unique: true
      t.index [ "room_id" ], name: "index_memberships_on_room_id"
      t.index [ "user_id" ], name: "index_memberships_on_user_id"
    end

    create_table "messages", force: :cascade do |t|
      t.integer "room_id", null: false
      t.integer "creator_id", null: false
      t.datetime "created_at", null: false
      t.datetime "updated_at", null: false
      t.string "client_message_id", null: false
      t.index [ "creator_id" ], name: "index_messages_on_creator_id"
      t.index [ "room_id" ], name: "index_messages_on_room_id"
    end

    create_table "push_subscriptions", force: :cascade do |t|
      t.integer "user_id", null: false
      t.string "endpoint"
      t.string "p256dh_key"
      t.string "auth_key"
      t.datetime "created_at", null: false
      t.datetime "updated_at", null: false
      t.string "user_agent"
      t.index [ "endpoint", "p256dh_key", "auth_key" ], name: "idx_on_endpoint_p256dh_key_auth_key_7553014576"
      t.index [ "user_id" ], name: "index_push_subscriptions_on_user_id"
    end

    create_table "rooms", force: :cascade do |t|
      t.string "name"
      t.datetime "created_at", null: false
      t.datetime "updated_at", null: false
      t.string "type", null: false
      t.bigint "creator_id", null: false
    end

    create_table "searches", force: :cascade do |t|
      t.integer "user_id", null: false
      t.string "query", null: false
      t.datetime "created_at", null: false
      t.datetime "updated_at", null: false
      t.index [ "user_id" ], name: "index_searches_on_user_id"
    end

    create_table "users", force: :cascade do |t|
      t.string "name", null: false
      t.datetime "created_at", null: false
      t.datetime "updated_at", null: false
      t.integer "role", default: 0, null: false
      t.string "email_address"
      t.string "password_digest"
      t.boolean "active", default: true
      t.index [ "email_address" ], name: "index_users_on_email_address", unique: true
    end

    add_foreign_key "active_storage_attachments", "active_storage_blobs", column: "blob_id"
    add_foreign_key "active_storage_variant_records", "active_storage_blobs", column: "blob_id"
    add_foreign_key "boosts", "messages"
    add_foreign_key "messages", "rooms"
    add_foreign_key "messages", "users", column: "creator_id"
    add_foreign_key "push_subscriptions", "users"
    add_foreign_key "searches", "users"

    execute <<-SQL
      create virtual table message_search_index using fts5(body, tokenize=porter);
    SQL
  end
end



================================================
FILE: db/migrate/20231220143106_add_bio_to_users.rb
================================================
class AddBioToUsers < ActiveRecord::Migration[7.2]
  def change
    change_table :users do |t|
      t.text :bio
    end
  end
end



================================================
FILE: db/migrate/20240110071740_create_sessions.rb
================================================
class CreateSessions < ActiveRecord::Migration[7.2]
  def change
    create_table :sessions do |t|
      t.references :user, null: false, foreign_key: true, index: true
      t.string :token, null: false
      t.string :ip_address
      t.string :user_agent
      t.datetime :last_active_at, null: false

      t.timestamps
    end

    add_index :sessions, :token, unique: true
  end
end



================================================
FILE: db/migrate/20240115124901_remove_owner_role.rb
================================================
class RemoveOwnerRole < ActiveRecord::Migration[7.2]
  def change
    # Migrate existing owner to administrator
    execute "update users set role = 1 where role = 2"
  end
end



================================================
FILE: db/migrate/20240130003150_create_webhooks.rb
================================================
class CreateWebhooks < ActiveRecord::Migration[7.2]
  def change
    create_table :webhooks do |t|
      t.references :user, null: false, foreign_key: true
      t.string :url

      t.timestamps
    end
  end
end



================================================
FILE: db/migrate/20240130213001_add_custom_styles_to_accounts.rb
================================================
class AddCustomStylesToAccounts < ActiveRecord::Migration[7.2]
  def change
    add_column :accounts, :custom_styles, :text
  end
end



================================================
FILE: db/migrate/20240131105830_alter_users_set_password_digest_not_null.rb
================================================
class AlterUsersSetPasswordDigestNotNull < ActiveRecord::Migration[7.2]
  def change
    execute <<-SQL
      update users set password_digest = '' where password_digest is null;
    SQL

    change_column_null :users, :password_digest, false
  end
end



================================================
FILE: db/migrate/20240209110503_alter_users_add_bot_token.rb
================================================
class AlterUsersAddBotToken < ActiveRecord::Migration[7.2]
  def change
    add_column :users, :bot_token, :string
    add_index :users, :bot_token, unique: true

    # Bot users do not use passwords
    change_column_null :users, :password_digest, true
  end
end



================================================
FILE: db/migrate/20250825100957_add_service_name_to_active_storage_blobs.active_storage.rb
================================================
# This migration comes from active_storage (originally 20190112182829)
class AddServiceNameToActiveStorageBlobs < ActiveRecord::Migration[6.0]
  def up
    return unless table_exists?(:active_storage_blobs)

    unless column_exists?(:active_storage_blobs, :service_name)
      add_column :active_storage_blobs, :service_name, :string

      if configured_service = ActiveStorage::Blob.service.name
        ActiveStorage::Blob.unscoped.update_all(service_name: configured_service)
      end

      change_column :active_storage_blobs, :service_name, :string, null: false
    end
  end

  def down
    return unless table_exists?(:active_storage_blobs)

    remove_column :active_storage_blobs, :service_name
  end
end



================================================
FILE: db/migrate/20250825100958_create_active_storage_variant_records.active_storage.rb
================================================
# This migration comes from active_storage (originally 20191206030411)
class CreateActiveStorageVariantRecords < ActiveRecord::Migration[6.0]
  def change
    return unless table_exists?(:active_storage_blobs)

    # Use Active Record's configured type for primary key
    create_table :active_storage_variant_records, id: primary_key_type, if_not_exists: true do |t|
      t.belongs_to :blob, null: false, index: false, type: blobs_primary_key_type
      t.string :variation_digest, null: false

      t.index %i[ blob_id variation_digest ], name: "index_active_storage_variant_records_uniqueness", unique: true
      t.foreign_key :active_storage_blobs, column: :blob_id
    end
  end

  private
    def primary_key_type
      config = Rails.configuration.generators
      config.options[config.orm][:primary_key_type] || :primary_key
    end

    def blobs_primary_key_type
      pkey_name = connection.primary_key(:active_storage_blobs)
      pkey_column = connection.columns(:active_storage_blobs).find { |c| c.name == pkey_name }
      pkey_column.bigint? ? :bigint : pkey_column.type
    end
end



================================================
FILE: db/migrate/20250825100959_remove_not_null_on_active_storage_blobs_checksum.active_storage.rb
================================================
# This migration comes from active_storage (originally 20211119233751)
class RemoveNotNullOnActiveStorageBlobsChecksum < ActiveRecord::Migration[6.0]
  def change
    return unless table_exists?(:active_storage_blobs)

    change_column_null(:active_storage_blobs, :checksum, true)
  end
end



================================================
FILE: lib/assets/.keep
================================================
[Empty file]


================================================
FILE: lib/rails_ext/action_text_attachables.rb
================================================
ActiveSupport.on_load(:action_text_content) do
  class ActionText::Attachment
    class << self
      def from_node(node, attachable = nil)
        new(node, attachable || ActionText::Attachment::OpengraphEmbed.from_node(node) || attachable_from_possibly_expired_sgid(node["sgid"]) || ActionText::Attachable.from_node(node))
      end

      private
        # Our @mentions use ActionText attachments, which are signed. If someone rotates SECRET_KEY_BASE, the existing attachments become invalid.
        # This allows ignoring invalid signatures for User attachments in ActionText.
        ATTACHABLES_PERMITTED_WITH_INVALID_SIGNATURES = %w[ User ]

        def attachable_from_possibly_expired_sgid(sgid)
          if message = sgid&.split("--")&.first
            encoded_message = JSON.parse Base64.strict_decode64(message)

            decoded_gid = if data = encoded_message.dig("_rails", "data")
              data
            else
              nil
            end

            model = GlobalID.find(decoded_gid)

            model.model_name.to_s.in?(ATTACHABLES_PERMITTED_WITH_INVALID_SIGNATURES) ? model : nil
          end
        rescue ActiveRecord::RecordNotFound
          nil
        end
    end
  end
end



================================================
FILE: lib/rails_ext/actiontext_opengraph_embeds.rb
================================================
class ActionText::Attachment::OpengraphEmbed
  include ActiveModel::Model

  OPENGRAPH_EMBED_CONTENT_TYPE = "application/vnd.actiontext.opengraph-embed"

  class << self
    def from_node(node)
      if node["content-type"]
        if matches = node["content-type"].match(OPENGRAPH_EMBED_CONTENT_TYPE)
          attachment = new(attributes_from_node(node))
          attachment if attachment.valid?
        end
      end
    end

    private
      def attributes_from_node(node)
        {
          href: node["href"],
          url: node["url"],
          filename: node["filename"],
          description: node["caption"]
        }
      end
  end

  attr_accessor :href, :url, :filename, :description

  def attachable_content_type
    OPENGRAPH_EMBED_CONTENT_TYPE
  end

  def attachable_plain_text_representation(caption)
    ""
  end

  def to_partial_path
    "action_text/attachables/opengraph_embed"
  end

  def to_trix_content_attachment_partial_path
    "action_text/attachables/opengraph_embed"
  end
end



================================================
FILE: lib/rails_ext/filter.rb
================================================
class ActionText::Content::Filter
  class << self
    def apply(content)
      filter = new(content)
      filter.applicable? ? ActionText::Content.new(filter.apply, canonicalize: false) : content
    end
  end

  def initialize(content)
    @content = content
  end

  def applicable?
    raise NotImplementedError
  end

  def apply
    raise NotImplementedError
  end

  private
    attr_reader :content
    delegate :fragment, to: :content
end



================================================
FILE: lib/rails_ext/filters.rb
================================================
class ActionText::Content::Filters
  def initialize(*filters)
    @filters = filters
  end

  def apply(content)
    filters.reduce(content) { |content, filter| filter.apply(content) }
  end

  private
    attr_reader :filters
end



================================================
FILE: lib/rails_ext/string.rb
================================================
class String
  def all_emoji?
    self.match? /\A(\p{Emoji_Presentation}|\p{Extended_Pictographic}|\uFE0F)+\z/u
  end
end



================================================
FILE: lib/restricted_http/private_network_guard.rb
================================================
require "resolv"

module RestrictedHTTP
  class Violation < StandardError; end

  module PrivateNetworkGuard
    extend self

    LOCAL_IP = IPAddr.new("0.0.0.0/8") # "This" network

    def resolve(hostname)
      Resolv.getaddress(hostname).tap do |ip|
        raise Violation.new("Attempt to access private IP via #{hostname}") if ip && private_ip?(ip)
      end
    end

    def private_ip?(ip)
      IPAddr.new(ip).then do |ipaddr|
        ipaddr.private? || ipaddr.loopback? || LOCAL_IP.include?(ipaddr)
      end
    rescue IPAddr::InvalidAddressError
      true
    end
  end
end



================================================
FILE: lib/tasks/generate.rake
================================================
namespace :generate do
  task "lines": :environment do
    room = Room.find_by(name: "Lobby")
    users = User.all

    1.upto(500) do |i|
      room.messages.create! \
        body: "Message #{i}",
        user: users.sample,
        created_at: 1.day.ago + i.minutes
    end
  end
end



================================================
FILE: lib/tasks/resque.rake
================================================
task "resque:setup" do
  require_relative "../../config/environment"
end

task "resque:pool:setup" do
  ActiveRecord::Base.connection.disconnect!

  Resque::Pool.after_prefork do |job|
    ActiveRecord::Base.establish_connection
    Resque.redis.client.close
  end
end



================================================
FILE: lib/tasks/.keep
================================================
[Empty file]


================================================
FILE: lib/web_push/notification.rb
================================================
class WebPush::Notification
  def initialize(title:, body:, path:, badge:, endpoint:, p256dh_key:, auth_key:)
    @title, @body, @path, @badge = title, body, path, badge
    @endpoint, @p256dh_key, @auth_key = endpoint, p256dh_key, auth_key
  end

  def deliver(connection: nil)
    WebPush.payload_send \
      message: encoded_message,
      endpoint: @endpoint, p256dh: @p256dh_key, auth: @auth_key,
      vapid: vapid_identification,
      connection: connection,
      urgency: "high"
  end

  private
    def vapid_identification
      { subject: "mailto:support@37signals.com" }.merge \
        Rails.configuration.x.vapid.symbolize_keys
    end

    def encoded_message
      JSON.generate title: @title, options: { body: @body, icon: icon_path, data: { path: @path, badge: @badge } }
    end

    def icon_path
      Rails.application.routes.url_helpers.account_logo_path
    end
end



================================================
FILE: lib/web_push/pool.rb
================================================
# This is in lib so we can use it in a thread pool without the Rails executor
class WebPush::Pool
  attr_reader :delivery_pool, :invalidation_pool, :connection, :invalid_subscription_handler

  def initialize(invalid_subscription_handler:)
    @delivery_pool = Concurrent::ThreadPoolExecutor.new(max_threads: 50, queue_size: 10000)
    @invalidation_pool = Concurrent::FixedThreadPool.new(1)
    @connection = Net::HTTP::Persistent.new(name: "web_push", pool_size: 150)
    @invalid_subscription_handler = invalid_subscription_handler
  end

  def queue(payload, subscriptions)
    subscriptions.find_each do |subscription|
      deliver_later(payload, subscription)
    end
  end

  def shutdown
    connection.shutdown
    shutdown_pool(delivery_pool)
    shutdown_pool(invalidation_pool)
  end

  private
    def deliver_later(payload, subscription)
      # Ensure any AR operations happen before we post to the thread pool
      notification = subscription.notification(**payload)
      subscription_id = subscription.id

      delivery_pool.post do
        deliver(notification, subscription_id)
      rescue Exception => e
        Rails.logger.error "Error in WebPush::Pool.deliver: #{e.class} #{e.message}"
      end
    rescue Concurrent::RejectedExecutionError
    end

    def deliver(notification, id)
      notification.deliver(connection: connection)
    rescue WebPush::ExpiredSubscription, OpenSSL::OpenSSLError => ex
      invalidate_subscription_later(id) if invalid_subscription_handler
    end

    def invalidate_subscription_later(id)
      invalidation_pool.post do
        invalid_subscription_handler.call(id)
      rescue Exception => e
        Rails.logger.error "Error in WebPush::Pool.invalid_subscription_handler: #{e.class} #{e.message}"
      end
    end

    def shutdown_pool(pool)
      pool.shutdown
      pool.kill unless pool.wait_for_termination(1)
    end
end



================================================
FILE: log/.keep
================================================
[Empty file]


================================================
FILE: public/404.html
================================================
<!DOCTYPE html>
<html>

<head>
  <title>We can’t find that (404)</title>
  <meta charset="UTF-8">
  <style>
    *,
    *::before,
    *::after {
      box-sizing: border-box;
    }

    body {
      --lch-black: 0% 0 0;
      --lch-gray: 75% 0.005 96;
      --lch-white: 100% 0 0;

      --color-border: oklch(var(--lch-gray));
      --color-bg: oklch(var(--lch-white));
      --color-text: oklch(var(--lch-black));

      --btn-size: 2.65em;

      background-color: var(--color-bg);
      block-size: 100dvh;
      color: var(--color-text);
      display: grid;
      margin: 0;
      padding: 0;
      place-items: center;
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";

      @media (prefers-color-scheme: dark) {
        --lch-black: 100% 0 0;
        --lch-gray: 44.95% 0 0;
        --lch-white: 0% 0 0;
      }
    }

    svg {
      fill: var(--color-text);

      @media (prefers-color-scheme: dark) {
        fill: var(--color-text);
      }
    }

    .error {
      align-items: center;
      display: flex;
      flex-direction: column;
      gap: 2em;
      justify-content: start;
      margin-block-end: 15dvh;
    }

    .error__img {
      aspect-ratio: 1;
      background-color: var(--color-text);
      block-size: auto;
      border-radius: 50%;
      display: grid;
      place-items: center;
      inline-size: 30dvh;

      svg {
        fill: var(--color-bg);
        grid-area: 1/1;
        max-inline-size: 66%;

        @media (prefers-color-scheme: dark) {
          fill: var(--color-bg);
        }
      }
    }

    .buttons {
      display: flex;
      flex-direction: row;
      gap: 1em;
      justify-content: center;
    }

    .btn {
      align-items: center;
      aspect-ratio: 1;
      background-color: var(--color-bg);
      block-size: var(--btn-size);
      border-radius: 50%;
      border: 1px solid var(--color-border);
      color: var(--color-text);
      cursor: pointer;
      display: grid;
      font-weight: 600;
      font-size: 1.4rem;
      gap: 0.5em;
      inline-size: var(--btn-size);
      justify-content: center;
      padding: 0;
      place-items: center;
      text-align: center;

      svg {
        -webkit-touch-callout: none;
        grid-area: 1/1;
        inline-size: 1.3em;
        max-inline-size: unset;
        user-select: none;
      }
    }

    .for-screen-reader {
      clip-path: inset(50%);
      height: 1px;
      width: 1px;
      overflow: hidden;
      position: absolute;
      white-space: nowrap;
    }

  </style>
</head>

<body>
  <div class="error">
    <div class="error__img">
      <svg enable-background="new 0 0 24 24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" aria-label="Not found">
        <path
          d="m24 4.8c0-1.7-1.3-3-3-3h-18c-1.7 0-3 1.3-3 3v14.5c0 1.7 1.3 3 3 3h18c1.7 0 3-1.3 3-3zm-14.3-1c.3-.5.8-.6 1.3-.4.2.1.3.2.4.4.1.1.1.3.2.5 0 .2-.1.4-.2.5-.3.5-.8.6-1.3.4-.2-.2-.4-.3-.4-.4-.1-.2-.2-.4-.2-.6 0-.1.1-.3.2-.4zm-3.5 0c.2-.5.8-.7 1.3-.4.2.1.3.2.4.4 0 .1.1.3.1.4 0 .2-.1.4-.2.5-.2.5-.8.7-1.3.4-.1-.1-.3-.2-.3-.3-.1-.2-.2-.4-.2-.6 0-.1.1-.3.2-.4zm-3.6 0c.2-.4.5-.6.9-.6s.7.2.8.5c.1.1.1.3.2.5 0 .2-.1.4-.2.5-.2.5-.8.7-1.3.4-.1-.1-.3-.2-.3-.3-.1-.2-.2-.4-.2-.6 0-.1 0-.2.1-.4zm19.4 15.4c0 .6-.4 1-1 1h-18c-.6 0-1-.4-1-1v-12.2c0-.1.1-.2.2-.2h19.5c.2 0 .3.1.3.2z" />
        <path
          d="m16.4 10.9c.2-.2.2-.6 0-.9l-.9-.9c-.2-.2-.6-.2-.9 0l-2.6 2.6h-.1l-2.5-2.6c-.2-.2-.6-.2-.9 0l-.9.9c-.2.2-.2.6 0 .9l2.6 2.6v.1l-2.6 2.6c-.2.2-.2.6 0 .9l.9.9c.2.2.6.2.9 0l2.6-2.6h.1l2.6 2.6c.2.2.6.2.9 0l.9-.9c.2-.2.2-.6 0-.9l-2.6-2.6v-.1z" />
      </svg>
    </div>
    <a href="/" class="btn" autofocus="true">
      <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
        <path
          d="m21.864 9.5h-11.607a.25.25 0 0 1 -.174-.43l3.864-3.721a2.609 2.609 0 0 0 -.075-3.682 2.612 2.612 0 0 0 -3.68-.077l-9.792 9.699a1 1 0 0 0 -.008 1.411l9.625 9.724a2.66 2.66 0 0 0 3.755-3.757l-3.729-3.733a.25.25 0 0 1 .177-.427h11.673c1.556 0 2-1.675 2-2.51a2.28 2.28 0 0 0 -2.029-2.497z" />
      </svg>
      <span class="for-screen-reader">Go back</span>
    </a>
  </div>
</body>

</html>



================================================
FILE: public/422.html
================================================
<!DOCTYPE html>
<html>
  <head>
    <title>That didn’t work (422)</title>
    <meta charset="UTF-8">
    <style>
      *,
      *::before,
      *::after {
        box-sizing: border-box;
      }

      body {
        --lch-black: 0% 0 0;
        --lch-gray: 75% 0.005 96;
        --lch-white: 100% 0 0;

        --color-border: oklch(var(--lch-gray));
        --color-bg: oklch(var(--lch-white));
        --color-text: oklch(var(--lch-black));

        --btn-size: 2.65em;

        background-color: var(--color-bg);
        block-size: 100dvh;
        color: var(--color-text);
        display: grid;
        margin: 0;
        padding: 0;
        place-items: center;
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";

        @media (prefers-color-scheme: dark) {
          --lch-black: 100% 0 0;
          --lch-gray: 44.95% 0 0;
          --lch-white: 0% 0 0;
        }
      }

      svg {
        fill: var(--color-text);

        @media (prefers-color-scheme: dark) {
          fill: var(--color-text);
        }
      }

      .error {
        align-items: center;
        display: flex;
        flex-direction: column;
        gap: 2em;
        justify-content: start;
        margin-block-end: 15dvh;
      }

      .error__img {
        aspect-ratio: 1;
        background-color: var(--color-text);
        block-size: auto;
        border-radius: 50%;
        display: grid;
        place-items: center;
        inline-size: 30dvh;

        svg {
          fill: var(--color-bg);
          grid-area: 1/1;
          max-inline-size: 66%;

          @media (prefers-color-scheme: dark) {
            fill: var(--color-bg);
          }
        }
      }

      .buttons {
        display: flex;
        flex-direction: row;
        gap: 1em;
        justify-content: center;
      }

      .btn {
        align-items: center;
        aspect-ratio: 1;
        background-color: var(--color-bg);
        block-size: var(--btn-size);
        border-radius: 50%;
        border: 1px solid var(--color-border);
        color: var(--color-text);
        cursor: pointer;
        display: grid;
        font-weight: 600;
        font-size: 1.4rem;
        gap: 0.5em;
        inline-size: var(--btn-size);
        justify-content: center;
        padding: 0;
        place-items: center;
        text-align: center;

        svg {
          -webkit-touch-callout: none;
          grid-area: 1/1;
          inline-size: 1.3em;
          max-inline-size: unset;
          user-select: none;
        }
      }

      .for-screen-reader {
        clip-path: inset(50%);
        height: 1px;
        width: 1px;
        overflow: hidden;
        position: absolute;
        white-space: nowrap;
      }
    </style>
  </head>

  <body>
    <div class="error">
      <div class="error__img">
        <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" aria-label="That didn’t work" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px"
          y="0px" viewBox="0 0 24 24" style="enable-background:new 0 0 24 24;" xml:space="preserve">
          <g>
            <circle cx="11.5" cy="11.5" r="1.8" />
            <path d="M12.2,18.7c-0.2,0-0.5,0-0.7,0c-4,0-7.2-3.2-7.2-7.2c0-4,3.2-7.2,7.2-7.2c4,0,7.2,3.2,7.2,7.2c0,1-0.2,1.9-0.5,2.7l0.3-0.3
        		c0-1.3,0.8-2.5,2-3c-0.3-4.7-4.2-8.4-9-8.4c-5,0-9,4-9,9c0,4.6,3.5,8.5,8,9L12.2,18.7z" />
            <path d="M11.5,6.1c-3,0-5.4,2.4-5.4,5.4s2.4,5.4,5.4,5.4s5.4-2.4,5.4-5.4S14.5,6.1,11.5,6.1z M11.5,15.1c-2,0-3.6-1.6-3.6-3.6
        		s1.6-3.6,3.6-3.6s3.6,1.6,3.6,3.6S13.5,15.1,11.5,15.1z" />
          </g>
          <path d="M15,24l4-4v-1.5l2.6-2.6C21.7,16,21.9,16,22,16c1.1,0,2-0.9,2-2s-0.9-2-2-2c-1.1,0-2,0.9-2,2c0,0.1,0,0.3,0.1,0.4L17.5,17
        	H16l-4,4h3V24" />
        </svg>
      </div>
      <div class="buttons">
        <a href="/" class="btn" autofocus="true">
          <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path
              d="m21.864 9.5h-11.607a.25.25 0 0 1 -.174-.43l3.864-3.721a2.609 2.609 0 0 0 -.075-3.682 2.612 2.612 0 0 0 -3.68-.077l-9.792 9.699a1 1 0 0 0 -.008 1.411l9.625 9.724a2.66 2.66 0 0 0 3.755-3.757l-3.729-3.733a.25.25 0 0 1 .177-.427h11.673c1.556 0 2-1.675 2-2.51a2.28 2.28 0 0 0 -2.029-2.497z" />
          </svg>
          <span class="for-screen-reader">Go back</span>
        </a>
        <a href="#" class="btn" autofocus="true" onclick="window.location.reload()">
          <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path
              d="m6.177 6.167a8.233 8.233 0 0 1 8.351-2.027 1.249 1.249 0 1 0 .76-2.38 10.751 10.751 0 0 0 -13.242 14.273.248.248 0 0 1 -.094.3l-1.4.922a1 1 0 0 0 .348 1.816l4.407.908a.99.99 0 0 0 .2.021 1 1 0 0 0 .979-.8l.914-4.406a1 1 0 0 0 -1.529-1.037l-1.339.881a.25.25 0 0 1 -.376-.133 8.269 8.269 0 0 1 2.021-8.338z" />
            <path
              d="m23.883 5.832a1 1 0 0 0 -.763-.807l-4.388-1a1 1 0 0 0 -1.2.752l-1 4.387a1 1 0 0 0 1.507 1.069l1.443-.906a.247.247 0 0 1 .218-.027.252.252 0 0 1 .153.159 8.249 8.249 0 0 1 -10.285 10.424 1.25 1.25 0 1 0 -.737 2.388 10.75 10.75 0 0 0 13.154-14.271.248.248 0 0 1 .1-.3l1.346-.846a1 1 0 0 0 .452-1.022z" />
          </svg>
          <span class="for-screen-reader">Try again</span>
        </a>
      </div>
    </div>
  </body>
</html>



================================================
FILE: public/500.html
================================================
<!DOCTYPE html>
<html>
  <head>
    <title>Something went wrong (500)</title>
    <meta charset="UTF-8">
    <style>
      *,
      *::before,
      *::after {
        box-sizing: border-box;
      }

      body {
        --lch-black: 0% 0 0;
        --lch-gray: 75% 0.005 96;
        --lch-white: 100% 0 0;

        --color-border: oklch(var(--lch-gray));
        --color-bg: oklch(var(--lch-white));
        --color-text: oklch(var(--lch-black));

        --btn-size: 2.65em;

        background-color: var(--color-bg);
        block-size: 100dvh;
        color: var(--color-text);
        display: grid;
        margin: 0;
        padding: 0;
        place-items: center;
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";

        @media (prefers-color-scheme: dark) {
          --lch-black: 100% 0 0;
          --lch-gray: 44.95% 0 0;
          --lch-white: 0% 0 0;
        }
      }

      svg {
        fill: var(--color-text);

        @media (prefers-color-scheme: dark) {
          fill: var(--color-text);
        }
      }

      .error {
        align-items: center;
        display: flex;
        flex-direction: column;
        gap: 2em;
        justify-content: start;
        margin-block-end: 15dvh;
      }

      .error__img {
        aspect-ratio: 1;
        background-color: var(--color-text);
        block-size: auto;
        border-radius: 50%;
        display: grid;
        place-items: center;
        inline-size: 30dvh;

        svg {
          fill: var(--color-bg);
          grid-area: 1/1;
          max-inline-size: 66%;

          @media (prefers-color-scheme: dark) {
            fill: var(--color-bg);
          }
        }
      }

      .buttons {
        display: flex;
        flex-direction: row;
        gap: 1em;
        justify-content: center;
      }

      .btn {
        align-items: center;
        aspect-ratio: 1;
        background-color: var(--color-bg);
        block-size: var(--btn-size);
        border-radius: 50%;
        border: 1px solid var(--color-border);
        color: var(--color-text);
        cursor: pointer;
        display: grid;
        font-weight: 600;
        font-size: 1.4rem;
        gap: 0.5em;
        inline-size: var(--btn-size);
        justify-content: center;
        padding: 0;
        place-items: center;
        text-align: center;

        svg {
          -webkit-touch-callout: none;
          grid-area: 1/1;
          inline-size: 1.3em;
          max-inline-size: unset;
          user-select: none;
        }
      }

      .for-screen-reader {
        clip-path: inset(50%);
        height: 1px;
        width: 1px;
        overflow: hidden;
        position: absolute;
        white-space: nowrap;
      }
    </style>
  </head>

  <body>
    <div class="error">
      <div class="error__img">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" aria-label="Server error">
          <title>server-warning</title>
          <path
            d="M2.5,6h17A2.5,2.5,0,0,0,22,3.5v-1A2.5,2.5,0,0,0,19.5,0H2.5A2.5,2.5,0,0,0,0,2.5v1A2.5,2.5,0,0,0,2.5,6ZM3.635,3A1.115,1.115,0,1,1,4.749,4.114,1.114,1.114,0,0,1,3.635,3ZM7.5,3A1.115,1.115,0,1,1,8.614,4.114,1.115,1.115,0,0,1,7.5,3Z" />
          <path
            d="M14.892,11.574a2.952,2.952,0,0,1,3.339-1.486,3.061,3.061,0,0,1,1.934,1.59l.26.495a.5.5,0,0,0,.765.154A2.468,2.468,0,0,0,22,10.5v-1A2.5,2.5,0,0,0,19.5,7H2.5A2.5,2.5,0,0,0,0,9.5v1A2.5,2.5,0,0,0,2.5,13H13.842a.5.5,0,0,0,.442-.268ZM9.729,10A1.115,1.115,0,1,1,8.614,8.885,1.115,1.115,0,0,1,9.729,10ZM5.864,10A1.115,1.115,0,1,1,4.749,8.885,1.115,1.115,0,0,1,5.864,10Z" />
          <path
            d="M2.5,20h7.67a.5.5,0,0,0,.442-.268l2.624-5A.5.5,0,0,0,12.792,14H2.5A2.5,2.5,0,0,0,0,16.5v1A2.5,2.5,0,0,0,2.5,20Zm1.136-3a1.115,1.115,0,1,1,1.114,1.115A1.114,1.114,0,0,1,3.635,17ZM7.5,17a1.115,1.115,0,1,1,1.115,1.115A1.115,1.115,0,0,1,7.5,17Z" />
          <path
            d="M11.165,21.905a1.429,1.429,0,0,0,.048,1.408A1.453,1.453,0,0,0,12.446,24H22.558a1.455,1.455,0,0,0,1.232-.687,1.429,1.429,0,0,0,.048-1.408l-5.055-9.634a1.45,1.45,0,0,0-2.562,0ZM17.5,14.75a.75.75,0,0,1,.75.75v3a.75.75,0,0,1-1.5,0v-3A.75.75,0,0,1,17.5,14.75Zm1,6.5a1,1,0,1,1-1-1A1,1,0,0,1,18.5,21.25Z" />
        </svg>
      </div>
      <a href="/" class="btn" autofocus="true">
        <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path
            d="m21.864 9.5h-11.607a.25.25 0 0 1 -.174-.43l3.864-3.721a2.609 2.609 0 0 0 -.075-3.682 2.612 2.612 0 0 0 -3.68-.077l-9.792 9.699a1 1 0 0 0 -.008 1.411l9.625 9.724a2.66 2.66 0 0 0 3.755-3.757l-3.729-3.733a.25.25 0 0 1 .177-.427h11.673c1.556 0 2-1.675 2-2.51a2.28 2.28 0 0 0 -2.029-2.497z" />
        </svg>
        <span class="for-screen-reader">Go back</span>
      </a>
    </div>
  </body>
</html>



================================================
FILE: public/502.html
================================================
<!DOCTYPE html>
<html>
  <head>
    <title>Starting Campfire…</title>
    <style>
      body {
        --color-yellow: #ff0;
        --color-cyan: #00ffdd;
        --color-white: #fff;
        --color-black: #000;
        --color-bg: #0064e6;
        --opacity: 0.25;
        --animation-loop: 3s;
        --animation-duration: 200ms;

        background-color: var(--color-bg);
        block-size: 100dvh;
        display: grid;
        margin: 0;
        padding: 0;
        place-items: center;
      }

      svg {
        max-width: 50dvh;
        height: auto;
        aspect-ratio: 1;
        margin-block-end: 10dvh;
      }

      #glow,
      #spark,
      #shadow,
      #line-art,
      #lighter_tint {
        stroke-width: 0;
      }

      .line-art {
        fill: var(--color-black)
      }

      #lighter_tint {
        fill: var(--color-white);
      }

      #glow {
        fill: var(--color-white);
        animation: spark-glow var(--animation-loop) step-start infinite, cycle-colors var(--animation-duration) step-start infinite;
      }

      #spark,
      #lighter_glow {
        animation: spark var(--animation-loop) step-start infinite, cycle-colors var(--animation-duration) step-start infinite;
      }

      #shadow {
        opacity: var(--opacity);
        animation: spark-glow var(--animation-loop) step-start infinite, cycle-colors var(--animation-duration) step-start infinite;
      }

      @keyframes cycle-colors {
        0% { fill: var(--color-yellow); }
        33% { fill: var(--color-cyan); }
        66% { fill: transparent; }
        100% { fill: var(--color-yellow); }
      }

      @keyframes spark-glow {
        0% { opacity: var(--opacity); }
        10% { opacity: var(--opacity); }
        100% { opacity: 0; }
      }

      @keyframes spark {
        0% { opacity: 1; }
        10% { opacity: 1; }
        100% { opacity: 0; }
      }
    </style>
  </head>

  <body>
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 888 888">
      <ellipse id="shadow" class="cls-2" cx="469.75" cy="834.51" rx="113.96" ry="38.96"
        transform="translate(-111.93 73.77) rotate(-8.03)" />
      <g id="lighter_tint">
        <path class="lighter_tint"
          d="M539.59,779.8c-2.94-133.23,1.77-267.71-2.55-400.39-1.5-2.53-3.12-4.81-.63-7.69.65-1.78.77-4.23,2.44-5.64,5.51-3.9.43-11.3-.89-16.28-3.06-9.05-13.15-13.26-21.66-15.74-6.24-2.63-12.79,1.68-18.94.22,2.84-4.25-3.09-3.37-.69-6.63.15-.19-.26-1.02-.6-1.36-2.07-2.06-1.41-5.86-4.6-7.25.04-.94-.23-2.74-1.01-3.7-.81.45-1.54.99-2.18,1.66-1.27-1.41.06-6.51-3.15-5.3-1.32.8-1.37.25-1.93-.68-3.83-6.58-11.59-9.28-17.5-13.66-.47-.3-2.01.05-2.02.19-.26,2.75-1.2.61-1.75.24-1.91-1.15-3.32-3.49-5.81-2.39.25.76.48,1.52.56,2.32-2.57.51-6.17-5.54-7.94-1.76.06,4.1-5.03-3.31-6.27,1.52-.19,1.3-.05,1.13-1.42.84-2.39-.52-4.75.41-6.93,1.34-1.52.41-3.16.58-2.31,2.88-1.71,2.02-4.61-1.79-4.81,3.59-16.95,4.85-36.45,9.86-51.55,20.49-8.13,4.98-7.6,15.68-9.41,24.12-1.76,7.55,3.67,7.04,2.28,11.07-2.23,3.84-1.95,8.6.8,11.98.43.52.68,1.75.37,2.22-2.65,5.18-3.4,20.44-.88,25.53.86,1.34,1.79,2.33.34,4.03,1.57,79.37,1.5,160.93,1.56,241.13.95,67.16-.52,133.95,1.08,200.97,4.51,14.82,22.72,13.54,35.09,16.76,28.08,4.74,57.73,4.56,85.37-2.67,59.62-20.11,46.13-27.98,47.54-81.98Z" />
      </g>
      <polygon id="glow" class="glow"
        points="624.37 371.86 506.99 303.33 642.33 290.8 518.5 263.85 553.62 261.44 534.77 251.03 634.37 208.16 502.16 221.4 503.67 217.72 601.26 132.02 502.25 175.52 542.13 142.15 500.18 147.37 546.23 69.84 474.72 133.6 448.17 145.26 474.69 27.7 457.33 57.43 402.77 108.47 399.71 75.41 405.84 48.24 398.38 61.02 393.63 9.74 374.44 97.88 345.71 26.47 336.14 76.13 310.99 17.7 321.16 119.24 287.49 41.01 294.5 111.05 279.48 101.64 234.85 50.82 248.7 82.35 246.5 80.97 232.44 64.95 236.8 74.89 235.81 74.27 247.5 99.24 271.97 154.91 187.49 104.73 206.26 125.79 172.67 105.84 233.04 173.55 232.88 173.56 157.02 156.45 191.21 176.42 174.99 177.53 205.23 194.23 130.53 177.38 188.08 210.98 144.04 215.06 225.4 232.77 234.76 238.24 208.44 249.56 112.57 258.44 162.55 269.32 149.79 274.81 175.8 272.2 207.63 279.13 186.49 296.82 215.45 293.22 199.79 306.97 120.53 341.08 212.93 331.83 234.24 339.91 226.12 353.57 153.64 417.22 271.17 365.59 267.44 380.47 208.66 479.4 310.11 388.95 280.21 521.54 330.62 435.19 342.64 484.21 354.75 469.12 361.27 539.5 384.71 431.81 395.31 418.62 443.91 531.54 430.37 396.3 520.05 498.43 475.61 397.28 508.69 399.72 582.23 443.41 499.34 350.44 494.13 342.49 624.37 371.86" />
      <path id="spark" class="spark"
        d="M451.53,286.13c13.02-1.87-25.08,17.38-26.52,19.53-4.09,3.05-7.62,7.1-11.05,10.92,3.84-1.32,29.36-5.6,14.5,1.96-5.71,2.61-12.5,3.35-17.89,6.08,6,1.66,13.75.04,18.29,4.77-6.11,4.28-15.82-.21-22.66,1.3,1.86,4.33,6.98,7.41,7.46,12.13-5.06-2.04-7.46-8.34-12.65-9.95,3.71,7.75,13.62,12.58,15,21.33-1.85-.32-3-1.91-4.16-3.22-4.17-5.52-10.82-7.52-16.13-11.58-5.43-5.26-3.13,26.97-6.39,29.84-3.74-5.71,1.23-22.75.13-30.29-7.26,5.37-7.83,17.03-14.89,22.2-.97-4.25,5.08-12.19,6.64-16.79-8.19,1.96-26.71,19.53-34.03,17.95,3.87-8.18,19.54-14.12,26.56-20.52-12.07,3-23.7,11.19-36.28,11.16,2.38-4.27,8.03-5.3,12-7.81,4.2-2.37,9.33-3.63,13.13-6.41-16.15-.22-33.15-.4-49.25.86,1.67,3.44,5.7,6.04,5.42,10.25-4.58-1.23-6.07-6.78-9.49-9.49-2.17,3.03-1.82,7.98-4.82,10.23-2.19-2.69.94-6.19,1.55-9.13,1.9-4.41-9.14-.36-11.41-3.09,3.46-2.45,7.96-1.2,11.94-1.86-1.32-4.01-7.39-6.67-6.2-11.2,3.39,1,4.34,5.2,7.23,7.01,1.91-3.14,1.44-8.25,4.95-9.98,2.96,3.13-6.51,14.93.45,13.73,18.41-1.62,37.12-1.63,55.38-3.99-10.38-1.77-20.86-3.09-30.96-6.42-3.93-1.57-9.83-.14-12.62-3.67,3.74-1.23,8.11.49,12.07.28,8.76-.04,17.63,1.04,26.23,1.34-25.97-12.94-52.73-25.99-78.94-38.18.29,1.44.48,2.89.65,4.34-1.43-.09-2.04-1.01-2.26-2.28-.24-4.29-4.4-4.5-6.33-7.5,3.75-.16,2.76-2.49,1.58-4.94-3.56-2.8-8.9,1.67-13.07-.2,2.02-3.67,6.01-2.42,9.16-3.91-1.1-1.67-3.77-1.77-4.12-3.94,2.02-1.27,3.04,1.23,5.02,1.29-.38-4.56-5.13-8.23-3.63-12.98,3.3,3.35,3.94,8.44,5.82,12.64,2.02,4.83,12.41-2.76,16.94.54-1.36,4.06-13.43,2.38-10.91,4.97,27.74,14.23,55.35,29.48,83.22,43.08-9.7-8.07-21.92-13.22-32.56-20.15-.72-.33-1.69-1.37-1.51-2.09,4.31-1.45,13.16,7.44,18.01,7.95-8.8-8.06-18.83-15.25-27.84-23.27-3.35-3.65-9.18-6.09-10.56-10.96,5.78,1.39,10.44,6.66,15.61,9.72,10.05,6.84,19.43,15.25,29.35,21.86-3.31-7.52-10.61-13.17-16.93-18.42-2.67-2.79-12.88-8.17-11.96-11.87,6.01,1.73,9.65,8.77,15.44,10.94-20.03-29.2-46.76-54.61-68.2-83.05-2.17,1.86-.19,5.37-2.75,6.8-3.85-5.18,3.41-8.07-4.93-15.57-.22-.32-2.59.25-3.34,1.01-1.14,1.17-1.89.43-2.63-.09.2-4.57,6.28-1.71.47-7.27-1.06-1.25-1.62-2.93-3.09-3.77-2.44,3.74-.89,9.76-3.31,13.42-1.36-.02-1.29-1.23-1.22-2.16,1.85-17.72,2.12-11.45-13.33-16.04-.69-.17-1.8-.92-1.76-1.3.66-3.04,12.78,1.86,15.72,1.76-1.14-3.65-6.28-5.42-5.92-9.48,2.95,1.45,4.19,5.13,7.1,6.59,2.02-4.57.1-11.08,3.73-14.71,2.01,5.08-.73,11.12-.86,16.46.38,2.88,7.59,3.64,9.98,3.45-1.39-3.03-5.52-5.25-4.3-8.91,2.75.25,8.56,13.21,9.67,8.76.81-3.9.04-8.33,2.71-11.55,1.98,4.42-1.11,9.18,0,13.65,3.81-1.42,8.34-7.57,12.39-5.96.85.96.1,1.63-.95,2.27-3.12,1.9-6.07,4.08-9.2,5.98-2.1,1.28-2.33,1.79-.87,3.7,5.45,7.13,10.9,14.26,16.32,21.41,23.59,31.33,46.75,63.47,74.34,91.33-3.83-6.57-9.08-12.28-13.77-18.26-5.77-6.85-11.79-13.48-17.67-20.24-1.18-1.36-.69-2.45,1.1-3.09.21-.08.44-.89.29-1.1-3.65-5.16-7.36-10.27-11.04-15.41-1.09-1.07-.93-2.24-.34-3.53,9.11,9.21,15.11,21.59,23.93,30.98-14.81-27.59-31.66-54.48-46.02-82.47-5.36-9.14-10.44-18.44-15.41-27.8-3.11-7.49-12.99-18.12-11.93-25.83,28.81,44,54.31,91.14,81.03,136.57-.14-6.18-9.4-15.41-7.14-21.43,6.59,7.42,9.34,19.67,16.07,26.55-10.61-26.75-21.78-53.89-32.3-80.89-4.48-10.97-8.79-22.01-13.12-33.04-1.9-6.74-7.13-13.24-7.31-20.09,2.28,0,3.16,5.17,4.42,6.96,4.42,10.44,8.78,20.91,13.53,31.21,11.65,25.59,22.84,51.74,34.07,77.33,4.24-9.72-2.47-20.48-6.81-29.33-6.4-14.69-15.32-28.91-19.28-44.39-.05-.76.57-1.59,1.33-.13,9.33,15.94,16.53,33.25,25.22,49.36.55-7.94,1.94-18.83-2.23-25.91-4.22-8.16-8.66-16.21-12.97-24.32-1.07-2.11-2.76-4.03-1.6-6.48,6.09,6.22,7.75,16.46,13.97,22.68-1.3-5.88-3.11-11.91-4.2-17.82-.83.57-3.17,1.67-3.72,1.43-.84-.98-.59-2.09.58-2.97,2.25-1.68,2.14-3.79,1.31-6.28-2.09-14.98-6.29-9.28-9.02-16.27,2.56-1.11,3.66,2.41,6.06,2.31-.82-8.59-9.38-26.3-6.24-33.38,3.68,11.1,5.52,23.18,9.35,34.41,1.07,3.78,4.86,4.62,7.39,6.81,2.93-2.81-.88-9.35,2.24-13.11,1.6,4.16.96,8.76,1.48,13.13,5.19-1.96,7.35-9.28,13.05-10.21-1.56,5.14-7.19,8.19-10.6,12.23-3.88,3.73,14.72,9.64,14.28,14.9-6.28-.87-10.58-7.73-16.58-9.82-.73,9.44.42,19.11.51,28.62.28,9.39,5.61,17.91,10.7,25.42.25-.84.6-1.63,1.06-2.38,4.03,6.51,4.16,15.83,9.36,21.7-1.17-12.47-6.16-24.83-8.04-37.4-.42-4.95-3.77-10.35-1.6-14.99,3.93,8.62,4.02,18.95,6.98,28.08,2.84,11.07,3.96,23.25,7.91,33.71,2.33-20.15.29-41.55,1.28-62.09-2.77,1.21-4.16,4.49-7.57,4.21-.32-4.53,9.63-7.59,5.73-9.7-1.82-2.12-5.35-3.5-5.35-6.59,2.86-.15,4.12,3.38,6.85,3.88.75-2.92-.55-6.62,1.32-9.06,1.84,3.03.22,7.27,1.14,10.71,4.13-2.75,9.11-6.61,11.2-11.2,1.69-5.81,0-18.06,4.27-21.73-.1,18.35-2.93,37.02-3.57,55.5-.12,8.01-3.1,16.32-1.92,24.15,2.83-2.77,3.06-7.2,4.84-10.65,2.72-4.94,3.49-11.71,8.05-15.2-2.97,17.45-16.19,32.86-15.82,51.36,3.94-2.37,3.25-8.23,6.48-11.39,7.23-4.33-10.07,33.91-9,37.47,8.63-7.5,9.55-20.35,13.46-30.5,2.89-8.55,5.73-17.11,8.59-25.67,3.88-8.81,4.57-19.99,10.67-27.4,1.32,3.93-1.41,8.22-1.99,12.22-3.99,15.77-8.99,31.52-13.05,47.12,6.59-4.99,10.26-17.71,17.49-21.29-5.15,15.31-20.5,26.94-23.91,43.15,2.75-.5,6.36-10.89,8.76-13.72,9.36-8.14-7.14,18.42-6.44,20.57,9.62-11.81,15.87-27,24.65-39.76,1.61-2.46,2.37-5.59,5.29-6.85-.95,7.16-7.1,13.03-10.11,19.62-5.11,10.09-12.29,19.39-16.56,29.75,5.89-2.14,14.67-15.06,20.28-13.83-.1.79.09,1.86-.35,2.33-7.68,8.34-15.79,16.22-24.23,23.79,11.82-5.27,19.34-17.79,29.23-26.04,2.69-2.89-6.44-3.68-5.63-6.86,2.39-1.99,5.17,1.43,7.6,2.1.78.38,1.47,1.24,1.36-.77.38-3.9-.68-9.34,2.89-11.92,2.62,3.86.05,8.44-.21,12.67-1.05,4.99,11.28,6.13,11.53,11.44-3.5,1.75-11.32-7.91-11.75-2.3.02,1.61.29,3.18-.61,4.62-2.77-1.32-.99-4.04-1.93-6.28-4.7,4.57-9.78,9.13-13.74,14.32,5.33-1.05,9.91-4.77,15-7.05M406.47,212.65c.68-4.92,1.33-9.85,2.04-14.77.66-4.18-4.6-5.65-7.07-8.14-1.12,17.79.38,36.56.77,54.5,3.22-9.71,2.34-21.02,4.25-31.6M385.43,256.47c1.56,3.62,1.39,11.13,4.13,13.32-.07-14.61-3.66-30.33-11.7-42.72-.46,1.03-.6,1.95-.03,2.98,2.56,8.91,5.27,17.32,7.6,26.42M289.87,284.48c7.64,2.72,15.03,7.36,22.87,8.97-4.75-4.94-12.73-6.87-18.31-11.23-3.92-1.64-11.12-7.91-14.66-7.59.69,5.4,5.21,8.27,10.1,9.85M296.11,216.21c.63,1.33,1.75,2.08,2.98,2.8-6.05-11.52-15.31-21.44-22.56-32.33-.14-.19-.64-.11-.96-.16-.06,2.16-1.07,5.09-.04,6.35,6.5,7.94,13.46,15.5,20.57,23.35M372.2,257.1c.25,10.54,4.92,20.19,9.29,29.59.19-1.31.57-2.59-.13-3.81-2.93-8.27-5.65-16.59-7.43-25.2-.22-.9-.54-1.49-1.72-.58M371.07,223.51c.21,8.28,1.13,16.16,4.9,23.53.13.43.86.67,1.32,1,.69-5.02-2.46-10.33-3.15-15.45-1.15-2.34-.52-8.43-3.06-9.09M409.75,180.11c-5.82,6.68-10.03,6.01-.47,12.07,1.03-4.18,1.44-8.5,2.19-12.73-.52.12-1.05.24-1.72.66M367.16,170.32c-1.05,1.66-3.07,3.4-2.95,4.97.7,3.95,1.11,8.77,3.42,12.11.87-5.42-.28-11.58-.47-17.08M268.53,183.13c1.22-.67,2.48-1.29,3.59-2.14-2.62-2-6.31-1.4-9.41-2.19,1.46,2.33,2.79,3.84,5.82,4.33M365.34,167.89c1.13-1.57-2.55-3.3-3.41-4.73-2.19,1.86.31,5.08,1.62,6.85.55-.61,1.09-1.21,1.79-2.12M271.28,189.05c2.29.14,1.8-2.62,2.41-4.17-.45-1.63-2.85.64-3.47,1.24-.29.38.57,1.62,1.06,2.93Z" />
      <g id="lighter_glow">
        <path class="lighter_tint"
          d="M539.59,779.8c-2.94-133.23,1.77-267.71-2.55-400.39-1.5-2.53-3.12-4.81-.63-7.69.65-1.78.77-4.23,2.44-5.64,5.51-3.9.43-11.3-.89-16.28-3.06-9.05-13.15-13.26-21.66-15.74-6.24-2.63-12.79,1.68-18.94.22,2.84-4.25-3.09-3.37-.69-6.63.15-.19-.26-1.02-.6-1.36-2.07-2.06-1.41-5.86-4.6-7.25.04-.94-.23-2.74-1.01-3.7-.81.45-1.54.99-2.18,1.66-1.27-1.41.06-6.51-3.15-5.3-1.32.8-1.37.25-1.93-.68-3.83-6.58-11.59-9.28-17.5-13.66-.47-.3-2.01.05-2.02.19-.26,2.75-1.2.61-1.75.24-1.91-1.15-3.32-3.49-5.81-2.39.25.76.48,1.52.56,2.32-2.57.51-6.17-5.54-7.94-1.76.06,4.1-5.03-3.31-6.27,1.52-.19,1.3-.05,1.13-1.42.84-2.39-.52-4.75.41-6.93,1.34-1.52.41-3.16.58-2.31,2.88-1.71,2.02-4.61-1.79-4.81,3.59-16.95,4.85-36.45,9.86-51.55,20.49-8.13,4.98-7.6,15.68-9.41,24.12-1.76,7.55,3.67,7.04,2.28,11.07-2.23,3.84-1.95,8.6.8,11.98.43.52.68,1.75.37,2.22-2.65,5.18-3.4,20.44-.88,25.53.86,1.34,1.79,2.33.34,4.03,1.57,79.37,1.5,160.93,1.56,241.13.95,67.16-.52,133.95,1.08,200.97,4.51,14.82,22.72,13.54,35.09,16.76,28.08,4.74,57.73,4.56,85.37-2.67,59.62-20.11,46.13-27.98,47.54-81.98Z" />
      </g>
      <g id="line-art">
        <path class="line-art"
          d="M539.59,779.8c-2.94-133.23,1.77-267.71-2.55-400.39-1.5-2.53-3.12-4.81-.63-7.69.65-1.78.77-4.23,2.44-5.64,5.51-3.9.43-11.3-.89-16.28-3.06-9.05-13.15-13.26-21.66-15.74-6.24-2.63-12.79,1.68-18.94.22,2.84-4.25-3.09-3.37-.69-6.63.15-.19-.26-1.02-.6-1.36-2.07-2.06-1.41-5.86-4.6-7.25.04-.94-.23-2.74-1.01-3.7-.81.45-1.54.99-2.18,1.66-1.27-1.41.06-6.51-3.15-5.3-1.32.8-1.37.25-1.93-.68-3.83-6.58-11.59-9.28-17.5-13.66-.47-.3-2.01.05-2.02.19-.26,2.75-1.2.61-1.75.24-1.91-1.15-3.32-3.49-5.81-2.39.25.76.48,1.52.56,2.32-2.57.51-6.17-5.54-7.94-1.76.06,4.1-5.03-3.31-6.27,1.52-.19,1.3-.05,1.13-1.42.84-2.39-.52-4.75.41-6.93,1.34-1.52.41-3.16.58-2.31,2.88-1.71,2.02-4.61-1.79-4.81,3.59-16.95,4.85-36.45,9.86-51.55,20.49-8.13,4.98-7.6,15.68-9.41,24.12-1.76,7.55,3.67,7.04,2.28,11.07-2.23,3.84-1.95,8.6.8,11.98.43.52.68,1.75.37,2.22-2.65,5.18-3.4,20.44-.88,25.53.86,1.34,1.79,2.33.34,4.03,1.57,79.37,1.5,160.93,1.56,241.13.95,67.16-.52,133.95,1.08,200.97,4.51,14.82,22.72,13.54,35.09,16.76,28.08,4.74,57.73,4.56,85.37-2.66,59.62-20.11,46.13-27.98,47.54-81.98ZM514.66,359.35c-3.15-6.07-11.49-10.2-15.55-16.04,7.97.6,12.14,11.09,19.4,13.72-2.27-6.74-11.42-9.45-14.25-16.03,7.38,2.27,11.87,10.65,19.09,13.12-2.4-6.11-11.64-9.1-15.58-14.7,7.32-1.16,11.21,8.19,17.37,10.52-.65-4.88-6.96-6.75-9.2-10.95,5.08.13,8.94,5.34,13.69,6.95,2.09,2.41,1.8,4.6-.68,6.24-6.35,4.19-12.73,8.33-19.09,12.5-1.8,1.58-4.61,3.37-6.85,2.07-3.75-3.75-10.51-6.55-9.96-12.63,4.32,2.7,7.65,7.65,12.42,9.22-.27-4.65-10.34-8.76-12.27-13.2,6.11.06,9.52,9.12,15.42,11.03-2.35-6.24-9.48-9.32-13.18-14.7,4.05-2.98,15.29,14.43,19.22,12.91ZM470.67,316.41c1.37-1.85-.53-4.09.42-6.11,3.18.56,1.77,5.08,4.61,6.25.6-1.87-.13-3.87,1.53-5.29,2.09,1.51.74,4.33,2.8,5.77,1.26-1.28.36-3.05,1.53-4.33,1.09.86.57,2.1.8,3.22.78,2.13,1.9,1.62,3.57.64.19,1.34-.48,5.91,2.1,3.71.22-.28.84-.23,1.27-.34-.46,2.31-1.84,4.27,1.69,3.84,3.1-.01-2.67,4.08,2.12,4.37.27.02.49.68.74,1.04-1.65,1.03,0,2.04-.03,3.03-.62,2.6,2.46,5.78-.7,6.94-2.96-6.84-3.06-14.44-10.52-18.28-10.71-6.07-21.44-1.79-28.66,6.35-3.88,3.62-11.31,4.78-14.77-.01,3.08-1.69,5.69,2.4,8.99,1.59-.33-3.31-3.95-3.84-5.75-6.14,3.06-2.25,6.31,2.39,9.61,2.28.36-3.24-3.21-4.03-4.71-6.34,3.22-1.91,5.77,2.84,8.91,3.11.69-3.21-3.01-3.89-3.44-6.65,3.15-.67,4.59,3.31,7.78,3.28.14-2.4-1.77-3.84-2.08-6.08,3.7-.39,3.92,4.44,7.44,4.1.67-2.3-1.6-3.71-1.23-5.97,3.69-.02,3.36,4.53,6,6.02ZM422.93,319.39c1.28-1.07,1.94-2.2.58-3.8-1.74-2.24,4.49.2,5.55-1.44,2.52-1.61-2.09-2.73-2.96-4.14,2.4-.58,6.35,2.18,7.6.49.1-1.75-2.17-2.74-2.8-4.3,2.94-1.19,4.84,2.55,7.55,1.58-.26-1.86-2.39-2.51-2.99-4.22,2.77-1.33,4.94,2.41,7.89,2.21.64-2.31-1.99-2.47-2.83-4.27,3.1-.59,4.99,2.69,8.12,2.35-.43-1.43-1.5-2.37-2.09-3.68,2.88-.36,4.78,3,7.75,2.83-.34-1.22-.74-2.43-1.18-3.62,2.91.23,4.32,3.51,7.16,3.9,0-1.23-.41-2.35-.84-3.48,1.78.47,2.96,1.73,4.16,3.05,2.87,1.29,3.88.26,6.17,2.96-14.71-.61-29.29,6.95-35.59,20.7-3.44.99-7.8-4.3-11.11-5.65-.85-.53-.86-.86-.12-1.47ZM373.55,395.72c-4.63-19.32,8.95-7.04,18.69-11.14,2.39-.87,2.66-2.9,2.55-5.14-1.45-6.99-20.73-3.34-23.38-10.53,7.01-1.74,23.87,11.21,24.17-2.93-.31-1.33-2.23-2.99-3.63-3.23-6.05-1.02-11.49-3.62-17.01-6-3.76-1.91-3.06-7.04-2.66-10.55.46-2.65,1.77-3.16,4.05-1.76,6.06,4.27,32.73,4.94,38.57,1.24-2.63-4.91-17.86-.65-23.45-1.91-30.62-3.71-13.15-16.73,4.8-22.73,8.36-2.56,16.23-7.25,24.52-8.04-1.8,3.07-7.09,1.7-8.66,5.13,6.1,2.01,10.96,5.84,15.9,9.71,15.83,16.34,30.24-4.46,49.94,7.49-4.34,2.01-9.34,3-14,4.19-5.26,1.69-11.88.09-16.29,3.61,6.23,4.63,24.32-1.77,32.09-3.08,4.67-1.37,4.66-1.51,5.88,3.21,2.73,10.57,5.62,21.09,8.08,31.72.36,7.45,8.41,23.52-3.52,24.75-18.48,1.39-111.51,15.21-116.66-4.05ZM532.44,820.25c.69,18.13-19.71,23.87-33.68,28.43-22.33,7.7-45.73,9.83-69.16,10.53-9.05-.44-52.07-2.65-52.05-13.7-.46-143.78-.47-287.54-1.08-431.29-.7-5.09,7.39,2.08,10.58-1.96-2.74-1.94-6.08-2.79-9.12-4.19,26.86,4.53,54.91,3.53,82.11.28,29.24-2.39,37.96-4.04,62.83-20.61,5.28-3.04,3.32-6.43-1.2-8.78,3.92-1.43,13.17.23,8.98,5.81-1.77,2.22-3.28,4.66-6.36,5.48-.94.25-1.75,1.42-2.3,2.36-.13.22,1.36,1.87,1.67,1.75,3.62-1.29,6.85-3.16,9.67-5.66-.75,48.81,0,97.88-.75,146.86.78,94.79-.67,189.69-.17,284.68ZM517.33,383.41c-1.92-1.65-.28-4.44-.62-6.65-2.84.28-4.69,3.25-7.34,4.15-3.17,1.33-1.65,5.91,1.48,5.38,1.36-.06,1.6,0,2.64.38-3.26,2.85-6.71,1.94-8.23-2.49-.79-1.75-2.92-2.82-3.29-4.87,3.66-.48,3.19,2.64,7.32-.95,1.97-.96,9.66-7.71,9.48-2.6-.42,2.49.49,5.77-1.44,7.65ZM519.08,386.34c1.06-1.38,1.56-3.04,2.68-4.37.59.84,1.64,1.49,1.35,2.65-1.36,1.29-2.38,1.47-4.04,1.73ZM521.46,374.3c2.71-2.54,6.01-4.26,9.12-6.26.47.49.64,1.08.42,1.45-1.7,3.59-5.38,8.03-9.54,4.81ZM508.46,371.8c-2.59,1.02-.78,2.57-1.22,4.62.03.95-1.1.68-1.38.45-.26-4.58-6.66-3.51-7.25-8.14,1.4-.08,2.51.61,3.47,1.58,4.84,3.41,10.02-3.99,14.56-5.65,6.33-3.43,11.37-7.88,17.29-11.04.57,5.15-20.59,14.37-25.48,18.18Z" />
        <path class="line-art"
          d="M382.53,843.41c-4.02.86-.92,3.5,1.4,4.61,15.24,2.55,34.66,13.06,49.39,7.38-8.21-3.96-18.63-1.88-27.43-4.73-7.87-2.08-15.41-5.46-23.36-7.26Z" />
        <path class="line-art"
          d="M396.49,415.04c4.86-.56,12.73,2.01,16.52-.74-1.92-2.16-4.9-1.15-7.69-1.66-2.73.47-15.96-2.72-14.82.7,1.57,1.89,3.83,1.64,5.99,1.71Z" />
        <path class="line-art"
          d="M515.05,399.39c2.09-1.43,4.51-1.95,5.17-4.56-.66-.28-1.49-.97-1.95-.77-2.45,1.4-6.51,2.15-7.89,4.65,1.33,1.77,2.75,1.68,4.67.69Z" />
        <path class="line-art"
          d="M443.41,853.48c-1.73-.35-2.21,1.28-3.35,2.18,3.17,1.92,7.53,1.01,10.56-.75-1.93-2.23-4.45-1.28-7.21-1.43Z" />
        <path class="line-art"
          d="M457.93,853.83c1.64.62,3.01,1.56,4.83.75,1.13-.13.79-1.56,1.21-2.4-2.55-.85-4.39-.61-6.03,1.66Z" />
        <path class="line-art"
          d="M505.43,403.23c1.19-.77.83-1.88,1.03-3.06-2.01-.31-3.89.93-4.26,2.95,1.18.33,2.11,1.19,3.22.1Z" />
        <path class="line-art"
          d="M424.75,330.86c-4.81-3.61-9.63-7.19-14.54-10.65-6.55-.83-15.6,5.2-22.49,6.97-17.14,10.63-2.76,15.04,9.54,15.15,4.19.24,34.44-4.84,27.49-11.47ZM416.85,334.12c-10.01-5.4-20.55-3.01-30.27,1.81-.74.26-1.71-.13-2.58-.22.85-2.96,4.2-3.49,6.49-5.05,4.44-1.87,8.69-3.38,12.83-5.17,4.11-1.76,14.01,3.23,13.54,8.63Z" />
        <path class="line-art"
          d="M486.06,372.86c-1.22-5.11-7.44-2.03-10.87-1.47-2.63.77-5.9.33-7.35,3.8-.29,32.59,20.75,25.04,18.22-2.34ZM479.31,377.94c8.12,8.55-4.64,26.3-6.19,8.07-.62-4.57.41-12.45,6.19-8.07Z" />
        <path class="line-art"
          d="M419.32,343.53c-3.42.47-3.56,4.56.23,4.24,1.76-.2,3.53-.33,5.53-.48,2.18-.34,3.54-.94,4.79-2.66-3.08-2.07-7.06-1.15-10.56-1.09Z" />
        <path class="line-art"
          d="M442.87,344.39c-.39-.46-.73-1.28-1.17-1.33-2.97.07-11-2.67-10.25,2.66,2.12,1.87,9.51.42,11.42-1.33Z" />
        <path class="line-art"
          d="M422.97,417.42c-5.77.37-11.56.43-17.34.48-7.44-.32-19.18-2.52-19.06,8.19-1.99,92.59-1.97,185.21-3.12,277.83-.71,40.24-.44,80.48-.08,120.73-.59,9.44,1.95,12.67,9.99,17.18,13.12,7.24,28.65,6.26,43.15,7.76,23.3,1.33,45.88-4.89,67.85-11.93,7.84-3.11,21.09-4.32,22.35-14.6-.12-132.51.26-264.97.22-397.44-.21-6.78-3.29-19.91-11.03-20.94,4.36-3.37,11.54-4.75,14.16-9.75-8.69,1.69-16.42,8.02-25.08,10.47-26.35,8.56-54.6,9.27-81.99,12.02ZM499.4,467.02h0c-.06.17-.13.31-.19.41-.12.21-.27.43-.43.64-.32.44-.78,1-1.34,1.65-1.13,1.31-2.74,3.1-4.66,5.18-3.75,4.06-8.73,9.3-13.68,14.53l-.39.41c-2.74,2.88-5.46,5.75-7.96,8.41,1.96-1.62,4.01-3.32,6.06-5.03l.16-.13c4.75-3.94,9.5-7.88,13.15-10.82,1.82-1.47,3.38-2.69,4.54-3.55.57-.42,1.08-.78,1.47-1.02.19-.12.4-.24.6-.33.1-.05.24-.1.41-.15.12-.03.49-.12.94,0,.5.14.91.5,1.11.99.16.4.13.75.1.91-.05.33-.18.61-.25.76-.17.34-.44.76-.74,1.18-.61.87-1.54,2.07-2.65,3.46-2.24,2.78-5.34,6.46-8.43,10.11-.44.52-.88,1.04-1.32,1.56-1.36,1.61-2.7,3.19-3.95,4.67.11-.09.23-.17.34-.26.15-.12.3-.23.45-.34,1.96-1.51,3.85-2.98,5.25-4,.74-.54,1.39-1,1.86-1.27.12-.07.26-.14.39-.2.1-.05.34-.15.64-.19.15-.02.47-.04.83.1.44.17.81.53.97,1.02.13.4.08.75.04.9-.04.18-.1.32-.14.41-.27.56-.81.89-1.39.92-.31.2-.74.5-1.29.9-1.36.99-3.22,2.43-5.19,3.96-.14.11-.29.22-.43.33-2.12,1.64-4.32,3.33-6.06,4.59-.87.63-1.65,1.17-2.27,1.55-.3.19-.61.36-.89.48-.14.06-.32.13-.52.18-.15.03-.59.13-1.09-.06-.75-.28-1.03-.94-1.07-1.39-.03-.35.05-.63.08-.73.08-.24.2-.46.28-.59.18-.31.45-.69.77-1.11.64-.86,1.59-2.04,2.73-3.42,1.96-2.38,4.53-5.41,7.17-8.53.44-.52.88-1.04,1.32-1.56,1.59-1.88,3.18-3.76,4.65-5.52-3.11,2.54-6.71,5.53-10.33,8.53l-.17.14c-4.69,3.89-9.39,7.79-13.02,10.73-1.84,1.48-3.42,2.73-4.6,3.61-.59.44-1.1.8-1.5,1.06-.2.13-.4.25-.6.35-.1.05-.22.1-.36.15-.11.04-.38.12-.71.1-.23-.01-.58-.08-.91-.33-.35-.26-.54-.61-.61-.93-.12-.5.02-.91.06-1.02h0c.1-.29.28-.56.39-.73.26-.39.67-.9,1.17-1.49,1-1.2,2.52-2.88,4.35-4.87,3.68-4,8.74-9.33,13.82-14.7l.38-.4c1.27-1.34,2.54-2.67,3.78-3.99-.45.4-.9.8-1.35,1.2-.73.65-1.46,1.3-2.19,1.95-5.47,4.87-10.95,9.74-15.11,13.29-2.08,1.77-3.85,3.23-5.12,4.2-.63.48-1.19.87-1.63,1.13-.2.11-.49.27-.82.36-.15.04-.49.11-.9.01-.54-.13-1.02-.52-1.22-1.12-.16-.48-.05-.88-.02-1.02.05-.19.12-.34.18-.45.11-.22.26-.46.41-.67.31-.44.75-1.01,1.29-1.65,1.08-1.3,2.64-3.06,4.49-5.1,3.21-3.54,7.37-8,11.6-12.54.65-.7,1.31-1.4,1.96-2.1,1.92-2.06,3.83-4.11,5.65-6.08-2.18,1.99-4.47,4.1-6.81,6.25-.91.84-1.82,1.68-2.74,2.52-5.85,5.38-11.75,10.77-16.37,14.79-2.31,2.01-4.32,3.7-5.86,4.88-.76.59-1.45,1.08-2,1.42-.28.17-.56.33-.84.44-.21.09-.68.27-1.23.21-.48-.06-1.08-.35-1.37-1.02-.21-.51-.12-.96-.08-1.12.09-.37.28-.7.41-.9.29-.47.76-1.08,1.33-1.77,1.16-1.41,2.92-3.38,5.07-5.71,3.68-4,8.57-9.15,13.66-14.5.86-.9,1.72-1.81,2.59-2.72,3.91-4.12,7.84-8.26,11.34-12.03-2.72,2.46-5.64,5.12-8.6,7.81-.65.59-1.3,1.19-1.96,1.78-6.28,5.71-12.56,11.42-17.3,15.6-2.36,2.09-4.36,3.81-5.78,4.96-.7.57-1.3,1.03-1.74,1.33-.2.13-.47.3-.75.41-.1.04-.44.17-.88.13-.26-.03-.63-.12-.97-.43-.34-.31-.48-.7-.53-.99-.07-.46.08-.84.12-.93h0c.06-.16.14-.3.2-.4.13-.21.29-.45.47-.7.37-.49.89-1.14,1.53-1.91,1.29-1.54,3.13-3.63,5.33-6.08,3.91-4.36,8.98-9.9,14.13-15.52.63-.69,1.27-1.39,1.9-2.08,2.52-2.75,5.02-5.48,7.38-8.08-2.8,2.6-5.78,5.38-8.77,8.17-.32.3-.65.6-.97.91-6.32,5.89-12.63,11.78-17.49,16.17-2.42,2.19-4.5,4.02-6.03,5.3-.76.63-1.42,1.15-1.93,1.51-.25.18-.5.34-.74.47-.12.06-.27.14-.45.19-.13.04-.52.16-.99.05-.4-.1-.84-.35-1.12-.82-.24-.42-.25-.82-.23-1.05.03-.43.21-.8.32-1.02.25-.49.66-1.08,1.14-1.73.99-1.31,2.52-3.12,4.39-5.24,3.75-4.24,8.97-9.86,14.25-15.51.69-.74,1.39-1.49,2.08-2.23,2.89-3.09,5.74-6.14,8.33-8.94-2.32,2.01-4.79,4.16-7.28,6.33l-.45.4c-5.17,4.51-10.36,9.03-14.26,12.29-1.95,1.63-3.6,2.97-4.78,3.84-.58.43-1.1.79-1.52,1.02-.17.09-.5.26-.88.32-.18.03-.65.08-1.14-.19-.62-.34-.84-.94-.87-1.37-.03-.41.11-.73.14-.82.06-.14.13-.26.18-.35.11-.19.25-.39.4-.58.3-.4.73-.91,1.24-1.51,1.04-1.2,2.51-2.83,4.26-4.72,2.57-2.79,5.77-6.19,9.12-9.75,1.21-1.29,2.45-2.6,3.68-3.91,3.04-3.24,6.06-6.47,8.72-9.36-2.68,2.3-5.63,4.88-8.59,7.47-1.16,1.02-2.32,2.04-3.47,3.05-3.6,3.16-7.05,6.2-9.87,8.62-1.85,1.6-3.45,2.94-4.63,3.88-.59.47-1.1.86-1.49,1.13-.2.13-.4.27-.59.37-.1.05-.23.11-.38.17-.1.04-.43.15-.84.09-.49-.06-.99-.35-1.27-.88-.22-.42-.2-.81-.18-.97.03-.34.16-.62.22-.76.15-.33.39-.74.66-1.15.55-.86,1.39-2.04,2.4-3.42,2.04-2.77,4.86-6.46,7.71-10.15.23-.3.46-.6.69-.9,1.34-1.75,2.68-3.48,3.92-5.11-1.47,1.27-2.87,2.47-3.96,3.35-.68.55-1.31,1.03-1.79,1.31-.12.07-.27.15-.42.22-.12.05-.38.16-.71.19-.34.03-1.2-.05-1.65-.9-.31-.61-.15-1.18-.11-1.3h0c.2-.7.83-1.15,1.52-1.17.27-.19.64-.48,1.11-.85,1.34-1.07,3.18-2.67,5.09-4.33.12-.1.24-.21.36-.31,1.78-1.54,3.57-3.1,4.97-4.25.74-.61,1.41-1.13,1.92-1.48.24-.16.53-.35.82-.47.12-.05.42-.17.81-.17.21,0,.55.05.9.26.37.24.6.58.71.92.12.39.07.72.04.85-.03.16-.08.3-.11.39-.07.19-.17.38-.26.54-.19.34-.45.75-.77,1.21-.63.93-1.54,2.18-2.61,3.63-1.98,2.66-4.57,6.03-7.19,9.43-.23.3-.46.6-.69.9-1.45,1.89-2.9,3.77-4.23,5.52,2.35-2.04,5.01-4.38,7.76-6.79,1.15-1.01,2.32-2.04,3.48-3.06,4.81-4.22,9.63-8.42,13.33-11.49,1.85-1.53,3.44-2.8,4.63-3.66.58-.42,1.12-.78,1.56-1.01.21-.11.48-.24.77-.32.15-.04.38-.09.66-.07.29.02.74.12,1.12.5.41.4.5.88.51,1.18,0,.29-.05.52-.1.66-.09.29-.23.56-.36.77-.26.44-.65.98-1.12,1.57-.94,1.21-2.34,2.83-4.02,4.72-3.37,3.79-7.97,8.72-12.6,13.65-1.24,1.32-2.47,2.63-3.69,3.92-.54.57-1.08,1.14-1.61,1.71,1.7-1.47,3.44-2.99,5.19-4.52l.47-.41c5.01-4.37,10.01-8.73,13.81-11.92,1.95-1.64,3.61-2.99,4.8-3.89.58-.44,1.11-.81,1.52-1.04.17-.1.47-.26.81-.34.15-.03.56-.12,1.04.07.27.1.55.29.75.57.2.27.28.56.31.78.05.36-.03.66-.07.8-.05.17-.12.32-.18.45-.12.24-.28.5-.45.75-.34.5-.83,1.13-1.42,1.85-1.19,1.44-2.88,3.36-4.89,5.58-3.49,3.86-8,8.68-12.58,13.58-.69.74-1.39,1.48-2.08,2.23-2.6,2.79-5.19,5.56-7.58,8.15,3.68-3.39,7.77-7.2,11.86-11.02.33-.3.65-.61.98-.91,5.99-5.59,11.93-11.13,16.58-15.36,2.45-2.23,4.55-4.1,6.12-5.43.78-.66,1.45-1.2,1.97-1.59.26-.19.51-.36.73-.5.11-.07.24-.14.39-.2.11-.05.37-.15.69-.17.37-.02,1.19.08,1.61.9.3.58.16,1.12.12,1.24h0c-.09.35-.28.67-.4.85-.28.44-.72,1.03-1.27,1.71-1.11,1.38-2.8,3.35-4.87,5.69-4.15,4.69-9.88,10.96-15.66,17.28-.63.69-1.27,1.39-1.9,2.08-2.57,2.81-5.12,5.59-7.51,8.21,2.9-2.62,5.98-5.42,9.07-8.23.65-.59,1.31-1.19,1.96-1.78,5.61-5.11,11.1-10.11,15.35-13.89,2.37-2.11,4.36-3.86,5.78-5.05.7-.59,1.29-1.06,1.73-1.37.2-.15.44-.31.66-.42.08-.04.33-.17.65-.21.16-.02.52-.05.93.14.49.23.79.65.9,1.09.16.63-.06,1.19-.14,1.4-.12.3-.29.61-.47.9-.37.6-.91,1.33-1.56,2.15-1.31,1.66-3.2,3.84-5.46,6.34-4.51,5.01-10.57,11.42-16.56,17.72-.87.91-1.73,1.82-2.59,2.72-2.89,3.04-5.71,6.01-8.28,8.73,3.44-3.09,7.22-6.55,10.99-10.02.91-.84,1.83-1.68,2.74-2.51,4.91-4.51,9.67-8.88,13.47-12.29,2.26-2.01,4.2-3.71,5.65-4.89.72-.59,1.35-1.08,1.85-1.42.25-.17.5-.33.74-.45.12-.06.27-.13.44-.18.14-.04.44-.13.81-.08.39.04.91.24,1.26.77.3.46.29.92.26,1.14-.05.42-.23.78-.33.96-.24.44-.62.98-1.07,1.57-.92,1.2-2.35,2.87-4.09,4.83-3.49,3.94-8.35,9.17-13.24,14.42-.66.7-1.31,1.41-1.96,2.11-1.9,2.04-3.78,4.06-5.57,5.98,2.52-2.22,5.2-4.61,7.88-7,.73-.65,1.46-1.3,2.19-1.95,4.71-4.2,9.3-8.29,12.87-11.39,2.06-1.79,3.8-3.27,5.05-4.26.61-.49,1.15-.89,1.55-1.15.18-.12.44-.27.7-.37.1-.04.42-.16.83-.12.23.02.58.1.9.36.34.27.51.62.58.93.11.49-.03.88-.07.99Z" />
      </g>
    </svg>
    <script>setTimeout(() => location.reload(), 10000)</script>
  </body>
</html>



================================================
FILE: public/robots.txt
================================================
# See https://www.robotstxt.org/robotstxt.html for documentation on how to use the robots.txt file



================================================
FILE: script/admin/create-vapid-key
================================================
#!/usr/bin/env ruby
require File.expand_path("../../config/environment", File.dirname(__FILE__))

vapid_key = WebPush.generate_key

puts "PRIVATE KEY : #{vapid_key.private_key}"
puts "PUBLIC KEY  : #{vapid_key.public_key}"



================================================
FILE: script/admin/prepare-backup
================================================
#!/usr/bin/env ruby
require File.expand_path("../../config/environment", File.dirname(__FILE__))

class Backup
  class << self
    def create
      dest = SQLite3::Database.new(backup_filename)
      backup = SQLite3::Backup.new(dest, "main", Room.connection.raw_connection, "main")

      backup.step(-1)
      backup.finish
      dest.close
    end

    private
      def backup_filename
        Rails.root.join("storage", "backups").tap(&:mkpath).join(primary_database_filename)
      end

      def primary_database_filename
        path = Rails.application.config.database_configuration[Rails.env]["primary"]["database"]
        File.basename(path)
      end
  end
end

Backup.create



================================================
FILE: script/admin/reset-password
================================================
#!/usr/bin/env ruby
require File.expand_path("../../config/environment", File.dirname(__FILE__))

abort "Usage: #{$0} <email-address> <password>" unless ARGV.length == 2

email_address, password = ARGV
if user = User.find_by(email_address: email_address)
  user.update!(password: password)
  puts "Password has been reset"
else
  puts "User not found"
  exit -1
end



================================================
FILE: script/dev/flood-room
================================================
#!/usr/bin/env ruby
require File.expand_path("../../config/environment", File.dirname(__FILE__))
require "optparse"

# Sample usage: script/flood-room --room 16384 --count 100

def parse_options!
  options = {}

  parser = OptionParser.new do |opts|
    opts.banner = "Usage: ruby script/development/flood_topic.rb [options]"

    opts.on "--room ROOM-ID", Integer, "Room ID to flood" do |room_id|
      options[:room_id] = room_id
    end

    opts.on "--count COUNT", Integer, "Number of messages to send" do |count|
      options[:count] = count
    end

    opts.on "--sleep SECONDS", Float, "How long to sleep between messages" do |sleep_interval|
      options[:sleep] = sleep_interval
    end

    opts.on "-h", "--help", "Prints this help" do
      puts opts
      exit
    end
  end.tap(&:parse!)

  if options[:room_id].blank?
    warn(parser.help)
    exit(1)
  else
    options
  end
end

options = parse_options!

words = %w[
  tacit watch store rinse bead rich idea raise draconian well-made interesting root
  groan cows wine copper puffy tip fill spurious precede scorch lunch place
  title mute wait relax gainful rabid preach freezing scandalous nebulous remain coast
]

room = Room.find options[:room_id]
users = room.users

count = options[:count] || 20
sleep_interval = options[:sleep] || 0

count.times do |n|
  sentence = words.sample(rand(20) + 1).join(" ")
  creator = users.sample
  message_params = { room: room, client_message_id: Random.uuid, body: "%04d #{sentence}" % n, creator: creator }

  message = Message.create! message_params
  message.broadcast_append_to room, :messages, target: [ room, :messages ]

  puts n if n > 0 && n % 10 == 0
  sleep sleep_interval
end

puts "done"



================================================
FILE: script/dev/populate
================================================
#!/usr/bin/env ruby
require File.expand_path("../../config/environment", File.dirname(__FILE__))
require "optparse"
require "faker"

# Sample usage: script/populate --rooms 100 --users 100 --messages 100

PASSWORD_DIGEST = BCrypt::Password.create("secret123456", cost: BCrypt::Engine::MIN_COST)

def create_user
  User.insert({ name: Faker::Name.name, email_address: Faker::Internet.email, password_digest: PASSWORD_DIGEST })
end

def create_room(room_id:, creator_id:)
  Room.insert({
    id: room_id, type: "Rooms::Open", creator_id: creator_id,
    name: "#{Faker::Creature::Animal.name.capitalize} #{Faker::Game.title}"
  })
end

def create_memberships(room_id:, user_ids:)
  Membership.insert_all(user_ids.collect { |user_id| { user_id: user_id, room_id: room_id } })
end

def create_message(message_id:, room_id:, creator_id:)
  Message.insert({ id: message_id, room_id: room_id, creator_id: creator_id, client_message_id: SecureRandom.alphanumeric(12) })
  ActionText::RichText.insert({ name: "body", record_type: "Message", record_id: message_id, body: "<div>#{Faker::Lorem.words(number: 10).join(" ")}</div>" })
end


def parse_options!
  options = {}

  parser = OptionParser.new do |opts|
    opts.banner = "Usage: ruby script/dev/populate.rb [options]"

    opts.on("--users COUNT", Integer, "Number of users") { |c| options[:user_count] = c }
    opts.on("--rooms COUNT", Integer, "Number of rooms (default: 100)") { |c| options[:room_count] = c }
    opts.on("--messages COUNT", Integer, "Number of messages per room (default: 100)") { |c| options[:message_count] = c }

    opts.on "-h", "--help", "Prints this help" do
      puts opts
      exit
    end
  end.tap(&:parse!)

  if options[:user_count].blank?
    warn(parser.help)
    exit(1)
  else
    options
  end
end

options = parse_options!

print "This will reset the database and repopulate it. Are you sure? [y/n] "
if gets.chomp == "y"
  puts "Resetting development DB"
  `RAILS_ENV=development ./bin/rails db:reset`

  puts "\nCreating first run (so you can login as king@example.com/secret123456)"
  FirstRun.create! name: "King of The Hill", email_address: "king@example.com", password: "secret123456"

  user_count    = options[:user_count]
  room_count    = options[:room_count] || 100
  message_count = options[:message_count] || 100

  puts "\nCreating #{user_count} users"

  user_count.times do |n|
    create_user
    print "."
  end

  puts "\n\nCreating #{room_count} rooms with #{message_count} messages"

  user_ids = User.pluck(:id)

  room_counter = message_counter = 0

  room_count.times do |n|
    room_counter += 1

    create_room(room_id: room_counter, creator_id: user_ids.sample)
    create_memberships(room_id: room_counter, user_ids: user_ids)
    print "."

    message_count.times do |n|
      message_counter += 1
      create_message(message_id: message_counter, room_id: room_counter, creator_id: user_ids.sample)

      print "."
    end
  end

  puts "\n\nRestarting server"
  `./bin/rails restart`

  puts "Done!"
else
  puts "Nevermind then!"
end



================================================
FILE: test/application_system_test_case.rb
================================================
require "test_helper"

WebMock.disable!

class ApplicationSystemTestCase < ActionDispatch::SystemTestCase
  driven_by :selenium, using: :headless_chrome, screen_size: [ 1400, 1400 ]

  include SystemTestHelper
end



================================================
FILE: test/test_helper.rb
================================================
ENV["RAILS_ENV"] ||= "test"
require_relative "../config/environment"

require "rails/test_help"
require "minitest/unit"
require "mocha/minitest"
require "webmock/minitest"

WebMock.enable!

class ActiveSupport::TestCase
  include ActiveJob::TestHelper

  parallelize(workers: :number_of_processors)

  # Setup all fixtures in test/fixtures/*.yml for all tests in alphabetical order.
  fixtures :all

  include SessionTestHelper, MentionTestHelper, TurboTestHelper

  setup do
    ActionCable.server.pubsub.clear

    Rails.configuration.tap do |config|
      config.x.web_push_pool.shutdown
      config.x.web_push_pool = WebPush::Pool.new \
        invalid_subscription_handler: config.x.web_push_pool.invalid_subscription_handler
    end

    WebMock.disable_net_connect!
  end

  teardown do
    WebMock.reset!
  end
end



================================================
FILE: test/channels/presence_channel_test.rb
================================================
require "test_helper"

class PresenceChannelTest < ActionCable::Channel::TestCase
  setup do
    stub_connection(current_user: users(:david))
  end

  test "subscribes" do
    room = users(:david).rooms.first

    subscribe room_id: room.id

    assert subscription.confirmed?
    assert_has_stream_for room
  end

  test "rejects subscription to a room that the user is not a member of" do
    subscribe room_id: Rooms::Closed.create!(name: "New Room", creator: users(:david)).id

    assert subscription.rejected?
  end

  test "rejects subscription to non-existent room" do
    subscribe room_id: -1

    assert subscription.rejected?
  end

  test "rejects subscription without a room" do
    subscribe room_id: -1

    assert subscription.rejected?
  end

  test "subscribing marks the membership as connected" do
    membership = users(:david).memberships.first

    assert_changes -> { membership.reload.connected? }, from: false, to: true do
      subscribe room_id: membership.room_id
    end
  end

  test "unsubscribing marks the membership as disconnected" do
    membership = users(:david).memberships.first
    subscribe room_id: membership.room_id

    assert_changes -> { membership.reload.connected? }, from: true, to: false do
      unsubscribe
    end
  end
end



================================================
FILE: test/channels/application_cable/connection_test.rb
================================================
require "test_helper"

class ApplicationCable::ConnectionTest < ActionCable::Connection::TestCase
  test "connects with valid user_id cookie" do
    cookies.signed[:session_token] = sessions(:david_safari).token

    connect

    assert_equal users(:david), connection.current_user
  end

  test "rejects connection with missing user_id cookie" do
    assert_reject_connection { connect }
  end

  test "rejects connection with invalid user_id cookie" do
    cookies.signed[:session_token] = -1

    assert_reject_connection { connect }
  end
end



================================================
FILE: test/controllers/accounts_controller_test.rb
================================================
require "test_helper"

class AccountsControllerTest < ActionDispatch::IntegrationTest
  setup do
    sign_in :david
  end

  test "edit" do
    get edit_account_url
    assert_response :ok
  end

  test "update" do
    assert users(:david).administrator?

    put account_url, params: { account: { name: "Different" } }

    assert_redirected_to edit_account_url
    assert_equal accounts(:signal).name, "Different"
  end

  test "non-admins cannot update" do
    sign_in :kevin
    assert users(:kevin).member?

    put account_url, params: { account: { name: "Different" } }
    assert_response :forbidden
  end
end



================================================
FILE: test/controllers/first_runs_controller_test.rb
================================================
require "test_helper"

class FirstRunsControllerTest < ActionDispatch::IntegrationTest
  setup do
    Account.destroy_all
    User.destroy_all
    Room.destroy_all
  end

  test "new is permitted when no other users exit" do
    get first_run_url
    assert_response :success
  end

  test "new is not permitted when account exist" do
    Account.create!(name: "Chat")

    get first_run_url
    assert_redirected_to root_url
  end

  test "create" do
    assert_difference -> { Room.count }, 1 do
      assert_difference -> { User.count }, 1 do
        post first_run_url, params: { account: { name: "37signals" }, user: { name: "New Person", email_address: "new@37signals.com", password: "secret123456" } }
      end
    end

    assert_redirected_to root_url

    assert parsed_cookies.signed[:session_token]
  end
end



================================================
FILE: test/controllers/messages_controller_test.rb
================================================
require "test_helper"

class MessagesControllerTest < ActionDispatch::IntegrationTest
  setup do
    host! "once.campfire.test"

    sign_in :david
    @room = rooms(:watercooler)
    @messages = @room.messages.ordered.to_a
  end

  test "index returns the last page by default" do
    get room_messages_url(@room)

    assert_response :success
    ensure_messages_present @messages.last
  end

  test "index returns a page before the specified message" do
    get room_messages_url(@room, before: @messages.third)

    assert_response :success
    ensure_messages_present @messages.first, @messages.second
    ensure_messages_not_present @messages.third, @messages.fourth, @messages.fifth
  end

  test "index returns a page after the specified message" do
    get room_messages_url(@room, after: @messages.third)

    assert_response :success
    ensure_messages_present @messages.fourth, @messages.fifth
    ensure_messages_not_present @messages.first, @messages.second, @messages.third
  end

  test "index returns no_content when there are no messages" do
    @room.messages.destroy_all

    get room_messages_url(@room)

    assert_response :no_content
  end

  test "get renders a single message belonging to the user" do
    message = @room.messages.where(creator: users(:david)).first

    get room_message_url(@room, message)

    assert_response :success
  end

  test "creating a message broadcasts the message to the room" do
    post room_messages_url(@room, format: :turbo_stream), params: { message: { body: "New one", client_message_id: 999 } }

    assert_rendered_turbo_stream_broadcast @room, :messages, action: "append", target: [ @room, :messages ] do
      assert_select ".message__body", text: /New one/
      assert_copy_link_button room_at_message_url(@room, Message.last, host: "once.campfire.test")
    end
  end

  test "creating a message broadcasts unread room" do
    assert_broadcasts "unread_rooms", 1 do
      post room_messages_url(@room, format: :turbo_stream), params: { message: { body: "New one", client_message_id: 999 } }
    end
  end

  test "update updates a message belonging to the user" do
    message = @room.messages.where(creator: users(:david)).first

    Turbo::StreamsChannel.expects(:broadcast_replace_to).once
    put room_message_url(@room, message), params: { message: { body: "Updated body" } }

    assert_redirected_to room_message_url(@room, message)
    assert_equal "Updated body", message.reload.plain_text_body
  end

  test "admin updates a message belonging to another user" do
    message = @room.messages.where(creator: users(:jason)).first

    Turbo::StreamsChannel.expects(:broadcast_replace_to).once
    put room_message_url(@room, message), params: { message: { body: "Updated body" } }

    assert_redirected_to room_message_url(@room, message)
    assert_equal "Updated body", message.reload.plain_text_body
  end

  test "destroy destroys a message belonging to the user" do
    message = @room.messages.where(creator: users(:david)).first

    assert_difference -> { Message.count }, -1 do
      Turbo::StreamsChannel.expects(:broadcast_remove_to).once
      delete room_message_url(@room, message, format: :turbo_stream)
      assert_response :success
    end
  end

  test "admin destroy destroys a message belonging to another user" do
    assert users(:david).administrator?
    message = @room.messages.where(creator: users(:jason)).first

    assert_difference -> { Message.count }, -1 do
      Turbo::StreamsChannel.expects(:broadcast_remove_to).once
      delete room_message_url(@room, message, format: :turbo_stream)
      assert_response :success
    end
  end

  test "ensure non-admin can't update a message belonging to another user" do
    sign_in :jz
    assert_not users(:jz).administrator?

    room = rooms(:designers)
    message = room.messages.where(creator: users(:jason)).first

    put room_message_url(room, message), params: { message: { body: "Updated body" } }
    assert_response :forbidden
  end

  test "ensure non-admin can't destroy a message belonging to another user" do
    sign_in :jz
    assert_not users(:jz).administrator?

    room = rooms(:designers)
    message = room.messages.where(creator: users(:jason)).first

    delete room_message_url(room, message, format: :turbo_stream)
    assert_response :forbidden
  end

  test "mentioning a bot triggers a webhook" do
    WebMock.stub_request(:post, webhooks(:bender).url).to_return(status: 200)

    assert_enqueued_jobs 1, only: Bot::WebhookJob do
      post room_messages_url(@room, format: :turbo_stream), params: { message: {
        body: "<div>Hey #{mention_attachment_for(:bender)}</div>", client_message_id: 999 } }
    end
  end

  private
    def ensure_messages_present(*messages, count: 1)
      messages.each do |message|
        assert_select "#" + dom_id(message), count:
      end
    end

    def ensure_messages_not_present(*messages)
      ensure_messages_present *messages, count: 0
    end

    def assert_copy_link_button(url)
      assert_select ".btn[title='Copy link'][data-copy-to-clipboard-content-value='#{url}']"
    end
end



================================================
FILE: test/controllers/qr_code_controller_test.rb
================================================
require "test_helper"

class QrCodeControllerTest < ActionDispatch::IntegrationTest
  test "show renders a QR code as a cacheable SVG image" do
    id = Base64.urlsafe_encode64("http://example.com")

    get qr_code_path(id)

    assert_response :success
    assert_includes response.content_type, "image/svg+xml"

    assert_equal 1.year, response.cache_control[:max_age].to_i
    assert response.cache_control[:public]
  end
end



================================================
FILE: test/controllers/rooms_controller_test.rb
================================================
require "test_helper"

class RoomsControllerTest < ActionDispatch::IntegrationTest
  setup do
    sign_in :david
  end

  test "index redirects to the user's last room" do
    get rooms_url
    assert_redirected_to room_url(users(:david).rooms.last)
  end

  test "show" do
    get room_url(users(:david).rooms.last)
    assert_response :success
  end

  test "shows records the last room visited in a cookie" do
    get room_url(users(:david).rooms.last)
    assert response.cookies[:last_room] = users(:david).rooms.last.id
  end

  test "destroy" do
    assert_turbo_stream_broadcasts :rooms, count: 1 do
      assert_difference -> { Room.count }, -1 do
        delete room_url(rooms(:designers))
      end
    end
  end

  test "destroy only allowed for creators or those who can administer" do
    sign_in :jz

    assert_no_difference -> { Room.count } do
      delete room_url(rooms(:designers))
      assert_response :forbidden
    end

    rooms(:designers).update! creator: users(:jz)

    assert_difference -> { Room.count }, -1 do
      delete room_url(rooms(:designers))
    end
  end
end



================================================
FILE: test/controllers/searches_controller_test.rb
================================================
require "test_helper"

class SearchesControllerTest < ActionDispatch::IntegrationTest
  setup do
    sign_in :david
    @message = rooms(:designers).messages.create! body: "Hello world!", client_message_id: "search", creator: users(:david)
  end

  test "index initial view" do
    get searches_url

    assert_response :success
    assert_select ".message", count: 0
  end

  test "finding reachable messages" do
    get searches_url, params: { q: "hello" }

    assert_response :success
    assert_select ".message", text: /Hello world!/
  end

  test "unreachable messages are not found" do
    memberships(:david_designers).destroy!

    get searches_url, params: { q: "hello" }

    assert_response :success
    assert_select ".message", count: 0
  end

  test "create saves the search term" do
    assert_difference -> { users(:david).searches.count }, +1 do
      post searches_url, params: { q: "hello" }
    end

    assert_redirected_to searches_url(q: "hello")
    assert users(:david).searches.exists?(query: "hello")
  end

  test "clear search history" do
    assert users(:david).searches.any?

    delete clear_searches_url

    assert users(:david).searches.none?
  end
end



================================================
FILE: test/controllers/sessions_controller_test.rb
================================================
require "test_helper"

class SessionsControllerTest < ActionDispatch::IntegrationTest
  ALLOWED_BROWSER    = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.2 Safari/605.1.15"
  DISALLOWED_BROWSER = "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/114.0"

  test "new" do
    get new_session_url
    assert_response :success
  end

  test "new redirects to first run when no users exist" do
    User.destroy_all

    get new_session_url

    assert_redirected_to first_run_url
  end

  test "new denied with incompatible browser" do
    get new_session_url, env: { "HTTP_USER_AGENT" => DISALLOWED_BROWSER }
    assert_select "h1", /Upgrade to a supported web browser/
  end

  test "new allowed with compatible browser" do
    get new_session_url, env: { "HTTP_USER_AGENT" => ALLOWED_BROWSER }
    assert_select "h1", text: /Upgrade to a supported web browser/, count: 0
  end

  test "create with valid credentials" do
    post session_url, params: { email_address: "david@37signals.com", password: "secret123456" }

    assert_redirected_to root_url
    assert parsed_cookies.signed[:session_token]
  end

  test "create with invalid credentials" do
    post session_url, params: { email_address: "david@37signals.com", password: "wrong" }

    assert_response :unauthorized
    assert_nil parsed_cookies.signed[:session_token]
  end

  test "destroy" do
    sign_in :david

    delete session_url

    assert_redirected_to root_url
    assert_not cookies[:session_token].present?
  end

  test "destroy removes the push subscription for the device" do
    sign_in :david

    assert_difference -> { users(:david).push_subscriptions.count }, -1 do
      delete session_url, params: { push_subscription_endpoint: push_subscriptions(:david_chrome).endpoint }
    end

    assert_redirected_to root_url
    assert_not cookies[:session_token].present?
  end
end



================================================
FILE: test/controllers/unfurl_links_controller_test.rb
================================================
require "test_helper"

class UnfurlLinksControllerTest < ActionDispatch::IntegrationTest
  setup do
    sign_in :david
  end

  test "create" do
    stub_successful_request

    post unfurl_link_url, params: { url: "https://www.example.com" }
    assert_response :success

    json_response = JSON.parse(response.body)
    assert_equal "Hey!", json_response["title"]
    assert_equal "https://example.com", json_response["url"]
    assert_equal "https://example.com/image.png", json_response["image"]
    assert_equal "desc..", json_response["description"]
  end

  test "create with missing opengraph meta tags" do
    WebMock.stub_request(:get, "https://www.example.com/").to_return(status: 200, body: "<html><head></head></html>", headers: {})

    post unfurl_link_url, params: { url: "https://www.example.com" }
    assert_response :no_content
  end

  test "create with a missing URL" do
    assert_raise ActionController::ParameterMissing do
      post unfurl_link_url, params: { url: "" }
      assert_response :bad_request
    end
  end

  test "create for twitter.com" do
    stub_successful_request url: "https://fxtwitter.com/dhh/status/834146806594433025"

    post unfurl_link_url, params: { url: "https://twitter.com/dhh/status/834146806594433025" }
    assert_response :success
    assert_equal "Hey!", JSON.parse(response.body)["title"]
  end

  test "create for x.com" do
    stub_successful_request url: "https://fxtwitter.com/dhh/status/834146806594433025"

    post unfurl_link_url, params: { url: "https://x.com/dhh/status/834146806594433025" }
    assert_response :success
    assert_equal "Hey!", JSON.parse(response.body)["title"]
  end

  private
    def stub_successful_request(url: "https://www.example.com/")
      WebMock.stub_request(:get, url).to_return(
        status: 200,
        body: "<html><head><meta property=\"og:url\" content=\"https://example.com\"><meta property=\"og:title\" content=\"Hey!\"><meta property=\"og:description\" content=\"desc..\"><meta property=\"og:image\" content=\"https://example.com/image.png\"></head></html>",
        headers: { content_type: "text/html" }
      )

      WebMock.stub_request(:head, "https://example.com/image.png").to_return(
        status: 200,
        headers: { content_type: "image/png" }
      )
    end
end



================================================
FILE: test/controllers/users_controller_test.rb
================================================
require "test_helper"

class UsersControllerTest < ActionDispatch::IntegrationTest
  setup do
    @join_code = accounts(:signal).join_code
  end

  test "show" do
    sign_in :david
    get user_url(users(:david))
    assert_response :ok
  end

  test "new" do
    get join_url(@join_code)
    assert_response :success
  end

  test "new does not allow a signed in user" do
    sign_in :david

    get join_url(@join_code)
    assert_redirected_to root_url
  end

  test "new requires a join code" do
    get join_url("not")
    assert_response :not_found
  end

  test "create" do
    assert_difference -> { User.count }, 1 do
      post join_url(@join_code), params: { user: { name: "New Person", email_address: "new@37signals.com", password: "secret123456" } }
    end

    assert_redirected_to root_url

    user = User.last
    assert_equal user.id, Session.find_by(token: parsed_cookies.signed[:session_token]).user.id
    assert_equal Rooms::Open.all, user.rooms
  end

  test "creating a new user with an existing email address will redirect to login screen" do
    assert_no_difference -> { User.count } do
      post join_url(@join_code), params: { user: { name: "Another David", email_address: users(:david).email_address, password: "secret123456" } }
    end

    assert_redirected_to new_session_url(email_address: users(:david).email_address)
  end
end



================================================
FILE: test/controllers/welcome_controller_test.rb
================================================
require "test_helper"

class WelcomeControllerTest < ActionDispatch::IntegrationTest
  setup do
    sign_in :david
  end

  test "redirects to the first created visible room the user has access to" do
    get root_url

    assert_redirected_to room_url(users(:david).rooms.original)
  end

  test "redirects to the last room visited, if we have one" do
    cookies[:last_room] = rooms(:watercooler).id

    get root_url

    assert_redirected_to room_url(rooms(:watercooler))
  end
end



================================================
FILE: test/controllers/.keep
================================================
[Empty file]


================================================
FILE: test/controllers/accounts/bots_controller_test.rb
================================================
require "test_helper"

class Accounts::BotsControllerTest < ActionDispatch::IntegrationTest
  setup do
    sign_in :david
  end

  test "index" do
    get account_bots_url
    assert_response :ok
  end

  test "create" do
    get new_account_bot_url
    assert_response :ok

    post account_bots_url, params: { user: { name: "Bender's Friend" } }
    assert_redirected_to account_bots_url
    assert_equal "Bender's Friend", User.bot.last.name
  end

  test "update" do
    get edit_account_bot_url(users(:bender))
    assert_response :ok

    put account_bot_url(users(:bender)), params: { user: { name: "Bender's New Friend" } }
    assert_redirected_to account_bots_url
    assert_equal "Bender's New Friend", users(:bender).reload.name
  end

  test "destroy" do
    assert_difference -> { User.active_bots.count }, -1 do
      delete account_bot_url(users(:bender))
    end

    assert users(:bender).reload.deactivated?
  end

  test "remove webhook" do
    assert_difference -> { Webhook.count }, -1 do
      put account_bot_url(users(:bender)), params: { user: { name: "Bender's New Friend", webook_url: "" } }
      assert_redirected_to account_bots_url
    end
  end
end



================================================
FILE: test/controllers/accounts/custom_styles_controller_test.rb
================================================
require "test_helper"

class Accounts::CustomStylesControllerTest < ActionDispatch::IntegrationTest
  setup do
    sign_in :david
  end

  test "edit" do
    get edit_account_custom_styles_url
    assert_response :ok
  end

  test "update" do
    assert users(:david).administrator?

    put account_custom_styles_url, params: { account: { custom_styles: ":root { --color-text: red; }" } }

    assert_redirected_to edit_account_custom_styles_url
    assert_equal accounts(:signal).custom_styles, ":root { --color-text: red; }"
  end

  test "non-admins cannot update" do
    sign_in :kevin
    assert users(:kevin).member?

    put account_custom_styles_url, params: { account: { custom_styles: ":root { --color-text: red; }" } }
    assert_response :forbidden
  end
end



================================================
FILE: test/controllers/accounts/join_codes_controller_test.rb
================================================
require "test_helper"

class Accounts::JoinCodesControllerTest < ActionDispatch::IntegrationTest
  setup do
    sign_in :david
  end

  test "create new join code" do
    assert_changes -> { accounts(:signal).reload.join_code } do
      post account_join_code_url
      assert_redirected_to edit_account_url
    end
  end

  test "only administrators can create new join codes" do
    sign_in :jz
    post account_join_code_url
    assert_response :forbidden
  end
end



================================================
FILE: test/controllers/accounts/logos_controller_test.rb
================================================
require "test_helper"
require "vips"

class Accounts::LogosControllerTest < ActionDispatch::IntegrationTest
  setup do
    sign_in :david
  end

  test "show stock" do
    get account_logo_url
    assert_valid_png_response size: 512
  end

  test "show stock small size" do
    get account_logo_url(size: :small)
    assert_valid_png_response size: 192
  end

  test "show custom" do
    accounts(:signal).update! logo: fixture_file_upload("moon.jpg", "image/jpeg")

    get account_logo_url
    assert_valid_png_response size: 512
  end

  test "show custom small size" do
    accounts(:signal).update! logo: fixture_file_upload("moon.jpg", "image/jpeg")

    get account_logo_url(size: :small)
    assert_valid_png_response size: 192
  end

  test "destroy" do
    accounts(:signal).update! logo: fixture_file_upload("moon.jpg", "image/jpeg")

    delete account_logo_url
    assert_redirected_to edit_account_url
    assert_not accounts(:signal).reload.logo.attached?
  end

  private
    def assert_valid_png_response(size:)
      assert_equal @response.headers["content-type"], "image/png"

      image = ::Vips::Image.new_from_buffer(@response.body, "")
      assert_equal size, image.width
      assert_equal size, image.height
    end
end



================================================
FILE: test/controllers/accounts/users_controller_test.rb
================================================
require "test_helper"

class Accounts::UsersControllerTest < ActionDispatch::IntegrationTest
  setup do
    sign_in :david
  end

  test "update" do
    assert users(:david).administrator?

    put account_user_url(users(:david)), params: { user: { role: "administrator" } }

    assert_redirected_to edit_account_url
    assert users(:david).reload.administrator?
  end

  test "destroy" do
    assert_difference -> { User.active.count }, -1 do
      delete account_user_url(users(:david))
    end

    assert_redirected_to edit_account_url
    assert_nil User.active.find_by(id: users(:david).id)
  end

  test "non-admins cannot perform actions" do
    sign_in :kevin

    put account_user_url(users(:david)), params: { user: { role: "administrator" } }
    assert_response :forbidden

    delete account_user_url(users(:david))
    assert_response :forbidden
  end
end



================================================
FILE: test/controllers/accounts/bots/keys_controller_test.rb
================================================
require "test_helper"

class Accounts::Bots::KeysControllerTest < ActionDispatch::IntegrationTest
  setup do
    sign_in :david
  end

  test "update" do
    assert_changes -> { users(:bender).reload.bot_token } do
      put account_bot_key_url(users(:bender))
      assert_redirected_to account_bots_url
    end
  end
end



================================================
FILE: test/controllers/autocompletable/users_controller_test.rb
================================================
require "test_helper"

class Autocompletable::UsersControllerTest < ActionDispatch::IntegrationTest
  setup do
    sign_in :david
  end

  test "search returns matching users" do
    get autocompletable_users_url(format: :json), params: { query: "da" }

    assert_response :success
    assert_equal "David", response.parsed_body.first["name"]
  end

  test "search results escape HTML in names" do
    users(:david).update!(name: "David <script>alert(123)</script>")

    get autocompletable_users_url(format: :json), params: { query: "da" }

    assert_response :success
    assert_equal "David &lt;script&gt;alert(123)&lt;/script&gt;", response.parsed_body.first["name"]
  end

  test "room search returns matching users" do
    get autocompletable_users_url(room_id: rooms(:hq).id, format: :json), params: { query: "da" }

    assert_response :success
    assert_equal "David", response.parsed_body.first["name"]
  end

  test "room search is scoped by membership" do
    sign_in :kevin

    assert_not_includes users(:kevin).rooms, rooms(:watercooler)

    assert_raises ActiveRecord::RecordNotFound do
      get autocompletable_users_url(room_id: rooms(:watercooler).id, format: :json), params: { query: "da" }
    end
  end
end



================================================
FILE: test/controllers/messages/boosts_controller_test.rb
================================================
require "test_helper"

class Messages::BoostsControllerTest < ActionDispatch::IntegrationTest
  setup do
    sign_in :david
    @message = messages(:first)
  end

  test "create" do
    assert_turbo_stream_broadcasts [ @message.room, :messages ], count: 1 do
      assert_difference -> { @message.boosts.count }, 1 do
        post message_boosts_url(@message, format: :turbo_stream), params: { boost: { content: "Morning!" } }
        assert_redirected_to message_boosts_url(@message)
      end
    end
  end

  test "destroy" do
    assert_turbo_stream_broadcasts [ @message.room, :messages ], count: 1 do
      assert_difference -> { @message.boosts.count }, -1 do
        delete message_boost_url(@message, boosts(:first), format: :turbo_stream)
        assert_response :success
      end
    end
  end
end



================================================
FILE: test/controllers/messages/by_bots_controller_test.rb
================================================
require "test_helper"

class Messages::ByBotsControlleTest < ActionDispatch::IntegrationTest
  setup do
    @room = rooms(:watercooler)
  end

  test "create" do
    assert_difference -> { Message.count }, +1 do
      post room_bot_messages_url(@room, users(:bender).bot_key), params: +"Hello Bot World!"
      assert_equal "Hello Bot World!", Message.last.plain_text_body
    end
  end

  test "create with UTF-8 content" do
    assert_difference -> { Message.count }, +1 do
      post room_bot_messages_url(@room, users(:bender).bot_key), params: +"Hello 👋!"
      assert_equal "Hello 👋!", Message.last.plain_text_body
    end
  end

  test "create file" do
    assert_difference -> { Message.count }, +1 do
      post room_bot_messages_url(@room, users(:bender).bot_key), params: { attachment: fixture_file_upload("moon.jpg", "image/jpeg") }
      assert Message.last.attachment.present?
    end
  end

  test "create does not trigger a webhook to the sending bot if it mentions itself" do
    body = "<div>Hey #{mention_attachment_for(:bender)}</div>"

    assert_no_enqueued_jobs only: Bot::WebhookJob do
      post room_bot_messages_url(@room, users(:bender).bot_key), params: body
    end
  end

  test "create does not trigger a webhook to the sending bot in a direct room" do
    assert_no_enqueued_jobs only: Bot::WebhookJob do
      post room_bot_messages_url(rooms(:bender_and_kevin), users(:bender).bot_key), params: +"Talking to myself again!"
    end
  end

  test "create can't be abused to post messages as any user" do
    user = users(:kevin)
    bot_key = "#{user.id}-"

    assert_no_difference -> { Message.count } do
      post room_bot_messages_url(rooms(:bender_and_kevin), bot_key), params: "Hello 👋!"
    end

    assert_response :redirect
  end

  test "denied index" do
    get room_messages_url(@room, bot_key: users(:bender).bot_key, format: :json)
    assert_response :forbidden
  end
end



================================================
FILE: test/controllers/rooms/closeds_controller_test.rb
================================================
require "test_helper"

class Rooms::ClosedsControllerTest < ActionDispatch::IntegrationTest
  setup do
    sign_in :david
  end

  test "show redirects to get general show" do
    get rooms_open_url(users(:david).rooms.closeds.last)
    assert_redirected_to room_url(users(:david).rooms.closeds.last)
  end

  test "new" do
    get new_rooms_closed_url
    assert_response :success
  end

  test "create" do
    assert_turbo_stream_broadcasts [ users(:david), :rooms ], count: 1 do
    assert_turbo_stream_broadcasts [ users(:kevin), :rooms ], count: 1 do
    assert_turbo_stream_broadcasts [ users(:jason), :rooms ], count: 1 do
      post rooms_closeds_url, params: { room: { name: "My New Room" }, user_ids: [ users(:david).id, users(:kevin).id, users(:jason).id ] }
    end
    end
    end

    new_room = Room.last
    assert_equal new_room.memberships.count, 3
    assert_redirected_to room_url(Room.last)
  end

  test "update with membership revisions" do
    assert_difference -> { rooms(:designers).reload.users.count }, -1 do
      put rooms_closed_url(rooms(:designers)), params: {
        room: { name: "New Name" }, user_ids: rooms(:designers).users.without(users(:jason)).collect(&:id)
      }
    end

    assert_redirected_to room_url(rooms(:designers))
    assert rooms(:designers).reload.name, "New Name"
  end

  test "update an open room to be closed" do
    put rooms_closed_url(rooms(:pets)), params: { room: { name: "Doesn't matter" }, user_ids: [ users(:david).id, users(:jason).id ] }
    assert_equal rooms(:pets).memberships.count, 2
  end

  test "only admins or creators can update" do
    sign_in :jz

    assert_turbo_stream_broadcasts :rooms, count: 0 do
      put rooms_closed_url(rooms(:designers)), params: { room: { name: "New Name" } }
    end

    assert_response :forbidden
    assert rooms(:designers).reload.name, "Designers"
  end

  test "remove yourself" do
    assert_difference -> { users(:david).rooms.count }, -1 do
      put rooms_closed_url(rooms(:designers), params: { room: { name: "Designers" }, user_ids: [ users(:jason).id, users(:jz).id ] })

      assert_redirected_to room_url(rooms(:designers))
      follow_redirect!
      assert_redirected_to root_url
    end
  end
end



================================================
FILE: test/controllers/rooms/directs_controller_test.rb
================================================
require "test_helper"

class Rooms::DirectsControllerTest < ActionDispatch::IntegrationTest
  setup do
    sign_in :david
  end

  test "create" do
    post rooms_directs_url, params: { user_ids: [ users(:jz).id ] }

    room = Room.last
    assert_redirected_to room_url(room)
    assert room.users.include?(users(:david))
    assert room.users.include?(users(:jz))
  end

  test "create only once per user set" do
    assert_difference -> { Room.all.count }, +1 do
      post rooms_directs_url, params: { user_ids: [ users(:jz).id ] }
      post rooms_directs_url, params: { user_ids: [ users(:jz).id ] }
    end
  end

  test "destroy only allowed for all room users" do
    sign_in :kevin

    assert_difference -> { Room.count }, -1 do
      delete rooms_direct_url(rooms(:david_and_kevin))
      assert_redirected_to root_url
    end
  end
end



================================================
FILE: test/controllers/rooms/involvements_controller_test.rb
================================================
require "test_helper"

class Rooms::InvolvementsControllerTest < ActionDispatch::IntegrationTest
  setup do
    sign_in :david
  end

  test "show" do
    get room_involvement_url(rooms(:designers))
    assert_response :success
  end

  test "update involvement sends turbo update when becoming visible and when going invisible" do
    assert_turbo_stream_broadcasts [ users(:david), :rooms ], count: 1 do
    assert_changes -> { memberships(:david_watercooler).reload.involvement }, from: "everything", to: "invisible" do
      put room_involvement_url(rooms(:watercooler)), params: { involvement: "invisible" }
      assert_redirected_to room_involvement_url(rooms(:watercooler))
    end
    end

    assert_turbo_stream_broadcasts [ users(:david), :rooms ], count: 2 do
    assert_changes -> { memberships(:david_watercooler).reload.involvement }, from: "invisible", to: "everything" do
      put room_involvement_url(rooms(:watercooler)), params: { involvement: "everything" }
      assert_redirected_to room_involvement_url(rooms(:watercooler))
    end
    end
  end

  test "updating involvement does not send turbo update changing visible states" do
    assert_no_turbo_stream_broadcasts [ users(:david), :rooms ] do
    assert_changes -> { memberships(:david_watercooler).reload.involvement }, from: "everything", to: "mentions" do
      put room_involvement_url(rooms(:watercooler)), params: { involvement: "mentions" }
      assert_redirected_to room_involvement_url(rooms(:watercooler))
    end
    end
  end

  test "updating involvement does not send turbo update for direct rooms" do
    assert_no_turbo_stream_broadcasts [ users(:david), :rooms ] do
    assert_changes -> { memberships(:david_david_and_jason).reload.involvement }, from: "everything", to: "nothing" do
      put room_involvement_url(rooms(:david_and_jason)), params: { involvement: "nothing" }
      assert_redirected_to room_involvement_url(rooms(:david_and_jason))
    end
    end
  end
end



================================================
FILE: test/controllers/rooms/opens_controller_test.rb
================================================
require "test_helper"

class Rooms::OpensControllerTest < ActionDispatch::IntegrationTest
  setup do
    sign_in :david
  end

  test "show redirects to get general show" do
    get rooms_open_url(users(:david).rooms.opens.last)
    assert_redirected_to room_url(users(:david).rooms.opens.last)
  end

  test "new" do
    get new_rooms_open_url
    assert_response :success
  end

  test "create" do
    assert_turbo_stream_broadcasts :rooms, count: 1 do
      post rooms_opens_url, params: { room: { name: "My New Room" } }
    end

    assert_equal Room.last.memberships.count, User.count
    assert_redirected_to room_url(Room.last)
  end

  test "only admins or creators can update" do
    sign_in :jz

    assert_turbo_stream_broadcasts :rooms, count: 0 do
      put rooms_open_url(rooms(:hq)), params: { room: { name: "New Name" } }
    end

    assert_response :forbidden
    assert rooms(:hq).reload.name, "HQ"
  end

  test "update" do
    assert_turbo_stream_broadcasts :rooms, count: 1 do
      put rooms_open_url(rooms(:pets)), params: { room: { name: "New Name" } }
    end

    assert_redirected_to room_url(rooms(:pets))
    assert rooms(:pets).reload.name, "New Name"
  end

  test "update a closed room to be open" do
    put rooms_open_url(rooms(:designers)), params: { room: { name: "Doesn't matter" } }
    assert_equal rooms(:designers).memberships.count, User.count
  end
end



================================================
FILE: test/controllers/rooms/refreshes_controller_test.rb
================================================
require "test_helper"

class Rooms::RefreshesControllerTest < ActionDispatch::IntegrationTest
  setup do
    sign_in :david
  end

  test "refresh includes new messages since the last known" do
    travel_to 1.day.ago do
      @old_message = rooms(:hq).messages.create!(creator: users(:jason), body: "Old message", client_message_id: "old")
    end

    travel_to 1.minute.ago do
      @new_message = rooms(:hq).messages.create!(creator: users(:jason), body: "New message", client_message_id: "new")
      @old_message.touch
    end

    get room_refresh_url(rooms(:hq), format: :turbo_stream), params: { since: 10.minutes.ago.to_fs(:epoch) }

    assert_response :success

    assert_select "turbo-stream[action='append']" do
      assert_select "#" + dom_id(@new_message)
      assert_select "template", count: 1
    end

    assert_select "turbo-stream[action='replace']" do
      assert_select "#" + dom_id(@old_message)
      assert_select "template", count: 1
    end
  end
end



================================================
FILE: test/controllers/sessions/transfers_controller_test.rb
================================================
require "test_helper"

class Sessions::TransfersControllerTest < ActionDispatch::IntegrationTest
  test "show renders when not signed in" do
    get session_transfer_url("some-token")

    assert_response :success
  end

  test "update establishes a session when the code is valid" do
    user = users(:david)

    put session_transfer_url(user.transfer_id)

    assert_redirected_to root_url
    assert parsed_cookies.signed[:session_token]
  end
end



================================================
FILE: test/controllers/users/avatars_controller_test.rb
================================================
require "test_helper"

class Users::AvatarsControllerTest < ActionDispatch::IntegrationTest
  setup do
    sign_in :david
  end

  test "show initials" do
    get user_avatar_url(users(:kevin).avatar_token)
    assert_select "text", text: "K"
  end

  test "show image" do
    users(:kevin).update! avatar: fixture_file_upload("moon.jpg", "image/jpeg")
    get user_avatar_url(users(:kevin).avatar_token)

    assert_response :success
    assert_equal "image/webp", @response.content_type
  end

  test "show image with invalid token responds 404" do
    get user_avatar_url("not-a-valid-token")

    assert_response :not_found
  end
end



================================================
FILE: test/controllers/users/profiles_controller_test.rb
================================================
require "test_helper"

class Users::ProfilesControllerTest < ActionDispatch::IntegrationTest
  setup do
    sign_in :david
  end

  test "show" do
    get user_profile_url

    assert_response :success
  end

  test "update" do
    put user_profile_url, params: { user: { name: "John Doe", bio: "Acrobat" } }

    assert_redirected_to user_profile_url
    assert_equal "John Doe", users(:david).reload.name
    assert_equal "Acrobat", users(:david).bio
    assert_equal "david@37signals.com", users(:david).email_address
  end

  test "updates are limited to the current user" do
    put user_profile_url(users(:jason)), params: { user: { name: "John Doe" } }

    assert_equal "Jason", users(:jason).reload.name
  end
end



================================================
FILE: test/controllers/users/push_subscriptions_controller_test.rb
================================================
require "test_helper"

class Users::PushSubscriptionsControllerTest < ActionDispatch::IntegrationTest
  setup do
    sign_in :david
  end

  test "create new push subscription" do
    subscription_params = { "endpoint" => "https://apple", "p256dh_key" => "123", "auth_key" => "456" }

    post user_push_subscriptions_url,
      params: { push_subscription: subscription_params }, headers: { "HTTP_USER_AGENT" => "Mozilla/5.0" }

    assert_response :ok

    assert_equal subscription_params, users(:david).push_subscriptions.last.attributes.slice("endpoint", "p256dh_key", "auth_key")
    assert_equal "Mozilla/5.0", users(:david).push_subscriptions.last.user_agent
  end

  test "touch existing subscription" do
    assert_no_difference -> { users(:david).push_subscriptions.count } do
      assert_changes -> { push_subscriptions(:david_chrome).reload.updated_at } do
        post user_push_subscriptions_url(params: {
          push_subscription: push_subscriptions(:david_chrome).attributes.slice("endpoint", "p256dh_key", "auth_key")
        })
      end
    end

    assert_response :ok
  end

  test "destroy a push subscription via dev mode" do
    assert_difference -> { Push::Subscription.count }, -1 do
      delete user_push_subscription_url(push_subscriptions(:david_chrome))
      assert_redirected_to user_push_subscriptions_url
    end
  end
end



================================================
FILE: test/controllers/users/sidebars_controller_test.rb
================================================
require "test_helper"

class Users::SidebarsControllerTest < ActionDispatch::IntegrationTest
  setup do
    sign_in :david
  end

  test "show" do
    get user_sidebar_url

    users(:david).rooms.opens.each do |room|
      assert_match /#{room.name}/, @response.body
    end
  end

  test "unread directs" do
    rooms(:david_and_jason).messages.create! client_message_id: 999, body: "Hello", creator: users(:jason)

    get user_sidebar_url
    assert_select ".unread", count: users(:david).memberships.select { |m| m.room.direct? && m.unread? }.count
  end


  test "unread other" do
    rooms(:watercooler).messages.create! client_message_id: 999, body: "Hello", creator: users(:jason)

    get user_sidebar_url
    assert_select ".unread", count: users(:david).memberships.reject { |m| m.room.direct? || !m.unread? }.count
  end
end



================================================
FILE: test/fixtures/accounts.yml
================================================
signal:
  name: 37signals
  join_code: CRMu-l8Ge-KB9B



================================================
FILE: test/fixtures/boosts.yml
================================================
first:
  message: first
  booster: david
  content: Hello
thirteenth:
  message: thirteenth
  booster: jason
  content: 💯



================================================
FILE: test/fixtures/memberships.yml
================================================
david_designers:
  room: designers
  user: david

jason_designers:
  room: designers
  user: jason
  involvement: everything

jz_designers:
  room: designers
  user: jz
  involvement: everything

kevin_designers:
  room: designers
  user: kevin

david_pets:
  room: pets
  user: david
  involvement: everything

jason_pets:
  room: pets
  user: jason
  involvement: everything

david_watercooler:
  room: watercooler
  user: david
  involvement: everything

jason_watercooler:
  room: watercooler
  user: jason
  involvement: everything

bender_watercooler:
  room: watercooler
  user: bender

david_hq:
  room: hq
  user: david
  involvement: everything

jason_hq:
  room: hq
  user: jason
  involvement: everything

jz_hq:
  room: hq
  user: jz
  involvement: everything

kevin_hq:
  room: hq
  user: kevin
  involvement: everything

david_david_and_jason:
  room: david_and_jason
  user: david
  involvement: everything

jason_david_and_jason:
  room: david_and_jason
  user: jason
  involvement: everything

david_david_and_kevin:
  room: david_and_kevin
  user: david
  involvement: everything

kevin_david_and_kevin:
  room: david_and_kevin
  user: kevin
  involvement: everything

bender_bender_and_kevin:
  room: bender_and_kevin
  user: bender
  involvement: everything

kevin_bender_and_kevin:
  room: bender_and_kevin
  user: kevin
  involvement: everything



================================================
FILE: test/fixtures/messages.yml
================================================
first:
  room: designers
  creator: jason
  client_message_id: "0001"
  created_at: <%= 1.hour.ago %>

second:
  room: designers
  creator: david
  client_message_id: "0002"
  created_at: <%= 36.minutes.ago %>

third:
  room: designers
  creator: jz
  client_message_id: "0003"
  created_at: <%= 7.minutes.ago %>

fourth:
  room: watercooler
  creator: jz
  client_message_id: "0004"
  created_at: <%= 30.minutes.ago %>

fifth:
  room: watercooler
  creator: jason
  client_message_id: "0005"
  created_at: <%= 29.minutes.ago %>

sixth:
  room: watercooler
  creator: david
  client_message_id: "0006"
  created_at: <%= 27.minutes.ago %>

seventh:
  room: watercooler
  creator: jason
  client_message_id: "0007"
  created_at: <%= 26.minutes.ago %>

eighth:
  room: watercooler
  creator: jz
  client_message_id: "0008"
  created_at: <%= 25.minutes.ago %>

ninth:
  room: watercooler
  creator: jz
  client_message_id: "0009"
  created_at: <%= 24.minutes.ago %>

tenth:
  room: watercooler
  creator: david
  client_message_id: "0010"
  created_at: <%= 23.minutes.ago %>

eleventh:
  room: watercooler
  creator: jason
  client_message_id: "0011"
  created_at: <%= 22.minutes.ago %>

twelfth:
  room: watercooler
  creator: jason
  client_message_id: "0012"
  created_at: <%= 21.minutes.ago %>

thirteenth:
  room: watercooler
  creator: jz
  client_message_id: "0013"
  created_at: <%= 5.minutes.ago %>



================================================
FILE: test/fixtures/rooms.yml
================================================
pets:
  name: All Pets
  type: Rooms::Open
  creator: :david

hq:
  name: HQ
  type: Rooms::Open
  creator: :david

watercooler:
  name: All Talk
  type: Rooms::Closed
  creator: :david

designers:
  name: Designers
  type: Rooms::Closed
  creator: :david

david_and_jason:
  type: Rooms::Direct
  creator: :david

david_and_kevin:
  type: Rooms::Direct
  creator: :david

bender_and_kevin:
  type: Rooms::Direct
  creator: :kevin



================================================
FILE: test/fixtures/searches.yml
================================================
david_pizza:
  user: david
  query: pizza



================================================
FILE: test/fixtures/sessions.yml
================================================
david_safari:
  user: david
  token: AxJs94fteQ5Autv2VrKsH68c
  user_agent: "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) HEY/1.0.4 Chrome/83.0.4103.100 Electron/9.0.3 Safari/537.36"
  last_active_at: <%= 2.hours.ago %>



================================================
FILE: test/fixtures/users.yml
================================================
<% password_digest = BCrypt::Password.create("secret123456") %>

david:
  name: David
  email_address: david@37signals.com
  password_digest: <%= password_digest %>
  role: administrator

jason:
  name: Jason
  email_address: jason@37signals.com
  password_digest: <%= password_digest %>
  role: administrator

jz:
  name: JZ
  email_address: jz@37signals.com
  password_digest: <%= password_digest %>
  bio: Designer

kevin:
  name: Kevin
  email_address: kevin@37signals.com
  password_digest: <%= password_digest %>
  bio: Programmer

bender:
  name: Bender Bot
  bot_token: <%= User.generate_bot_token %>
  role: bot



================================================
FILE: test/fixtures/webhooks.yml
================================================
bender:
  user: bender
  url: http://example.com/bender



================================================
FILE: test/fixtures/action_text/rich_texts.yml
================================================
first:
  record: first (Message)
  name: body
  body: First post!

second:
  record: second (Message)
  name: body
  body: Seconded.

third:
  record: third (Message)
  name: body
  body: Third time's a charm.

fourth:
  record: fourth (Message)
  name: body
  body: You know what the fellow said – in Italy, for thirty years under the Borgias, they had warfare, terror, murder and bloodshed, but they produced Michelangelo, Leonardo da Vinci and the Renaissance. In Switzerland, they had brotherly love, they had five hundred years of democracy and peace – and what did that produce? The cuckoo clock.

fifth:
  record: fifth (Message)
  name: body
  body: Champagne, if you are seeking the truth, is better than a lie detector.

sixth:
  record: sixth (Message)
  name: body
  body: The sense of unhappiness is so much easier to convey than that of happiness. In misery we seem aware of our own existence, even though it may be in the form of a monstrous egotism—this pain of mine is individual, this nerve that winces belongs to me and to no other. But happiness annihilates us—we lose our identity.

seventh:
  record: seventh (Message)
  name: body
  body: A story has no beginning or end—arbitrarily one chooses that moment of experience from which to look back or from which to look ahead.

eighth:
  record: eighth (Message)
  name: body
  body: Hate is a lack of imagination.

ninth:
  record: ninth (Message)
  name: body
  body: And innocence is a kind of insanity

tenth:
  record: tenth (Message)
  name: body
  body: I don't care a damn about men who are loyal to the people who pay them, to organizations...I don't think even my country means all that much. There are many countries in our blood, aren't there, but only one person. Would the world be in the mess it is if we were loyal to love and not to countries?

eleventh:
  record: eleventh (Message)
  name: body
  body: People who like quotes love meaningless generalizations

twelfth:
  record: twelfth (Message)
  name: body
  body: Pain is easy to write. In pain we're all happily individual. But what can one write about happiness?

thirteenth:
  record: thirteenth (Message)
  name: body
  body: When we are not sure, we are alive.



================================================
FILE: test/fixtures/files/.keep
================================================
[Empty file]


================================================
FILE: test/fixtures/push/subscriptions.yml
================================================
david_chrome:
  user: david
  endpoint: https://fcm.googleapis.com/fcm/send/123
  p256dh_key: 123-RIXcMgkdjhRnFZaYjjGvo00dydRQbCpQTuXFjLaCPSE7ofxi19awgGc3Doqa1RmYQqsbQDfQTifFZgc
  auth_key: xxx2DtgvmLkevKRwoyahJl0efg
  user_agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36

jason_chrome:
  user: jason
  endpoint: https://fcm.googleapis.com/fcm/send/567
  p256dh_key: 456-RIXcMgkdjhRnFZaYjjGvo00dydRQbCpQTuXFjLaCPSE7ofxi19awgGc3Doqa1RmYQqsbQDfQTifFZgc
  auth_key: xxx2DtgvmLkevKRwoyahJl0efg
  user_agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36

jz_chrome:
  user: jz
  endpoint: https://fcm.googleapis.com/fcm/send/456
  p256dh_key: 456-RIXcMgkdjhRnFZaYjjGvo00dydRQbCpQTuXFjLaCPSE7ofxi19awgGc3Doqa1RmYQqsbQDfQTifFZgc
  auth_key: xxx2DtgvmLkevKRwoyahJl0efg
  user_agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36

kevin_chrome:
  user: kevin
  endpoint: https://fcm.googleapis.com/fcm/send/789
  p256dh_key: 456-RIXcMgkdjhRnFZaYjjGvo00dydRQbCpQTuXFjLaCPSE7ofxi19awgGc3Doqa1RmYQqsbQDfQTifFZgc
  auth_key: xxx2DtgvmLkevKRwoyahJl0efg
  user_agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36



================================================
FILE: test/helpers/content_filters_test.rb
================================================
require "test_helper"

class ContentFiltersTest < ActionView::TestCase
  test "entire message contains an unfurled URL" do
    text = "https://basecamp.com/"
    message = Message.create! room: rooms(:pets), body: unfurled_message_body_for_basecamp(text), client_message_id: "0015", creator: users(:jason)

    filtered = ContentFilters::TextMessagePresentationFilters.apply(message.body.body)
    assert_not_equal message.body.body.to_html, filtered.to_html
    assert_match /<div><action-text-attachment/, filtered.to_html
  end

  test "message includes additional text besides an unfurled URL" do
    text = "Hello https://basecamp.com/"
    message = Message.create! room: rooms(:pets), body: unfurled_message_body_for_basecamp(text), client_message_id: "0015", creator: users(:jason)

    filtered = ContentFilters::TextMessagePresentationFilters.apply(message.body.body)
    assert_equal message.body.body.to_html, filtered.to_html
    assert_match %r{<div>Hello https://basecamp\.com/<action-text-attachment}, filtered.to_html
  end

  test "unfurled tweet without any image" do
    text = "<div>https://twitter.com/37signals/status/1750290547908952568<action-text-attachment content-type=\"application/vnd.actiontext.opengraph-embed\" url=\"https://pbs.twimg.com/profile_images/1671940407633010689/9P5gi6LF_200x200.jpg\" href=\"https://twitter.com/37signals/status/1750290547908952568\" filename=\"37signals (@37signals)\" caption=\"We're back up on all apps, everyone. Really sorry for the disruption to your day.\" content=\"<actiontext-opengraph-embed>\n      <div class=&quot;og-embed&quot;>\n        <div class=&quot;og-embed__content&quot;>\n          <div class=&quot;og-embed__title&quot;>37signals (@37signals)</div>\n          <div class=&quot;og-embed__description&quot;>We're back up on all apps, everyone. Really sorry for the disruption to your day.</div>\n        </div>\n        <div class=&quot;og-embed__image&quot;>\n          <img src=&quot;https://pbs.twimg.com/profile_images/1671940407633010689/9P5gi6LF_200x200.jpg&quot; class=&quot;image&quot; alt=&quot;&quot; />\n        </div>\n      </div>\n    </actiontext-opengraph-embed>\"></action-text-attachment></div>"
    message = Message.create! room: rooms(:pets), body: unfurled_message_body_for_basecamp(text), client_message_id: "0015", creator: users(:jason)

    filtered = ContentFilters::StyleUnfurledTwitterAvatars.apply(message.body.body)
    assert_match %r{<div class="cf-twitter-avatar">}, filtered.to_html
  end

  test "unfurled tweet containing an image" do
    text = "<div>https://twitter.com/dhh/status/1748445489648050505<action-text-attachment content-type=\"application/vnd.actiontext.opengraph-embed\" url=\"https://pbs.twimg.com/media/GEO5l04bsAA9f6H.jpg\" href=\"https://twitter.com/dhh/status/1748445489648050505\" filename=\"DHH (@dhh)\" caption=\"We pay homage to the glorious MIT License with the ONCE license. May all our future legalese be as succinct!\" content=\"<actiontext-opengraph-embed>\n      <div class=&quot;og-embed&quot;>\n        <div class=&quot;og-embed__content&quot;>\n          <div class=&quot;og-embed__title&quot;>DHH (@dhh)</div>\n          <div class=&quot;og-embed__description&quot;>We pay homage to the glorious MIT License with the ONCE license. May all our future legalese be as succinct!</div>\n        </div>\n        <div class=&quot;og-embed__image&quot;>\n          <img src=&quot;https://pbs.twimg.com/media/GEO5l04bsAA9f6H.jpg&quot; class=&quot;image&quot; alt=&quot;&quot; />\n        </div>\n      </div>\n    </actiontext-opengraph-embed>\"></action-text-attachment></div>"
    message = Message.create! room: rooms(:pets), body: unfurled_message_body_for_basecamp(text), client_message_id: "0015", creator: users(:jason)

    filtered = ContentFilters::StyleUnfurledTwitterAvatars.apply(message.body.body)
    assert_no_match %r{<div class="cf-twitter-avatar">}, filtered.to_html
  end

  test "entire message contains an unfurled URL from x.com but unfurls to twitter.com" do
    text = "https://x.com/dhh/status/1752476663303323939"
    message = Message.create! room: rooms(:pets), body: unfurled_message_body_for_twitter(text), client_message_id: "0015", creator: users(:jason)

    filtered = ContentFilters::TextMessagePresentationFilters.apply(message.body.body)
    assert_not_equal message.body.body.to_html, filtered.to_html
    assert_match /<div><action-text-attachment/, filtered.to_html
  end

  test "entire message contains an unfurled URL from x.com with query params" do
    text = "https://x.com/dhh/status/1752476663303323939?s=20"
    message = Message.create! room: rooms(:pets), body: unfurled_message_body_for_twitter(text), client_message_id: "0015", creator: users(:jason)

    filtered = ContentFilters::TextMessagePresentationFilters.apply(message.body.body)
    assert_not_equal message.body.body.to_html, filtered.to_html
    assert_match /<div><action-text-attachment/, filtered.to_html
  end

  test "message contains a forbidden tag" do
    exploit_image_tag = 'Hello <img src="https://ssecurityrise.com/tests/billionlaughs-cache.svg">World'
    message = Message.create! room: rooms(:pets), body: exploit_image_tag, client_message_id: "0015", creator: users(:jason)

    filtered = ContentFilters::TextMessagePresentationFilters.apply(message.body.body)
    assert_equal "Hello World", filtered.to_html
  end

  test "message with a mention attachment" do
    message = Message.create! room: rooms(:pets), body: "<div>Hey #{mention_attachment_for(:david)}</div>", creator: users(:jason)

    filtered = ContentFilters::TextMessagePresentationFilters.apply(message.body.body)
    expected = /<action-text-attachment sgid="#{users(:david).attachable_sgid}" content-type="application\/vnd\.campfire\.mention" content="(.*?)"><\/action-text-attachment>/m

    assert_match expected, filtered.to_html
  end

  private
    def unfurled_message_body_for_basecamp(text)
      "<div>#{text}#{unfurled_link_trix_attachment_for_basecamp}</div>"
    end

    def unfurled_link_trix_attachment_for_basecamp
      <<~BASECAMP
      <action-text-attachment content-type=\"application/vnd.actiontext.opengraph-embed\" url=\"https://basecamp.com/assets/general/opengraph.png\" href=\"https://basecamp.com/\" filename=\"Project management software, online collaboration\" caption=\"Trusted by millions, Basecamp puts everything you need to get work done in one place. It’s the calm, organized way to manage projects, work with clients, and communicate company-wide.\" content=\"<actiontext-opengraph-embed>\n      <div class=&quot;og-embed&quot;>\n        <div class=&quot;og-embed__content&quot;>\n          <div class=&quot;og-embed__title&quot;>Project management software, online collaboration</div>\n          <div class=&quot;og-embed__description&quot;>Trusted by millions, Basecamp puts everything you need to get work done in one place. It’s the calm, organized way to manage projects, work with clients, and communicate company-wide.</div>\n        </div>\n        <div class=&quot;og-embed__image&quot;>\n          <img src=&quot;https://basecamp.com/assets/general/opengraph.png&quot; class=&quot;image&quot; alt=&quot;&quot; />\n        </div>\n      </div>\n    </actiontext-opengraph-embed>\"></action-text-attachment>
      BASECAMP
    end

    def unfurled_message_body_for_twitter(text)
      "<div>#{text}#{unfurled_link_trix_attachment_for_twitter}</div>"
    end

    def unfurled_link_trix_attachment_for_twitter
      <<~TWEET
      <action-text-attachment content-type=\"application/vnd.actiontext.opengraph-embed\" url=\"https://pbs.twimg.com/ext_tw_video_thumb/1752476502791503873/pu/img/WEAqUgarUxWjPNHD.jpg\" href=\"https://twitter.com/dhh/status/1752476663303323939\" filename=\"DHH (@dhh)\" caption=\"We're playing with adding easy extension points to ONCE/Campfire. Here's one experiment for allowing any type of CSS to be easily added.\" content=\"&lt;actiontext-opengraph-embed&gt;\n      &lt;div class=&quot;og-embed&quot;&gt;\n        &lt;div class=&quot;og-embed__content&quot;&gt;\n          &lt;div class=&quot;og-embed__title&quot;&gt;DHH (@dhh)&lt;/div&gt;\n          &lt;div class=&quot;og-embed__description&quot;&gt;We're playing with adding easy extension points to ONCE/Campfire. Here's one experiment for allowing any type of CSS to be easily added.&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div class=&quot;og-embed__image&quot;&gt;\n          &lt;img src=&quot;https://pbs.twimg.com/ext_tw_video_thumb/1752476502791503873/pu/img/WEAqUgarUxWjPNHD.jpg&quot; class=&quot;image&quot; alt=&quot;&quot; /&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/actiontext-opengraph-embed&gt;\"><figure class=\"attachment attachment--content attachment--og\">\n  \n    <div class=\"og-embed gap\">\n      <div class=\"og-embed__content\">\n        <div class=\"og-embed__title\">\n          <a href=\"https://twitter.com/dhh/status/1752476663303323939\">DHH (@dhh)</a>\n        </div>\n        <div class=\"og-embed__description\">We're playing with adding easy extension points to ONCE/Campfire. Here's one experiment for allowing any type of CSS to be easily added.</div>\n      </div>\n        <div class=\"og-embed__image\">\n          <img src=\"https://pbs.twimg.com/ext_tw_video_thumb/1752476502791503873/pu/img/WEAqUgarUxWjPNHD.jpg\" class=\"image center\" alt=\"\">\n        </div>\n    </div>\n  \n</figure></action-text-attachment>
      TWEET
    end
end



================================================
FILE: test/helpers/.keep
================================================
[Empty file]


================================================
FILE: test/models/account_test.rb
================================================
require "test_helper"

class AccountTest < ActiveSupport::TestCase
end



================================================
FILE: test/models/action_text_attachment_test.rb
================================================
require "test_helper"

class ActionTextAttachmentTest < ActiveSupport::TestCase
  setup do
    @user = users(:david)
  end

  test "lookup user attachable with invalid sgid" do
    message, signature = @user.attachable_sgid.split("--")

    html = %Q(<action-text-attachment sgid="#{message}--invalid"></action-text-attachment>)
    node = ActionText::Fragment.wrap(html).find_all(ActionText::Attachment.tag_name).first

    attachment = ActionText::Attachment.from_node(node)
    assert_equal @user, attachment.attachable
  end

  test "lookup attachable with nil sgid" do
    html = %Q(<action-text-attachment></action-text-attachment>)
    node = ActionText::Fragment.wrap(html).find_all(ActionText::Attachment.tag_name).first

    attachment = ActionText::Attachment.from_node(node)
    assert_kind_of ActionText::Attachables::MissingAttachable, attachment.attachable
  end

  test "lookup invalid sgid for an attachable requiring a valid sgid" do
    # Make room instance attachable for testing purposes
    room = rooms(:pets).tap { |r| r.extend ActionText::Attachable }

    message, signature = rooms(:pets).attachable_sgid.split("--")

    html = %Q(<action-text-attachment sgid="#{message}--invalid"></action-text-attachment>)
    node = ActionText::Fragment.wrap(html).find_all(ActionText::Attachment.tag_name).first

    attachment = ActionText::Attachment.from_node(node)
    assert_kind_of ActionText::Attachables::MissingAttachable, attachment.attachable
  end
end



================================================
FILE: test/models/first_run_test.rb
================================================
require "test_helper"

class FirstRunTest < ActiveSupport::TestCase
  setup do
    Account.destroy_all
    Room.destroy_all
    User.destroy_all
  end

  test "creating makes first user an administrator" do
    user = create_first_run_user
    assert user.administrator?
  end

  test "first user has access to first room" do
    user = create_first_run_user
    assert user.rooms.one?
  end

  test "first room is an open room" do
    create_first_run_user
    assert Room.first.open?
  end

  private
    def create_first_run_user
      FirstRun.create!({ name: "User", email_address: "user@example.com", password: "secret123456" })
    end
end



================================================
FILE: test/models/membership_test.rb
================================================
require "test_helper"

class MembershipTest < ActiveSupport::TestCase
  setup do
    @membership = memberships(:david_watercooler)
  end

  test "connected scope" do
    @membership.connected
    assert Membership.connected.exists?(@membership.id)

    @membership.disconnected
    assert_not Membership.connected.exists?(@membership.id)

    travel_to Membership::Connectable::CONNECTION_TTL.from_now + 1
    assert_not Membership.connected.exists?(@membership.id)
  end

  test "disconnected scope" do
    @membership.disconnected
    assert Membership.disconnected.exists?(@membership.id)

    @membership.connected
    assert_not Membership.disconnected.exists?(@membership.id)

    travel_to Membership::Connectable::CONNECTION_TTL.from_now + 1
    assert Membership.disconnected.exists?(@membership.id)
  end

  test "connected? is false when connection is stale" do
    @membership.connected
    travel_to Membership::Connectable::CONNECTION_TTL.from_now + 1
    assert_not @membership.connected?
  end

  test "connecting" do
    @membership.connected
    assert @membership.connected?
    assert_equal 1, @membership.connections

    @membership.connected
    assert_equal 2, @membership.connections
  end

  test "connecting resets stale connection count" do
    2.times { @membership.connected }
    assert_equal 2, @membership.connections

    travel_to Membership::Connectable::CONNECTION_TTL.from_now + 1
    @membership.connected
    assert_equal 1, @membership.connections
  end

  test "disconnecting" do
    2.times { @membership.connected }

    @membership.disconnected
    assert @membership.connected?
    assert_equal 1, @membership.connections

    @membership.disconnected
    assert_not @membership.connected?
    assert_equal 0, @membership.connections
  end

  test "disconnecting resets stale connection count" do
    2.times { @membership.connected }
    assert_equal 2, @membership.connections

    travel_to Membership::Connectable::CONNECTION_TTL.from_now + 1
    @membership.disconnected
    assert_equal 0, @membership.connections
  end

  test "refreshing the connection" do
    @membership.connected

    travel_to Membership::Connectable::CONNECTION_TTL.from_now + 1
    assert_not @membership.connected?

    @membership.refresh_connection
    assert @membership.connected?
  end

  test "removing a membership resets the user's connections" do
    @membership.user.expects :reset_remote_connections

    @membership.destroy
  end
end



================================================
FILE: test/models/message_test.rb
================================================
require "test_helper"

class MessageTest < ActiveSupport::TestCase
  include ActionCable::TestHelper, ActiveJob::TestHelper

  test "creating a message enqueues to push later" do
    assert_enqueued_jobs 1, only: [ Room::PushMessageJob ] do
      create_new_message_in rooms(:designers)
    end
  end

  test "all emoji" do
    assert Message.new(body: "😄🤘").plain_text_body.all_emoji?
    assert_not Message.new(body: "Haha! 😄🤘").plain_text_body.all_emoji?
    assert_not Message.new(body: "🔥\nmultiple lines\n💯").plain_text_body.all_emoji?
    assert_not Message.new(body: "🔥 💯").plain_text_body.all_emoji?
  end

  test "mentionees" do
    message = Message.new room: rooms(:pets), body: "<div>Hey #{mention_attachment_for(:david)}</div>", creator: users(:jason), client_message_id: "earth"
    assert_equal [ users(:david) ], message.mentionees

    message_with_duplicate_mentions = Message.new room: rooms(:pets), body: "<div>Hey #{mention_attachment_for(:david)} #{mention_attachment_for(:david)}</div>", creator: users(:jason), client_message_id: "earth"
    assert_equal [ users(:david) ], message.mentionees

    message_mentioning_a_non_member = Message.new room: rooms(:pets), body: "<div>Hey #{mention_attachment_for(:kevin)}</div>", creator: users(:jason), client_message_id: "earth"
    assert_equal [], message_mentioning_a_non_member.mentionees
  end

  private
    def create_new_message_in(room)
      room.messages.create!(creator: users(:jason), body: "Hello", client_message_id: "123")
    end
end



================================================
FILE: test/models/room_test.rb
================================================
require "test_helper"

class RoomTest < ActiveSupport::TestCase
  test "grant membership to user" do
    rooms(:watercooler).memberships.grant_to(users(:kevin))
    assert rooms(:watercooler).users.include?(users(:kevin))
  end

  test "revoke membership from user" do
    rooms(:watercooler).memberships.revoke_from(users(:david))
    assert_not rooms(:watercooler).users.include?(users(:david))
  end

  test "revise memberships" do
    rooms(:watercooler).memberships.revise(granted: users(:kevin), revoked: users(:david))
    assert rooms(:watercooler).users.include?(users(:kevin))
    assert_not rooms(:watercooler).users.include?(users(:david))
  end

  test "create for users by giving them immediate membership" do
    room = Rooms::Closed.create_for({ name: "Hello!", creator: users(:david) }, users: [ users(:kevin), users(:david) ])
    assert room.users.include?(users(:kevin))
    assert room.users.include?(users(:david))
  end

  test "type" do
    assert Rooms::Open.new.open?
    assert_not Rooms::Open.new.direct?
    assert Rooms::Direct.new.direct?
    assert Rooms::Closed.new.closed?
  end

  test "default involvement for new users" do
    room = Rooms::Closed.create_for({ name: "Hello!", creator: users(:david) }, users: [ users(:kevin), users(:david) ])
    assert room.memberships.all? { |m| m.involved_in_mentions? }
  end
end



================================================
FILE: test/models/user_test.rb
================================================
require "test_helper"

class UserTest < ActiveSupport::TestCase
  test "user does not prevent very long passwords" do
    users(:david).update(password: "secret" * 50)
    assert users(:david).valid?
  end

  test "creating users grants membership to the open rooms" do
    assert_difference -> { Membership.count }, +Rooms::Open.count do
      create_new_user
    end
  end

  test "deactivating a user deletes push subscriptions, searches, memberships for non-direct rooms, and changes their email address" do
    assert_difference -> { Membership.count }, -users(:david).memberships.without_direct_rooms.count do
    assert_difference -> { Push::Subscription.count }, -users(:david).push_subscriptions.count do
    assert_difference -> { Search.count }, -users(:david).searches.count do
      SecureRandom.stubs(:uuid).returns("2e7de450-cf04-4fa8-9b02-ff5ab2d733e7")
      users(:david).deactivate
      assert_equal "david-deactivated-2e7de450-cf04-4fa8-9b02-ff5ab2d733e7@37signals.com", users(:david).reload.email_address
    end
    end
    end
  end

  test "deactivating a user deletes their sessions" do
    assert_changes -> { users(:david).sessions.count }, from: 1, to: 0 do
      users(:david).deactivate
    end
  end

  private
    def create_new_user
      User.create!(name: "User", email_address: "user@example.com", password: "secret123456")
    end
end



================================================
FILE: test/models/webhook_test.rb
================================================
require "test_helper"

class WebhookTest < ActiveSupport::TestCase
  test "payload" do
    message = messages(:first)
    message_path = Rails.application.routes.url_helpers.room_at_message_path(message.room, message)
    bot_messages_path = Rails.application.routes.url_helpers.room_bot_messages_path(message.room, users(:bender).bot_key)

    WebMock.stub_request(:post, webhooks(:bender).url).
      with(body: hash_including(
        user: { id: message.creator.id, name: message.creator.name },
        room: { id: message.room.id, name: message.room.name, path: bot_messages_path },
        message: { id: message.id, body: { html: "First post!", plain: "First post!" }, path: message_path },
      ))

    response = webhooks(:bender).deliver(messages(:first))
    assert_equal 200, response.code.to_i
  end

  test "delivery" do
    WebMock.stub_request(:post, webhooks(:bender).url).to_return(status: 200, body: "", headers: {})
    response = webhooks(:bender).deliver(messages(:first))
    assert_equal 200, response.code.to_i
  end

  test "delivery with OK text reply" do
    WebMock.stub_request(:post, webhooks(:bender).url).to_return(status: 200, body: "Hello back!", headers: { "Content-Type" => "text/plain" })
    response = webhooks(:bender).deliver(messages(:first))

    reply_message = Message.last
    assert_equal "Hello back!", reply_message.body.to_plain_text
  end

  test "delivery with OK attachment reply" do
    WebMock.stub_request(:post, webhooks(:bender).url).to_return(status: 200, body: file_fixture("moon.jpg"), headers: { "Content-Type" => "image/jpeg" })
    response = webhooks(:bender).deliver(messages(:first))

    reply_message = Message.last
    assert reply_message.attachment.present?
  end

  test "delivery with error reply" do
    assert_no_difference -> { Message.count } do
      WebMock.stub_request(:post, webhooks(:bender).url).to_return(status: 500, body: "Internal Error!", headers: {})
      response = webhooks(:bender).deliver(messages(:first))
    end
  end

  test "delivery that times out" do
    Webhook.any_instance.stubs(:post).raises(Net::OpenTimeout)
    response = webhooks(:bender).deliver(messages(:first))

    reply_message = Message.last
    assert_equal "Failed to respond within 7 seconds", reply_message.body.to_plain_text
  end
end



================================================
FILE: test/models/.keep
================================================
[Empty file]


================================================
FILE: test/models/account/joinable_test.rb
================================================
require "test_helper"

class Account::JoinableTest < ActiveSupport::TestCase
  test "new accounts get a joinable code" do
    Account.destroy_all
    account = Account.create!(name: "Chat")
    assert_match /\w{4}-\w{4}-\w{4}/, account.join_code
  end

  test "accounts can reset join code" do
    assert_changes -> { accounts(:signal).reload.join_code } do
      accounts(:signal).reset_join_code
    end
  end
end



================================================
FILE: test/models/message/attachment_test.rb
================================================
require "test_helper"

class Message::AttachmentTest < ActiveSupport::TestCase
  include ActiveJob::TestHelper
  include ActionDispatch::TestProcess

  test "creating a message creates image thumbnail" do
    message = create_attachment_message("moon.jpg", "image/jpeg")
    assert message.attachment.representation(:thumb).image.present?
  end

  test "creating a message creates video preview" do
    message = create_attachment_message("alpha-centuri.mov", "video/quicktime")
    assert message.reload.attachment.preview(format: :webp).image.attached?
  end

  test "creating a blank message with attachment will use filename as plain text body" do
    message = create_attachment_message("moon.jpg", "image/jpeg")
    assert_equal message.plain_text_body, "moon.jpg"
  end


  private
    def create_attachment_message(file, content_type)
      rooms(:hq).messages.create_with_attachment! \
        creator: users(:david),
        client_message_id: "message",
        attachment: fixture_file_upload(file, content_type)
    end
end



================================================
FILE: test/models/message/searchable_test.rb
================================================
require "test_helper"

class Message::SearchableTest < ActiveSupport::TestCase
  test "message body is indexed and searchable" do
    message = rooms(:designers).messages.create! body: "My hovercraft is full of eels", client_message_id: "earth", creator: users(:david)
    assert_equal [ message ], rooms(:designers).messages.search("eel")

    message.update! body: "My hovercraft is full of sharks"
    assert_equal [ message ], rooms(:designers).messages.search("sharks")

    message.destroy!
    assert_equal [], rooms(:designers).messages.search("sharks")
  end

  test "search results are returned in message order" do
    messages = [ "first cat", "second cat", "third cat", "cat cat cat" ].map do |body|
      rooms(:designers).messages.create! body: body, client_message_id: body, creator: users(:david)
    end

    assert_equal messages, rooms(:designers).messages.search("cat")
  end

  test "rich text body is converted to plain text for indexing" do
    message = rooms(:designers).messages.create! body: "<span>My hovercraft is full of eels</span>", client_message_id: "earth", creator: users(:david)

    assert_equal [], rooms(:designers).messages.search("span")
    assert_equal [ message ], rooms(:designers).messages.search("eel")
  end
end



================================================
FILE: test/models/opengraph/document_test.rb
================================================
require "test_helper"

class Opengraph::DocumentTest < ActiveSupport::TestCase
  test "extract opengraph tags using property attribute" do
    document = Opengraph::Document.new("<html><head><meta property=\"og:url\" content=\"https://example.com\"><meta property=\"og:title\" content=\"Hey!\"><meta property=\"og:description\" content=\"desc..\"><meta property=\"og:image\" content=\"https://example.com/image.png\"></head></html>")
    attributes = document.opengraph_attributes

    assert_equal "https://example.com", attributes[:url]
    assert_equal "Hey!", attributes[:title]
    assert_equal "desc..", attributes[:description]
    assert_equal "https://example.com/image.png", attributes[:image]
  end

  test "extract opengraph tags using name attribute" do
    document = Opengraph::Document.new("<html><head><meta name=\"og:url\" content=\"https://example.com\"><meta name=\"og:title\" content=\"Hey!\"><meta name=\"og:description\" content=\"desc..\"><meta name=\"og:image\" content=\"https://example.com/image.png\"></head></html>")
    attributes = document.opengraph_attributes

    assert_equal "https://example.com", attributes[:url]
    assert_equal "Hey!", attributes[:title]
    assert_equal "desc..", attributes[:description]
    assert_equal "https://example.com/image.png", attributes[:image]
  end

  test "document containing missing meta encoding tag and non-UTF8 characters" do
    document = Opengraph::Document.new("<html><head><meta name=\"og:url\" content=\"https://example.com\"><meta name=\"og:title\" content=\"Hey!\"><meta name=\"og:description\" content=\"Hello â\u0080\u0099World\"><meta name=\"og:image\" content=\"https://example.com/image.png\"></head></html>")
    attributes = document.opengraph_attributes

    assert_equal "https://example.com", attributes[:url]
    assert_equal "Hey!", attributes[:title]
    assert_equal "Hello World", attributes[:description]
    assert_equal "https://example.com/image.png", attributes[:image]
  end
end



================================================
FILE: test/models/opengraph/fetch_test.rb
================================================
require "test_helper"
require "restricted_http/private_network_guard"

class Opengraph::FetchTest < ActiveSupport::TestCase
  setup do
    @fetch = Opengraph::Fetch.new
    @url = URI.parse("https://www.example.com")
  end

  test "#fetch_document fetches valid HTML" do
    WebMock.stub_request(:get, "https://www.example.com/")
      .to_return(status: 200, body: "<body>ok<body>", headers: { content_type: "text/html" })

    assert_equal "<body>ok<body>", @fetch.fetch_document(@url)
  end

  test "#fetch_document discards other content types" do
    WebMock.stub_request(:get, "https://www.example.com/")
      .to_return(status: 200, body: "I'm not HTML!", headers: { content_type: "text/plain" })

    assert_nil @fetch.fetch_document(@url)
  end

  test "#fetch_document follows redirects" do
    WebMock.stub_request(:get, "https://www.example.com/")
      .to_return(status: 302, headers: { location: "https://www.other.com/" })

    WebMock.stub_request(:get, "https://www.other.com/")
      .to_return(status: 200, body: "<body>ok<body>", headers: { content_type: "text/html" })

    assert_equal "<body>ok<body>", @fetch.fetch_document(@url)
  end

  test "#fetch_document does not follow redirects to private networks" do
    WebMock.stub_request(:get, "https://www.example.com/")
      .to_return(status: 302, headers: { location: "https://www.other.com/" })

    WebMock.stub_request(:get, "https://www.other.com/")
      .to_return(status: 200, body: "<body>ok<body>", headers: { content_type: "text/html" })
    Resolv.stubs(:getaddress).with("www.other.com").returns("127.0.0.1")

    assert_raises RestrictedHTTP::Violation do
      @fetch.fetch_document(@url, ip: "1.2.3.4")
    end
  end

  test "#fetch_document resolves hostnames once to avoid DNS rebinding" do
    # Allow but interrupt a real connection to demonstrate that we connect
    # to a resolved IP, not a hostname to re-resolve.
    WebMock.disable_net_connect! allow: [ @url.host ]
    Resolv.stubs(:getaddress).with(@url.host).returns("1.2.3.4", "127.0.0.1")
    TCPSocket.expects(:open).with(@url.host, 443, nil, nil).never
    TCPSocket.expects(:open).with("1.2.3.4", 443, nil, nil).throws(:dns_not_rebound)

    assert_throws :dns_not_rebound do
      @fetch.fetch_document(@url)
    end
  end

  test "#fetch_document resolves redirect location hostnames once to avoid DNS rebinding" do
    # Stub the initial URL to redirect to a DNS-rebound location
    WebMock.stub_request(:get, "https://www.other.com/")
      .to_return(status: 302, headers: { location: @url.to_s })

    # Allow but interrupt a real connection to demonstrate that we connect
    # to a resolved IP, not a hostname to re-resolve.
    WebMock.disable_net_connect! allow: [ @url.host ]
    Resolv.stubs(:getaddress).with(@url.host).returns("1.2.3.4", "127.0.0.1")
    TCPSocket.expects(:open).with(@url.host, 443, nil, nil).never
    TCPSocket.expects(:open).with("1.2.3.4", 443, nil, nil).throws(:dns_not_rebound)

    assert_throws :dns_not_rebound do
      @fetch.fetch_document(URI.parse("https://www.other.com/"), ip: "1.2.3.4")
    end
  end

  test "#fetch_document is empty following redirects that never finish" do
    WebMock.stub_request(:get, "https://www.example.com/")
      .to_return(status: 302, headers: { location: "https://www.example.com/" })

    assert_raises Opengraph::Fetch::TooManyRedirectsError do
      @fetch.fetch_document(@url)
    end
  end

  test "#fetch_document ignores large responses" do
    WebMock.stub_request(:get, "https://www.example.com/")
      .to_return(status: 200, body: "too large", headers: { content_length: 1.gigabyte, content_type: "text/html" })

    assert_nil @fetch.fetch_document(@url)
  end

  test "#fetch_document ignores large responses that were missing their content length" do
    WebMock.stub_request(:get, "https://www.example.com/")
      .to_return(status: 200, body: large_body_content, headers: { content_type: "text/html" })

    assert_nil @fetch.fetch_document(@url)
  end

  test "#fetch_document ignores large responses that were lying about their content length" do
    WebMock.stub_request(:get, "https://www.example.com/")
      .to_return(status: 200, body: large_body_content, headers: { content_length: 1.megabyte, content_type: "text/html" })

    assert_nil @fetch.fetch_document(@url)
  end

  test "fetch content type" do
    WebMock.stub_request(:head, "https://example.com/image.png").to_return(status: 200, headers: { content_type: "image/png" })

    url = URI.parse("https://example.com/image.png")
    assert_equal "image/png", @fetch.fetch_content_type(url)
  end

  private
    def large_body_content
      "x" * (Opengraph::Fetch::MAX_BODY_SIZE + 1)
    end
end



================================================
FILE: test/models/opengraph/location_test.rb
================================================
require "test_helper"
require "restricted_http/private_network_guard"

class Opengraph::LocationTest < ActiveSupport::TestCase
  test "url validations" do
    assert Opengraph::Location.new("https://www.example.com").valid?
    assert Opengraph::Location.new("http://www.example.com").valid?

    assert_not Opengraph::Location.new("~/etc/password").valid?
    assert_not Opengraph::Location.new("ftp://speedtest.tele2.net").valid?
    assert_not Opengraph::Location.new("httpfake").valid?
    assert_not Opengraph::Location.new(" foo").valid?
    assert_not Opengraph::Location.new("https/incorrect").valid?
  end

  test "private network urls" do
    Resolv.stubs(:getaddress).with("www.example.com").returns("172.16.0.0")

    location = Opengraph::Location.new("https://www.example.com")
    assert_not location.valid?
    assert_equal [ "is not public" ], location.errors[:url]
  end

  test "avoid reading file urls when expecting HTML" do
    large_file = Opengraph::Location.new("https://www.example.com/100gb.zip")

    assert_nil Opengraph::Location.new("http://www.example.com/video.mp4").read_html
    assert_nil Opengraph::Location.new("http://www.example.com/archive.tar").read_html
    assert_nil Opengraph::Location.new("https://www.example.com/large.heic").read_html
    assert_nil Opengraph::Location.new("https://www.example.com/image.jpeg").read_html
    assert_nil Opengraph::Location.new("https://www.example.com/malware.exe").read_html
    assert_nil Opengraph::Location.new("https://www.example.com/massiveOS.iso").read_html
  end

  test "read valid HTML" do
    WebMock.stub_request(:get, "https://www.example.com/")
      .to_return(status: 200, body: "<body>ok<body>", headers: { content_type: "text/html" })

    location = Opengraph::Location.new("https://www.example.com")
    assert_equal "<body>ok<body>", location.read_html
  end

  test "read ignores invalid responses" do
    WebMock.stub_request(:get, "https://www.example.com/")
      .to_return(status: 200, body: "too large", headers: { content_length: 1.gigabyte, content_type: "text/html" })

    location = Opengraph::Location.new("https://www.example.com")
    assert_nil location.read_html
  end
end



================================================
FILE: test/models/opengraph/metadata_test.rb
================================================
require "test_helper"

class Opengraph::MetadataTest < ActiveSupport::TestCase
  test "successful fetch" do
    body = <<~HTML
      <html>
        <head>
          <meta property="og:url" content="https://example.com">
          <meta property="og:title" content="Hey!">
          <meta property="og:description" content="Hello">
          <meta property="og:image" content="https://example.com/image.png">
        </head>
      </html>
    HTML

    WebMock.stub_request(:get, "https://www.example.com/").to_return(status: 200, body: body, headers: { content_type: "text/html" })
    WebMock.stub_request(:head, "https://example.com/image.png").to_return(status: 200, headers: { content_type: "image/png" })

    metadata = Opengraph::Metadata.from_url("https://www.example.com")
    assert metadata.valid?

    assert_equal "https://example.com", metadata.url
    assert_equal "Hey!", metadata.title
    assert_equal "Hello", metadata.description
    assert_equal "https://example.com/image.png", metadata.image
  end

  test "missing opengraph meta tags" do
    WebMock.stub_request(:get, "https://www.example.com/").to_return(status: 200, body: "<html><head></head></html>", headers: { content_type: "text/html" })
    opengraph = Opengraph::Metadata.from_url("https://www.example.com")

    assert_not opengraph.valid?
    assert_equal [ "Title can't be blank", "Description can't be blank" ],  opengraph.errors.full_messages
  end

  test "URL uses the provided value if the returned value is missing" do
    body = <<~HTML
      <html>
        <head>
          <meta property="og:title" content="Hey!">
          <meta property="og:description" content="Hello">
          <meta property="og:image" content="https://example.com/image.png">
        </head>
      </html>
    HTML

    WebMock.stub_request(:get, "https://www.example.com/").to_return(status: 200, body: body, headers: { content_type: "text/html" })
    WebMock.stub_request(:head, "https://example.com/image.png").to_return(status: 200, headers: { content_type: "image/png" })

    metadata = Opengraph::Metadata.from_url("https://www.example.com")

    assert metadata.valid?
    assert_equal "https://www.example.com", metadata.url
  end

  test "URL uses the provided value if the returned value is invalid" do
    body = <<~HTML
      <html>
        <head>
          <meta property="og:url" content="/foo">
          <meta property="og:title" content="Hey!">
          <meta property="og:description" content="Hello">
          <meta property="og:image" content="https://example.com/image.png">
        </head>
      </html>
    HTML

    WebMock.stub_request(:get, "https://www.example.com/foo").to_return(status: 200, body: body, headers: { content_type: "text/html" })
    WebMock.stub_request(:head, "https://example.com/image.png").to_return(status: 200, headers: { content_type: "image/png" })

    metadata = Opengraph::Metadata.from_url("https://www.example.com/foo")

    assert metadata.valid?
    assert_equal "https://www.example.com/foo", metadata.url
  end

  test "missing response body" do
    WebMock.stub_request(:get, "https://www.example.com/").to_return(status: 403, body: "", headers: { content_type: "text/html" })
    assert_not Opengraph::Metadata.from_url("https://www.example.com").valid?
  end

  test "non html response" do
    WebMock.stub_request(:get, "https://www.example.com/image").to_return(status: 200, body: "[blob]", headers: { content_type: "image/jpeg" })
    assert_not Opengraph::Metadata.from_url("https://www.example.com/image").valid?
  end

  test "relative and invalid image URLs are ignored" do
    body = <<~HTML
      <html>
        <head>
          <meta property="og:url" content="https://example.com">
          <meta property="og:title" content="Hey!">
          <meta property="og:description" content="Hello">
          <meta property="og:image" content="%s">
        </head>
      </html>
    HTML

    [ "/image.png", "foo", "https/incorrect", "~/etc/password" ].each do |invalid_image_url|
      WebMock.stub_request(:get, "https://www.example.com/").to_return(status: 200, body: body % invalid_image_url, headers: { content_type: "text/html" })
      opengraph = Opengraph::Metadata.from_url("https://www.example.com")

      assert opengraph.valid?
      assert_nil opengraph.image
    end
  end

  test "sanitize title and description" do
    body = <<~HTML
      <html>
        <head>
          <meta property="og:title" content="Hey!<script>alert('hi')</script>">
          <meta property="og:description" content="Hello<script>alert('hi')</script>">
          <meta property="og:image" content="https://example.com/image.png">
        </head>
      </html>
    HTML

    WebMock.stub_request(:get, "https://www.example.com/").to_return(status: 200, body: body, headers: { content_type: "text/html" })
    WebMock.stub_request(:head, "https://example.com/image.png").to_return(status: 200, headers: { content_type: "image/png" })

    metadata = Opengraph::Metadata.from_url("https://www.example.com")

    assert metadata.valid?
    assert_equal "Hey!alert('hi')", metadata.title
    assert_equal "Helloalert('hi')", metadata.description
  end

  test "remove encoded tags from title and description" do
    body = <<~HTML
      <html>
        <head>
          <meta property="og:title" content="Hey!&#x3c;&#x2f;&#x73;&#x63;&#x72;&#x69;&#x70;&#x74;&#x3e;&#x3c;&#x69;&#x6d;&#x67;&#x20;&#x73;&#x72;&#x63;&#x3d;&#x61;&#x20;&#x6f;&#x6e;&#x65;&#x72;&#x72;&#x6f;&#x72;&#x3d;&#x70;&#x72;&#x6f;&#x6d;&#x70;&#x74;&#x28;&#x31;&#x29;&#x3e;">
          <meta property="og:description" content="Hello&#x3c;&#x2f;&#x73;&#x63;&#x72;&#x69;&#x70;&#x74;&#x3e;&#x3c;&#x69;&#x6d;&#x67;&#x20;&#x73;&#x72;&#x63;&#x3d;&#x61;&#x20;&#x6f;&#x6e;&#x65;&#x72;&#x72;&#x6f;&#x72;&#x3d;&#x70;&#x72;&#x6f;&#x6d;&#x70;&#x74;&#x28;&#x32;&#x29;&#x3e;</script>">
          <meta property="og:image" content="https://example.com/image.png">
        </head>
      </html>
    HTML

    WebMock.stub_request(:get, "https://www.example.com/").to_return(status: 200, body: body, headers: { content_type: "text/html" })
    WebMock.stub_request(:head, "https://example.com/image.png").to_return(status: 200, headers: { content_type: "image/png" })

    metadata = Opengraph::Metadata.from_url("https://www.example.com")

    assert metadata.valid?
    assert_equal "Hey!", metadata.title
    assert_equal "Hello", metadata.description
  end

  test "does not allow SVG content type for preview image" do
    body = <<~HTML
      <html>
        <head>
          <meta property="og:url" content="https://example.com">
          <meta property="og:title" content="Hey!">
          <meta property="og:description" content="Hello">
          <meta property="og:image" content="https://example.com/image.svg">
        </head>
      </html>
    HTML

    WebMock.stub_request(:get, "https://www.example.com/").to_return(status: 200, body: body, headers: { content_type: "text/html" })
    WebMock.stub_request(:head, "https://example.com/image.svg").to_return(status: 200, headers: { content_type: "image/svg+xml" })

    metadata = Opengraph::Metadata.from_url("https://www.example.com")
    assert metadata.valid?

    assert_nil metadata.image
  end
end



================================================
FILE: test/models/room/push_test.rb
================================================
require "test_helper"

class Room::PushTest < ActiveSupport::TestCase
  include ActiveJob::TestHelper

  test "deliver new message to other room users with push subscriptions" do
    task_count = Push::Subscription.count - users(:david).push_subscriptions.count
    perform_enqueued_jobs only: Room::PushMessageJob do
      WebPush.expects(:payload_send).times(task_count)
      rooms(:hq).messages.create! body: "This is from earth", client_message_id: "earth", creator: users(:david)
    end
    wait_for_web_push_delivery_pool_tasks(task_count)
  end

  test "notifies subscribed users" do
    perform_enqueued_jobs only: Room::PushMessageJob do
      WebPush.expects(:payload_send).times(2)
      rooms(:designers).messages.create! body: "This is from earth", client_message_id: "earth", creator: users(:david)
    end
    wait_for_web_push_delivery_pool_tasks(2)

    perform_enqueued_jobs only: Room::PushMessageJob do
      WebPush.expects(:payload_send).times(3)
      rooms(:designers).messages.create! body: "Hey #{mention_attachment_for(:kevin)}", client_message_id: "earth", creator: users(:david)
    end
    wait_for_web_push_delivery_pool_tasks(5)
  end

  test "does not notify for connected rooms" do
    memberships(:kevin_designers).connected

    perform_enqueued_jobs only: Room::PushMessageJob do
      WebPush.expects(:payload_send).times(2)
      rooms(:designers).messages.create! body: "Hey @kevin", client_message_id: "earth", creator: users(:david)
    end
    wait_for_web_push_delivery_pool_tasks(2)
  end

  test "does not notify for invisible rooms" do
    memberships(:kevin_designers).update! involvement: "invisible"

    perform_enqueued_jobs only: Room::PushMessageJob do
      WebPush.expects(:payload_send).times(2)
      rooms(:designers).messages.create! body: "Hey @kevin", client_message_id: "earth", creator: users(:david)
    end
    wait_for_web_push_delivery_pool_tasks(2)
  end

  test "destroys invalid subscriptions" do
    memberships(:kevin_designers).update! involvement: "invisible"

    assert_difference -> { Push::Subscription.count }, -2 do
      perform_enqueued_jobs only: Room::PushMessageJob do
        WebPush.expects(:payload_send).times(2).raises(WebPush::ExpiredSubscription.new(Struct.new(:body).new, "example.com"))
        rooms(:designers).messages.create! body: "Hey @kevin", client_message_id: "earth", creator: users(:david)
      end
      wait_for_web_push_delivery_pool_tasks(2)
      wait_for_invalidation_pool_tasks(2)
    end
  end

  private
    def wait_for_web_push_delivery_pool_tasks(count)
      wait_for_pool_tasks(Rails.configuration.x.web_push_pool.delivery_pool, count)
    end

    def wait_for_invalidation_pool_tasks(count)
      wait_for_pool_tasks(Rails.configuration.x.web_push_pool.invalidation_pool, count)
    end

    def wait_for_pool_tasks(pool, count)
      start = Time.now
      timeout = 0.2
      while pool.completed_task_count < count
        raise "Timeout waiting for pool tasks to complete" if Time.now - start > timeout
        sleep timeout / 10.0
      end
    end
end



================================================
FILE: test/models/rooms/direct_test.rb
================================================
require "test_helper"

class Rooms::DirectTest < ActiveSupport::TestCase
  test "create room for same users" do
    room = Rooms::Direct.find_or_create_for([ users(:david), users(:kevin) ])
    assert room.users.include?(users(:david))
    assert room.users.include?(users(:kevin))
    assert_not room.users.include?(users(:jason))
  end

  test "only one room will exist for the same users" do
    room1 = Rooms::Direct.find_or_create_for([ users(:david), users(:kevin) ])
    room2 = Rooms::Direct.find_or_create_for([ users(:kevin), users(:david) ])
    assert_equal room1, room2
  end

  test "default involvement for new users" do
    room = Rooms::Direct.find_or_create_for([ users(:david), users(:kevin) ])
    assert room.memberships.all? { |m| m.involved_in_everything? }
  end
end



================================================
FILE: test/models/rooms/open_test.rb
================================================
require "test_helper"

class Rooms::OpenTest < ActiveSupport::TestCase
  test "grants access to all users after creation" do
    room = Rooms::Open.create!(name: "My open room with everyone!", creator: users(:david))
    assert_equal User.count, room.users.count
  end

  test "grants access to all users after becoming open" do
    room = rooms(:watercooler).becomes!(Rooms::Open)
    room.save!
    assert_equal User.count, room.users.count
  end
end



================================================
FILE: test/models/user/bot_test.rb
================================================
require "test_helper"

class User::BotTest < ActiveSupport::TestCase
  test "create bot" do
    token = "5M0aLYwQyBXOXa5Wsz6NZb11EE4tW2"
    SecureRandom.stubs(:alphanumeric).returns(token)

    uuid = "3574925f-479d-44f8-82b7-fc039af5367c"
    Random.stubs(:uuid).returns(uuid)

    bot = User.create_bot!(name: "Bender")
    assert_equal "#{bot.id}-#{token}", bot.bot_key
  end

  test "reset bot key" do
    first_token = "5M0aLYwQyBXOXa5Wsz6NZb11EE4tW2"
    SecureRandom.stubs(:alphanumeric).returns(first_token)

    bot = User.create_bot!(name: "Bender")
    assert_equal "#{bot.id}-#{first_token}", bot.bot_key

    second_token = "R4kme9anwWRuz3sSoBXiB8Li8ioZPP"
    SecureRandom.stubs(:alphanumeric).returns(second_token)

    bot.reset_bot_key
    assert_equal "#{bot.id}-#{second_token}", bot.bot_key
  end

  test "authenticate" do
    bot = User.create_bot!(name: "Bender")
    assert User.authenticate_bot(bot.bot_key)
  end

  test "deliver message by webhook" do
    WebMock.stub_request(:post, webhooks(:bender).url).to_return(status: 200)

    perform_enqueued_jobs only: Bot::WebhookJob do
      users(:bender).deliver_webhook_later(messages(:first))
    end
  end
end



================================================
FILE: test/models/user/role_test.rb
================================================
require "test_helper"

class User::RoleTest < ActiveSupport::TestCase
  test "creating subsequent users makes them members" do
    assert User.create!(name: "User", email_address: "user@example.com", password: "secret123456").member?
  end

  test "can_administer?" do
    assert User.new(role: :administrator).can_administer?

    assert_not User.new(role: :member).can_administer?
    assert_not User.new.can_administer?
  end

  test "can administer a record" do
    member = User.new(role: :member)
    assert member.can_administer?(Room.new(creator: member))

    another_member = User.new(role: :member)
    assert another_member.can_administer?(Room.new(creator: member))
    assert_not another_member.can_administer?(rooms(:designers))
  end
end



================================================
FILE: test/performance/chatter.js
================================================
import ws from 'k6/ws';
import http from 'k6/http';
import papaparse from 'https://jslib.k6.io/papaparse/5.1.1/index.js';
import { SharedArray } from 'k6/data';

const turboSignedStreamNames = [
  "InJvb21zIg==--54acd827f0a7db144c75316a9fc488c0a949f9635b1e47956ce1bd9d1cf2c41d",
  "IloybGtPaTh2WTJGdGNHWnBjbVV2VW05dmJYTTZPa05zYjNObFpDOHg6bWVzc2FnZXMi--84f0f3dde5d23eb0fdb410746c2fb76813a4ddff1e2798aac4be0c3d969702ba",
  "IloybGtPaTh2WTJGdGNHWnBjbVV2VlhObGNpOHg6cm9vbXMi--df547a679cd41f7531b53d9e48f9883c02481a4da0d862453106441d8546d084"
];

const dummyCookies = new SharedArray('another data name', function () {
  // Load CSV file and parse it using Papa Parse
  return papaparse.parse(open('cookies.txt'), { header: false }).data;
});

const host = __ENV.HOST == "localhost" ? "host.docker.internal" : __ENV.HOST;
const port = __ENV.PORT ? `:${__ENV.PORT}` : "";
const users = parseInt(__ENV.USERS)

export const options = {
  discardResponseBodies: true,
  scenarios: {
    sockets: {
      executor: 'constant-arrival-rate',
      duration: '60s',
      rate: Math.ceil(users / 3.0),
      timeUnit: '1s',
      preAllocatedVUs: users,
      env: { SCENARIO: 'sockets' },
      gracefulStop: "0s"
    },
    messages: {
      executor: 'shared-iterations',
      iterations: 1,
      vus: 1,
      startTime: '30s',
      env: { SCENARIO: 'messages' },
      gracefulStop: "0s"
    },
  },
};

export default function() {
  if (__ENV.SCENARIO == 'sockets') {
    sockets();
  } else if (__ENV.SCENARIO == 'messages') {
    messages();
  }
}

export function sockets() {
  const cookie = dummyCookies[Math.floor(Math.random() * parseInt(__ENV.USERS))][0];
  const url = `ws://${host}${port}/cable`;
  const params = {
    headers: { 'Origin': `http://localhost`, 'Cookie': `session_token=${cookie}` }
  };

  ws.connect(url, params, function(socket) {
    socket.on('open', function open() {
      // Subscribe to an ActionCable channel
      socket.send(JSON.stringify({ command: 'subscribe', identifier: '{"channel":"PresenceChannel", "room_id":1}' }));
      socket.send(JSON.stringify({ command: 'subscribe', identifier: '{"channel":"UnreadRoomsChannel"}' }));
      socket.send(JSON.stringify({ command: 'subscribe', identifier: '{"channel":"HeartbeatChannel"}' }));
      turboSignedStreamNames.forEach((signedStreamName) => {
        socket.send(JSON.stringify({ command: 'subscribe', identifier: `{"channel":"Turbo::StreamsChannel", "signed_stream_name":"${signedStreamName}"}` }));
      });

      // Handle incoming messages
      socket.on('message', function(message) {
        if (message.includes("confirm_subscription")) {
          console.log("Subscription confirmed");
        } else if (message.includes("append")) {
          console.log("Message received");
        }
      });
    });

    socket.on('error', function(e) {
      if (e.error() != 'websocket: close sent') {
        console.log('An unexpected error occurred: ', e.error());
      }
    });
  });
}

export function messages() {
  const cookie = `session_token=${dummyCookies[0][0]}`;

  const response = http.get(`http://${host}${port}/rooms/1`, { headers: { "Cookie": cookie }, responseType: "text" });
  const csrfToken = response.body.match(/<meta name="csrf-token" content="([^"]*)"/i)[1];

  const postHeaders = {
    "Cookie": cookie,
    "Accept": "text/vnd.turbo-stream.html, text/html, application/xhtml+xml"
  }

  const payload = {
    "message[body]": "Hello from k6",
    "message[client_message_id]": Math.random().toString(36),
    "authenticity_token": csrfToken
  };

  for (let i = 0; i < 100; i++) {
    http.post(`http://${host}${port}/rooms/1/messages`, payload, { headers: postHeaders, responseType: "text" });
  };
}



================================================
FILE: test/performance/create_dummy_cookies.rb
================================================
key_generator = ActiveSupport::KeyGenerator.new("dummy", iterations: 1000)
signed_cookie_secret = key_generator.generate_key("signed cookie")
signed_cookie_verifier = ActiveSupport::MessageVerifier.new(signed_cookie_secret, digest: "SHA1", serializer: ActiveSupport::MessageEncryptor::NullSerializer)

(1..10000).each do |id|
  token = "a" * 19 + id.to_s.rjust(5, "0")
  puts signed_cookie_verifier.generate("\"#{token}\"", expires_in: 20.years, purpose: "cookie.session_token")
end



================================================
FILE: test/system/boosting_messages_test.rb
================================================
require "application_system_test_case"

class BoostingMessagesTest < ApplicationSystemTestCase
  setup do
    sign_in "kevin@37signals.com"
    join_room rooms(:designers)
  end

  test "boosting a message" do
    within_message messages(:third) do
      reveal_message_actions
      fill_in_boost_input "Good morning"
      click_on "Submit"
      assert_boost_text "Good morning"
    end
  end

  test "deleting a boost" do
    using_session("David") do
      sign_in "david@37signals.com"
      join_room rooms(:designers)

      within "#" + dom_id(boosts(:first)) do
        find("span", text: "Hello").click
        assert_selector "button", text: "Delete this boost", wait: 5
        click_on "Delete this boost"
      end

      assert_no_text "Hello"
    end
  end

  test "message update preserves the input state" do
    within_message messages(:third) do
      assert_message_text "Third time's a charm."
      reveal_message_actions
      fill_in_boost_input "Hey!"
    end

    using_session("JZ") do
      sign_in "jz@37signals.com"
      join_room rooms(:designers)

      within_message messages(:third) do
        reveal_message_actions
        find(".message__edit-btn").click

        fill_in_rich_text_area "message_body", with: "Redacted!"
        click_on "Save changes"
      end
    end

    within_message messages(:third) do
      assert_message_text "Redacted!"
      assert_boost_input_value "Hey!"
    end
  end

  test "boost by another user preserves the input state" do
    within_message messages(:third) do
      assert_message_text "Third time's a charm."
      reveal_message_actions
      fill_in_boost_input "Hey!"
    end

    using_session("David") do
      sign_in "david@37signals.com"
      join_room rooms(:designers)

      within_message messages(:third) do
        reveal_message_actions
        fill_in_boost_input "Morning"
        click_on "Submit"
        assert_boost_text "Morning"
      end
    end

    perform_enqueued_jobs

    within_message messages(:third) do
      assert_boost_text "Morning"
      assert_boost_input_value "Hey!"
    end
  end

  private
    def fill_in_boost_input(text)
      click_on "New boost"
      fill_in "boost[content]", with: text
    end

    def assert_boost_input_value(text)
      assert page.has_field? "boost[content]", with: text
    end

    def assert_boost_text(text, **options)
      assert_selector ".boost", text: text, **options
    end
end



================================================
FILE: test/system/sending_messages_test.rb
================================================
require "application_system_test_case"

class SendingMessagesTest < ApplicationSystemTestCase
  setup do
    sign_in "jz@37signals.com"
    join_room rooms(:designers)
  end

  test "sending messages between two users" do
    using_session("Kevin") do
      sign_in "kevin@37signals.com"
      join_room rooms(:designers)
    end

    join_room rooms(:designers)
    send_message "Is this thing on?"

    using_session("Kevin") do
      join_room rooms(:designers)
      assert_message_text "Is this thing on?"

      send_message "👍👍"
    end

    join_room rooms(:designers)
    assert_message_text "👍👍"
  end

  test "editing messages" do
    using_session("Kevin") do
      sign_in "kevin@37signals.com"
      join_room rooms(:designers)
    end

    within_message messages(:third) do
      reveal_message_actions
      find(".message__edit-btn").click
      fill_in_rich_text_area "message_body", with: "Redacted!"
      click_on "Save changes"
    end

    using_session("Kevin") do
      join_room rooms(:designers)

      assert_message_text "Redacted!"
    end
  end

  test "deleting messages" do
    using_session("Kevin") do
      sign_in "kevin@37signals.com"
      join_room rooms(:designers)

      assert_message_text "Third time's a charm."
    end

    within_message messages(:third) do
      reveal_message_actions
      find(".message__edit-btn").click

      accept_confirm do
        click_on "Delete message"
      end
    end

    using_session("Kevin") do
      assert_message_text "Third time's a charm.", count: 0
    end
  end
end



================================================
FILE: test/system/unread_rooms_test.rb
================================================
require "application_system_test_case"

class UnreadRoomsTest < ApplicationSystemTestCase
  setup do
    sign_in "jz@37signals.com"
  end

  test "sending messages between two users" do
    designers_room = rooms(:designers)
    hq_room = rooms(:hq)

    join_room hq_room
    assert_room_read hq_room

    using_session("Kevin") do
      sign_in "kevin@37signals.com"
      join_room designers_room
      send_message("Hello!!")
      send_message("Talking to myself?")
    end

    assert_room_unread designers_room

    join_room designers_room
    assert_room_read designers_room
  end
end



================================================
FILE: test/system/.keep
================================================
[Empty file]


================================================
FILE: test/test_helpers/mention_test_helper.rb
================================================
module MentionTestHelper
  def mention_attachment_for(name)
    user = users(name)
    attachment_body = ApplicationController.render partial: "users/mention", locals: { user: user }
    "<action-text-attachment sgid=\"#{user.attachable_sgid}\" content-type=\"application/vnd.campfire.mention\" content=\"#{attachment_body.gsub('"', '&quot;')}\"></action-text-attachment>"
  end
end



================================================
FILE: test/test_helpers/session_test_helper.rb
================================================
module SessionTestHelper
  def parsed_cookies
    ActionDispatch::Cookies::CookieJar.build(request, cookies.to_hash)
  end

  def sign_in(user)
    user = users(user) unless user.is_a? User
    post session_url, params: { email_address: user.email_address, password: "secret123456" }
    assert cookies[:session_token].present?
  end
end



================================================
FILE: test/test_helpers/system_test_helper.rb
================================================
module SystemTestHelper
  def sign_in(email_address, password = "secret123456")
    visit root_url

    fill_in "email_address", with: email_address
    fill_in "password", with: password

    click_on "log_in"
    assert_selector "a.btn", text: "Designers"
  end

  def wait_for_cable_connection
    assert_selector "turbo-cable-stream-source[connected]", count: 3, visible: false
  end

  def join_room(room)
    visit room_url(room)
    wait_for_cable_connection
    dismiss_pwa_install_prompt
  end

  def send_message(message)
    fill_in_rich_text_area "message_body", with: message
    click_on "send"
  end

  def within_message(message, &block)
    within "#" + dom_id(message), &block
  end

  def assert_message_text(text, **options)
    assert_selector ".message__body", text: text, **options
  end

  def assert_room_read(room)
    assert_selector ".rooms a", class: "!unread", text: "#{room.name}", wait: 5
  end

  def assert_room_unread(room)
    assert_selector ".rooms a", class: "unread", text: "#{room.name}", wait: 5
  end

  def reveal_message_actions
    find(".message__options-btn").click
    rescue Capybara::ElementNotFound
      find(".message__options-btn", visible: false).hover.click
    ensure
      assert_selector ".message__boost-btn", visible: true
  end

  def dismiss_pwa_install_prompt
    if page.has_css?("[data-pwa-install-target~='dialog']", visible: :visible, wait: 5)
      click_on("Close")
    end
  end
end



================================================
FILE: test/test_helpers/turbo_test_helper.rb
================================================
module TurboTestHelper
  def assert_rendered_turbo_stream_broadcast(*streambles, action:, target:, &block)
    streams = find_broadcasts_for(*streambles)
    target = ActionView::RecordIdentifier.dom_id(*target)
    assert_select Nokogiri::HTML.fragment(streams), %(turbo-stream[action="#{action}"][target="#{target}"]), &block
  end

  private
    def find_broadcasts_for(*streambles)
      broadcasting = streambles.collect do |streamble|
        streamble.try(:to_gid_param) || streamble
      end.join(":")

      broadcasts = ActionCable.server.pubsub.broadcasts(broadcasting)
      broadcasts.collect { |b| JSON.parse(b) }.join("\n\n")
    end
end



================================================
FILE: tmp/.keep
================================================
[Empty file]


================================================
FILE: tmp/pids/.keep
================================================
[Empty file]


================================================
FILE: tmp/storage/.keep
================================================
[Empty file]


================================================
FILE: .github/ISSUE_TEMPLATE/config.yml
================================================
blank_issues_enabled: false
contact_links:
  - name: Features, Bug Reports, Questions
    url: https://github.com/basecamp/once-campfire/discussions/new/choose
    about: Please use the discussions area to report issues or ask quest



================================================
FILE: .github/ISSUE_TEMPLATE/preapproved.md
================================================
---
name: Pre-Discussed and Approved Topics
about: |-
  For topics already discussed and approved in the GitHub Discussions section.
---

** PLEASE START A DISCUSSION INSTEAD OF OPENING AN ISSUE **
** For more details see CONTRIBUTING.md **



================================================
FILE: .github/workflows/ci.yml
================================================
name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Scan for security vulnerabilities
        run: bin/brakeman

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Lint code for consistent style
        run: bin/rubocop

  test:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Install packages
        run: sudo apt-get update && sudo apt-get install --no-install-recommends -y libsqlite3-0 libvips curl ffmpeg

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        env:
          REDIS_URL: redis://localhost:6379/0
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Run tests
        run: bin/rails db:setup test

  test_system:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Install packages
        run: sudo apt-get update && sudo apt-get install --no-install-recommends -y libsqlite3-0 libvips curl ffmpeg

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        env:
          REDIS_URL: redis://localhost:6379/0
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Run tests
        run: bin/rails db:setup test:system



================================================
FILE: .github/workflows/publish-image.yml
================================================
name: Build and publish container image to GHCR

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
  workflow_dispatch:

concurrency:
  group: publish-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write
  id-token: write
  attestations: write

env:
  IMAGE_DESCRIPTION: Campfire is a web-based chat application with multiple rooms, direct messages, file attachments with previews, search, web push notifications, @mentions, and bot integrations. Single-tenant; production-ready image with web app, background jobs, caching, file serving, and SSL.
  SOURCE_URL: https://github.com/${{ github.repository }}

jobs:
  build:
    name: Build and push image (${{ matrix.arch }})
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: ubuntu-latest
            platform: linux/amd64
            arch: amd64
          - runner: ubuntu-24.04-arm
            platform: linux/arm64
            arch: arm64
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.11.1

      - name: Log in to GHCR
        uses: docker/login-action@v3.5.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute canonical image name (lowercase)
        id: vars
        shell: bash
        run: |
          set -eu
          IMAGE_REF="${IMAGE_NAME:-$GITHUB_REPOSITORY}"
          CANONICAL_IMAGE="${REGISTRY}/${IMAGE_REF,,}"
          echo "canonical=${CANONICAL_IMAGE}" >> "$GITHUB_OUTPUT"

      - name: Extract Docker metadata (tags, labels) with arch suffix
        id: meta
        uses: docker/metadata-action@v5.8.0
        with:
          images: ${{ steps.vars.outputs.canonical }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha,format=short,prefix=sha-
            type=semver,pattern={{version}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern={{major}}.{{minor}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern={{major}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
          flavor: |
            latest=false
            suffix=-${{ matrix.arch }}
          labels: |
            org.opencontainers.image.source=${{ env.SOURCE_URL }}

      - name: Build and push (${{ matrix.platform }})
        id: build
        uses: docker/build-push-action@v6.18.0
        with:
          context: .
          file: Dockerfile
          build-args: |
            OCI_SOURCE=${{ env.SOURCE_URL }}
            OCI_DESCRIPTION=${{ env.IMAGE_DESCRIPTION }}
          platforms: ${{ matrix.platform }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.platform }}
          cache-to: type=gha,scope=${{ matrix.platform }},mode=max
          sbom: false
          provenance: false

      - name: Attest image provenance (per-arch)
        if: github.event_name != 'pull_request'
        uses: actions/attest-build-provenance@v3.0.0
        with:
          subject-name: ${{ steps.vars.outputs.canonical }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: false

  manifest:
    name: Create multi-arch manifest and sign
    needs: build
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    steps:
      - name: Set up Docker Buildx (for imagetools)
        uses: docker/setup-buildx-action@v3.11.1

      - name: Log in to GHCR
        uses: docker/login-action@v3.5.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute canonical image name (lowercase)
        id: vars
        shell: bash
        run: |
          set -eu
          IMAGE_REF="${IMAGE_NAME:-$GITHUB_REPOSITORY}"
          CANONICAL_IMAGE="${REGISTRY}/${IMAGE_REF,,}"
          echo "canonical=${CANONICAL_IMAGE}" >> "$GITHUB_OUTPUT"

      - name: Compute base tags (no suffix)
        id: meta
        uses: docker/metadata-action@v5.8.0
        with:
          images: ${{ steps.vars.outputs.canonical }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha,format=short,prefix=sha-
            type=semver,pattern={{version}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern={{major}}.{{minor}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern={{major}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }}
          flavor: |
            latest=false
          labels: |
            org.opencontainers.image.source=${{ env.SOURCE_URL }}

      - name: Create multi-arch manifests
        shell: bash
        run: |
          set -eu
          tags="${{ steps.meta.outputs.tags }}"
          echo "Creating manifests for tags:"
          printf '%s\n' "$tags"
          while IFS= read -r tag; do
            [ -z "$tag" ] && continue
            echo "Creating manifest for $tag"
            src_tag="$tag"
            if [[ "$tag" == *:latest && "${GITHUB_REF}" == refs/tags/* ]]; then
              ref="${GITHUB_REF#refs/tags/}"
              src_tag="${tag%:latest}:$ref"
            fi
            if [ -n "${IMAGE_DESCRIPTION:-}" ]; then
              docker buildx imagetools create \
                --tag "$tag" \
                --annotation "index:org.opencontainers.image.description=${IMAGE_DESCRIPTION}" \
                "${src_tag}-amd64" \
                "${src_tag}-arm64"
            else
              docker buildx imagetools create \
                --tag "$tag" \
                "${src_tag}-amd64" \
                "${src_tag}-arm64"
            fi
          done <<< "$tags"

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.9.2

      - name: Cosign sign all tags (keyless OIDC)
        shell: bash
        run: |
          set -eu
          tags="${{ steps.meta.outputs.tags }}"
          printf '%s\n' "$tags"
          while IFS= read -r tag; do
            [ -z "$tag" ] && continue
            echo "Signing $tag"
            cosign sign --yes "$tag"
          done <<< "$tags"




